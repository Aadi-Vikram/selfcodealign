{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return set(list1).intersection(list2)\n"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"}
{"task_id": "Mbpp/4", "completion": "\ndef heap_queue_largest(numbers, n):\n    heap = []\n    for number in numbers:\n        if len(heap) < n:\n            heapq.heappush(heap, number)\n        else:\n            if number > heap[0]:\n                heapq.heapreplace(heap, number)\n    return [heap[0] for _ in range(n)]\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(a,b):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a!= 0\n"}
{"task_id": "Mbpp/7", "completion": "\ndef find_char_long(s):\n    return set([word for word in s.split() if len(word) >= 4])\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(nums):\n    return [num**2 for num in nums]\n"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(s):\n    if len(s) == 1:\n        return 0\n    else:\n        return 1 + find_Rotations(s[1:])\n"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(string, char):\n    if char in string:\n        return string.replace(char, \"\")\n    else:\n        return string\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            for k in range(len(matrix[i])):\n                if matrix[i][j] > matrix[i][k]:\n                    matrix[i][j], matrix[i][k] = matrix[i][k], matrix[i][j]\n    return matrix\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(base, height, depth):\n    return base * height * depth\n"}
{"task_id": "Mbpp/16", "completion": "\ndef text_lowercase_underscore(text):\n    return all(c.islower() and c!= '_' for c in text)\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side):\n    return side * 4\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])\n"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(arr):\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return True\n    return False\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_woodall(n):\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return"}
{"task_id": "Mbpp/56", "completion": "\ndef check(n):\n    return n!= 2 * int(str(n)[::-1]) - 1\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(digits))\n"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(a, b):\n    return a * b < 0\n"}
{"task_id": "Mbpp/59", "completion": "\ndef is_octagonal(n):\n    return (n * (3 * n - 1)) // 2 == n\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(my_list):\n    \"\"\"Return the smallest number in the list.\"\"\"\n    smallest = my_list[0]\n    for num in my_list:\n        if num < smallest:\n            smallest = num\n    return smallest\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/64", "completion": "\ndef sort_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    return lst[0] + recursive_list_sum(lst[1:])\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if arr[0] > arr[1]:\n        return is_Monotonic(arr[1:])\n    if arr[0] < arr[1]:\n        return is_Monotonic(arr[:-1])\n    return True\n"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n    return False\n"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    return len(tuples[0]) == len(tuples[1])\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n    while gap!= 0 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(n):\n    for i in range(1, n):\n        for j in range(1, n):\n            if i**2 + j**2 == n:\n                return True\n    return False\n"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))\n            and all(t[i] % t[i + 1] == 0 for i in range(len(t) - 1))]\n"}
{"task_id": "Mbpp/77", "completion": "\ndef is_Diff (num):\n    sum = 0\n    for i in str(num):\n        sum += int(i)\n    return sum % 11 == 0\n"}
{"task_id": "Mbpp/79", "completion": "\ndef word_len(word):\n    return len(word) % 2 == 0\n"}
{"task_id": "Mbpp/80", "completion": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "Mbpp/82", "completion": "\ndef volume_sphere(radius):\n    \"\"\"Return the volume of a sphere with the given radius.\"\"\"\n    return 4/3 * math.pi * radius ** 3\n"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(s):\n    return chr((ord(s[0]) + ord(s[1]) + ord(s[2])) % 26)\n"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"}
{"task_id": "Mbpp/85", "completion": "\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    return (n * (3 * n - 1)) // 2\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "Mbpp/88", "completion": "\ndef freq_count(my_list):\n    freq = {}\n    for i in my_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    return n - 1 if n > 0 else n\n"}
{"task_id": "Mbpp/90", "completion": "\ndef len_log(words):\n    return max(len(word) for word in words)\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(n):\n    return n == n[::-1]\n"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b\n"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(my_list):\n    \"\"\"Return the first value of the tuple with the smallest second value.\"\"\"\n    return min(my_list, key=lambda x: x[1])[0]\n"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(list_of_lists):\n    min_length = len(list_of_lists[0])\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"}
{"task_id": "Mbpp/96", "completion": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/97", "completion": "\ndef frequency_lists(lists):\n    return {x: lists.count(x) for x in set(sum(lists, []))}\n"}
{"task_id": "Mbpp/98", "completion": "\ndef multiply_num(numbers):\n    return sum(numbers) / len(numbers)\n"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return 11\n    else:\n        while True:\n            n += 1\n            if str(n) == str(n)[::-1]:\n                return n\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    return arr[k-1]\n"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(snake_string):\n    camel_string = ''\n    for i in range(len(snake_string)):\n        if i == 0:\n            camel_string += snake_string[i].upper()\n        else:\n            camel_string += snake_string[i]\n    return camel_string\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    if m == 2:\n        return n * (n - 1) // 2\n    if m == 3:\n        return n * (n - 1) * (n - 2) // 6\n    if m == 4:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24\n    if m == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120\n    if m == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720\n    if m == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 5040\n    if m == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) // 40320\n    if m == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) // 362880\n    if m == 10:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) // 3628800\n    if m == 11:\n        return n * (n - 1) * (n - "}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(sublists):\n    return [sorted(sublist) for sublist in sublists]\n"}
{"task_id": "Mbpp/105", "completion": "\ndef count(lst):\n    return lst.count(True)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(list1, tuple1):\n    return list1 + tuple1\n"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"Merge three sorted lists into a single sorted list.\"\"\"\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            merged_list.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        else:\n            merged_list.append(list3[k])\n            k += 1\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    while k < len(list3):\n        merged_list.append(list3[k])\n        k += 1\n    return merged_list\n"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(s, n):\n    return sum(int(s[i]) ^ int(s[(i + n) % len(s)]) for i in range(len(s)))\n"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    \"\"\"\n    Given a list of nested lists, return a list of common elements in all nested lists.\n\n    Args:\n        nested_lists (list): A list of nested lists.\n\n    Returns:\n        list: A list of common elements in all nested lists.\n    \"\"\"\n    common_elements = []\n    for nested_list in nested_lists:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements\n"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "completion": "\ndef empty_dit(dicts):\n    return all(d=={} for d in dicts)\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(t):\n    return int(''.join(str(x) for x in t))\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [tuple(float(x) for x in y) for y in lst]\n"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(string):\n    return string.split()\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/123", "completion": "\ndef amicable_numbers_sum(n):\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"}
{"task_id": "Mbpp/124", "completion": "\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)\n"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(s):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_of_common_divisors(a, b):\n    \"\"\"Return the sum of common divisors of two numbers.\"\"\"\n    return sum(set(a).intersection(set(b)))\n"}
{"task_id": "Mbpp/127", "completion": "\ndef multiply_int(a,b):\n    return a*b\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(matrix):\n    if len(matrix)!= 4:\n        return False\n    for i in range(4):\n        for j in range(4):\n            if matrix[i][j]!= matrix[j][i]:\n                return False\n    for i in range(4):\n        for j in range(4):\n            if matrix[i][j]!= matrix[i][3-j] + matrix[3-j][j]:\n                return False\n    return True\n"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    \"\"\"Return the item with the maximum frequency in a given list.\"\"\"\n    return max(set(lst), key=lst.count)\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(s):\n    vowels = \"aeiou\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s[i], s[len(s) - i - 1] = s[len(s) - i - 1], s[i]\n    return \"\".join(s)\n"}
{"task_id": "Mbpp/132", "completion": "\ndef tup_string(tup):\n    return ''.join(tup)\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(numbers):\n    return sum([x for x in numbers if x < 0])\n"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    return (n * (3 * n - 1)) // 2\n"}
{"task_id": "Mbpp/137", "completion": "\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count / len(arr)\n"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == "}
{"task_id": "Mbpp/139", "completion": "\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(lst):\n    return set([item for sublist in lst for item in sublist])\n"}
{"task_id": "Mbpp/141", "completion": "\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            break\n        j = i - 1\n        while j > 0 and arr[j] > arr[j - 1]:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n        if j > 0:\n            arr[:j + 1] = arr[:j + 1][::-1]\n    return arr\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(tuple):\n    return len(tuple)\n"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(my_list, elements):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n        my_list (list): The list to remove elements from.\n        elements (list): The list of elements to remove.\n\n    Returns:\n        list: The modified list with all elements removed.\n    \"\"\"\n    for element in elements:\n        if element in my_list:\n            my_list.remove(element)\n    return my_list\n"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    return sum(range(n, 0, -2))\n"}
{"task_id": "Mbpp/164", "completion": "\ndef are_equivalent(a, b):\n    \"\"\"Return True if the sum of the divisors of a and b are the same.\"\"\"\n    return sum(divisors(a)) == sum(divisors(b))\n"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(numbers):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] ^ numbers[j] % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    return 1 << (n - 1).bit_length()\n"}
{"task_id": "Mbpp/168", "completion": "\ndef frequency(numbers, target):\n    count = 0\n    for number in numbers:\n        if number == target:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(my_list, start, end):\n    \"\"\"Return the sum of numbers in a list within a range specified by two indices.\"\"\"\n    return sum(my_list[start:end])\n"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(n):\n    return n * 5\n"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/222", "completion": "\ndef check_type(tuple):\n    if len(set(type(x) for x in tuple)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(s):\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])\n"}
{"task_id": "Mbpp/227", "completion": "\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    return arr[:n] + arr[n:][::-1]\n"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(string, character):\n    return string.replace(\" \", character)\n"}
{"task_id": "Mbpp/232", "completion": "\ndef larg_nnum(l,n):\n    return sorted(l,reverse=True)[:n]\n"}
{"task_id": "Mbpp/233", "completion": "\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n"}
{"task_id": "Mbpp/234", "completion": "\ndef volume_cube(side):\n    return side ** 3\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(number):\n    return number | (number >> 1) & 0x55555555\n"}
{"task_id": "Mbpp/237", "completion": "\ndef check_occurences(tuples):\n    return {tuple: tuples.count(tuple) for tuple in set(tuples)}\n"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1]!= \"\":\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if m < 2:\n        return 0\n    return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 1, n - 1)\n"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/244", "completion": "\ndef next_Perfect_Square(n):\n    return int(n ** 0.5) ** 2 + 1\n"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n    dp = [0] * n\n    dp[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dp[i] = max(dp[i + 1] + arr[i], arr[i])\n    return max(dp)\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(arr1, arr2):\n    intersection = []\n    for i in arr1:\n        if i in arr2:\n            intersection.append(i)\n    return intersection\n"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tuple, element):\n    count = 0\n    for i in tuple:\n        if i == element:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(list, element):\n    return [element] + list + [element]\n"}
{"task_id": "Mbpp/252", "completion": "\ndef convert(z):\n    return (z.real, z.imag)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(my_list):\n    return len([x for x in my_list if isinstance(x, int)])\n"}
{"task_id": "Mbpp/255", "completion": "\ndef combinations_colors(colors, n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(color) for color in colors]\n    return [tuple(color) for color in combinations_colors(colors, n-1)] + [tuple(color) for color in combinations_colors(colors, n-1)]\n"}
{"task_id": "Mbpp/256", "completion": "\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/257", "completion": "\ndef swap_numbers(a, b):\n    return (b, a)\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(tuple1, tuple2):\n    return tuple(sorted(tuple1 + tuple2, key=lambda x: x[1], reverse=True))\n"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    \"\"\"Return the nth newman-shanks-williams prime number.\"\"\"\n    return 2 * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7) * (n + 8) * (n + 9) * (n + 10) * (n + 11) * (n + 12) * (n + 13) * (n + 14) * (n + 15) * (n + 16) * (n + 17) * (n + 18) * (n + 19) * (n + 20) * (n + 21) * (n + 22) * (n + 23) * (n + 24) * (n + 25) * (n + 26) * (n + 27) * (n + 28) * (n + 29) * (n + 30) * (n + 31) * (n + 32) * (n + 33) * (n + 34) * (n + 35) * (n + 36) * (n + 37) * (n + 38) * (n + 39) * (n + 40) * (n + 41) * (n + 42) * (n + 43) * (n + 44) * (n + 45) * (n + 46) * (n + 47) * (n + 48) * (n + 49) * (n + 50) * (n + 51) * (n + 52) * (n + 53) * (n + 54) * (n + 55) * (n + 56) * (n + 57) * (n + 58) * (n + 59) * (n + 60) * (n + 61) * (n + 62) * (n + 63) * (n + 64) * (n + 65) * (n + 66) * (n + 67) * (n + 68) * (n + 69) * (n"}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(tuple1, tuple2):\n    return tuple([x/y for x, y in zip(tuple1, tuple2)])\n"}
{"task_id": "Mbpp/262", "completion": "\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n"}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(dog_years):\n    \"\"\"Calculate a dog's age in dog's years.\"\"\"\n    return dog_years * 7\n"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side):\n    return 6*side**2\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1, 2)])\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    \"\"\"Find the nth star number.\"\"\"\n    return 1 + 2 * (n - 1)\n"}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(numbers):\n    \"\"\"Return the sum of even numbers at even positions of a list.\"\"\"\n    return sum([number for index, number in enumerate(numbers) if index % 2 == 0 and number % 2 == 0])\n"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    \"\"\"Returns the sum of the first n even natural numbers that are raised to the fifth power.\"\"\"\n    return sum([i**5 for i in range(1, n+1, 2)])\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(lst):\n    return [x[2] for x in lst]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(tuple1, tuple2):\n    return tuple([x - y for x, y in zip(tuple1, tuple2)])\n"}
{"task_id": "Mbpp/274", "completion": "\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Iterate from 0 to n\n    for i in range(n):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Calculate the binomial coefficient\n            binomial_coefficient = math.factorial(i) // (math.factorial(i // 2) * math.factorial(i // 2))\n\n            # Add the binomial coefficient to the sum\n            sum += binomial_coefficient\n\n    return sum\n"}
{"task_id": "Mbpp/276", "completion": "\ndef volume_cylinder(radius, height):\n    \"\"\"Return the volume of a cylinder with radius `radius` and height `height`.\"\"\"\n    return math.pi * radius ** 2 * height\n"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(tuple):\n    count = 0\n    for i in range(len(tuple)):\n        if isinstance(tuple[i], tuple):\n            count += count_first_elements(tuple[i])\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/279", "completion": "\ndef is_num_decagonal(n):\n    return n == 1 + 2 * (n - 1) + 3 * (n - 2)\n"}
{"task_id": "Mbpp/280", "completion": "\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(my_list):\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    return [x-y for x,y in zip(list1, list2)]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(n):\n    count = [0] * 10\n    for i in str(n):\n        count[int(i)] += 1\n    for i in range(10):\n        if count[i] > i:\n            return False\n    return True\n"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(list, element):\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"}
{"task_id": "Mbpp/285", "completion": "\ndef text_match_two_three(text):\n    if text.find(\"a\")!= -1 and text.find(\"b\")!= -1 and text.find(\"b\")!= -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Given an array of integers, find the largest sum of a contiguous subarray\n    in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times to repeat the array.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The largest sum of a contiguous subarray in the modified array.\n    \"\"\"\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate over the input array\n    for i in range(n):\n        # If the current element is negative, reset the current sum\n        if arr[i] < 0:\n            current_sum = 0\n        # Otherwise, add the current element to the current sum\n        else:\n            current_sum += arr[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum\n"}
{"task_id": "Mbpp/287", "completion": "\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1, 2)])\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(a, b):\n    return a // b\n"}
{"task_id": "Mbpp/293", "completion": "\ndef otherside_rightangle(a,b):\n    return math.sqrt(a**2+b**2)\n"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    \"\"\"Return the maximum value in a list.\"\"\"\n    return max(lst)\n"}
{"task_id": "Mbpp/295", "completion": "\ndef sum_div(n):\n    return sum(range(1, n+1))\n"}
{"task_id": "Mbpp/296", "completion": "\ndef get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(tuples):\n    \"\"\"Return the maximum aggregate from the list of tuples.\"\"\"\n    max_aggregate = 0\n    for name, score in tuples:\n        if score > max_aggregate:\n            max_aggregate = score\n    return max_aggregate\n"}
{"task_id": "Mbpp/300", "completion": "\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    return count_binary_seq(n-1) + count_binary_seq(n-1)\n"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    if not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, i, k):\n    if i == k:\n        return arr[i]\n    else:\n        return max(arr[i] + max_sum_increasing_subseq(arr, i + 1, k), max_sum_increasing_subseq(arr, i + 1, k))\n"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(list1, list2, n):\n    \"\"\"\n    Given two lists of integers, return the largest n products of two numbers from each list.\n    \"\"\"\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over the lists and find the largest n products\n    for i in range(n):\n        # Find the largest product of two numbers from each list\n        product = list1[i] * list2[i]\n\n        # Add the product to the results list\n        results.append(product)\n\n    return results\n"}
{"task_id": "Mbpp/309", "completion": "\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(s):\n    return tuple(s)\n"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(n):\n    return n | (n & -n)\n"}
{"task_id": "Mbpp/312", "completion": "\ndef volume_cone(radius, height):\n    \"\"\"Calculate the volume of a cone.\n\n    Args:\n        radius (float): The radius of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (math.pi * radius ** 2 * height) / 3\n"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    return int(math.log(n, 2)) + 1\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    \"\"\"Find the nth Lucas number.\"\"\"\n    return lucas(n)\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(lst, format_string):\n    return [format_string.format(i) for i in lst]\n"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(list1, list2, list3):\n    return {list1[i]: {list2[i]: list3[i]} for i in range(len(list1))}\n"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n   "}
{"task_id": "Mbpp/394", "completion": "\ndef check_distinct(tuple):\n    return len(tuple) == len(set(tuple))\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(string):\n    \"\"\"Find the first non-repeating character in a given string.\"\"\"\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count\n        else:\n            char_count[char] += 1\n    # Iterate over each character in the string again\n    for char in string:\n        # If the character has a count of 1, return it\n        if char_count[char] == 1:\n            return char\n    # If no character has a count of 1, return None\n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(numbers):\n    return sum(int(digit) for digit in str(sum(numbers)))\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(lst):\n    return len(set(tuple(sorted(x)) for x in lst))\n"}
{"task_id": "Mbpp/404", "completion": "\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/405", "completion": "\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(number):\n    return number % 2 == 0\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(n):\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    n = ''.join(n)\n    return int(n)\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(tuples):\n    min_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] * tuples[j][0] < min_product:\n                min_product = tuples[i][0] * tuples[j][0]\n    return min_product\n"}
{"task_id": "Mbpp/410", "completion": "\ndef min_val(lst):\n    \"\"\"Return the minimum value in a list.\"\"\"\n    return min(lst)\n"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(numbers):\n    return [x for x in numbers if x % 2 == 0]\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(my_list, n):\n    return [item[0] for item in my_list][n]\n"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/415", "completion": "\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    max_len = 0\n    max_element = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element\n"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(numbers):\n    return sum(round(n) for n in numbers)\n"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2, n+1, 2)])\n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tuple):\n    return '-'.join(tuple)\n"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    return sum([i**3 for i in range(1, n+1)]) / n\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(tuple_of_strings):\n    return [s[-1] for s in tuple_of_strings]\n"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lists, element):\n    count = 0\n    for sublist in lists:\n        if element in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/426", "completion": "\ndef filter_oddnumbers(numbers):\n    return [x for x in numbers if x % 2!= 0]\n"}
{"task_id": "Mbpp/427", "completion": "\ndef change_date_format(date):\n    return date.split('-')[1] + '-' + date.split('-')[0] + '-' + date.split('-')[2]\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(t1, t2):\n    return tuple(a and b for a, b in zip(t1, t2))\n"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a,b,c):\n    return -b/2*a\n"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a,b,c):\n    return (a+b+c)/3\n"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return False\n    return True\n"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(number):\n    return number % 10\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(nos):\n    return [x for x in nos if x < 0]\n"}
{"task_id": "Mbpp/437", "completion": "\ndef remove_odd(s):\n    return ''.join([c for c in s if c.isalpha()])\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(multiple):\n    return sum(multiple)\n"}
{"task_id": "Mbpp/440", "completion": "\ndef find_adverb_position(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] == '!' and sentence[i+1] == '!' and sentence[i+2] == '!' and sentence[i+3] == '!' and sentence[i+4] == '!' and sentence[i+5] == '!' and sentence[i+6] == '!' and sentence[i+7] == '!' and sentence[i+8] == '!' and sentence[i+9] == '!' and sentence[i+10] == '!' and sentence[i+11] == '!' and sentence[i+12] == '!' and sentence[i+13] == '!' and sentence[i+14] == '!' and sentence[i+15] == '!' and sentence[i+16] == '!' and sentence[i+17] == '!' and sentence[i+18] == '!' and sentence[i+19] == '!' and sentence[i+20] == '!' and sentence[i+21] == '!' and sentence[i+22] == '!' and sentence[i+23] == '!' and sentence[i+24] == '!' and sentence[i+25] == '!' and sentence[i+26] == '!' and sentence[i+27] == '!' and sentence[i+28] == '!' and sentence[i+29] == '!' and sentence[i+30] == '!' and sentence[i+31] == '!' and sentence[i+32] == '!' and sentence[i+33] == '!' and sentence[i+34] == '!' and sentence[i+35] == '!' and sentence[i+36] == '!' and sentence[i+37] == '!' and sentence[i+38] == '!' and sentence[i+39] == '!' and sentence[i+40] == '!' and sentence[i+41] == '!' and sentence[i+42] == '!' and sentence[i+43] == '!' and sentence[i+44] == '!' and sentence[i+45] == '!' and sentence[i+46] == '!' and sentence[i+47] == '!' and sentence[i+48] == '!' and sentence[i+49] == '!' and sentence[i+50] == '!' and sentence[i+51] == '!' and sentence[i+52] == '!' and sentence[i+53] == '!' and sentence[i+54]"}
{"task_id": "Mbpp/441", "completion": "\ndef surfacearea_cube(size):\n    return 6 * size ** 2\n"}
{"task_id": "Mbpp/442", "completion": "\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(tuple1, tuple2):\n    return tuple([a*b for a, b in zip(tuple1, tuple2)])\n"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(tuple, list):\n    count = 0\n    for i in tuple:\n        if i in list:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n"}
{"task_id": "Mbpp/448", "completion": "\ndef cal_sum(p):\n    if p == 0:\n        return 0\n    if p == 1:\n        return 3\n    if p == 2:\n        return 2\n    if p == 3:\n        return 1\n    if p == 4:\n        return 1\n    if p == 5:\n        return 2\n    if p == 6:\n        return 3\n    if p == 7:\n        return 4\n    if p == 8:\n        return 5\n    if p == 9:\n        return 7\n    if p == 10:\n        return 9\n    if p == 11:\n        return 12\n    if p == 12:\n        return 15\n    if p == 13:\n        return 18\n    if p == 14:\n        return 21\n    if p == 15:\n        return 24\n    if p == 16:\n        return 27\n    if p == 17:\n        return 30\n    if p == 18:\n        return 33\n    if p == 19:\n        return 36\n    if p == 20:\n        return 39\n    if p == 21:\n        return 42\n    if p == 22:\n        return 45\n    if p == 23:\n        return 48\n    if p == 24:\n        return 51\n    if p == 25:\n        return 54\n    if p == 26:\n        return 57\n    if p == 27:\n        return 60\n    if p == 28:\n        return 63\n    if p == 29:\n        return 66\n    if p == 30:\n        return 69\n    if p == 31:\n        return 72\n    if p == 32:\n        return 75\n    if p == 33:\n        return 78\n    if p == 34:\n        return 81\n    if p == 35:\n        return 84\n    if p == 36:\n        return 87\n    if p == 37:\n        return 90\n    if p == 38:\n        return 93\n    if p == 39:\n        return 96\n    if p == 40:\n        return 99\n    if p == 41:\n        return 102\n    if"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(strings, size):\n    return [strings[i:i+size] for i in range(0, len(strings), size)]\n"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(s):\n    return ''.join(s.split())\n"}
{"task_id": "Mbpp/453", "completion": "\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n"}
{"task_id": "Mbpp/454", "completion": "\ndef text_match_wordz(text):\n    return \"z\" in text\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month):\n    if month==5:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string_list(strings):\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        return lst[0]\n"}
{"task_id": "Mbpp/458", "completion": "\ndef rectangle_area(width, height):\n    return width * height\n"}
{"task_id": "Mbpp/459", "completion": "\ndef remove_uppercase(s):\n    return ''.join([c for c in s if c.islower()])\n"}
{"task_id": "Mbpp/460", "completion": "\ndef Extract(lst):\n    return [x[0] for x in lst]\n"}
{"task_id": "Mbpp/461", "completion": "\ndef upper_ctr(s):\n    return len([c for c in s if c.isupper()])\n"}
{"task_id": "Mbpp/462", "completion": "\ndef combinations_list(my_list):\n    combinations = []\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            combinations.append(my_list[i:j+1])\n    return combinations\n"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(nums):\n    max_product = nums[0]\n    min_product = nums[0]\n    product = 1\n    for num in nums:\n        product *= num\n        max_product = max(max_product, product)\n        min_product = min(min_product, product)\n        product = max_product * min_product\n    return max_product\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"}
{"task_id": "Mbpp/468", "completion": "\ndef max_product(nums):\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            max_product *= nums[i]\n        else:\n            max_product = max(max_product, nums[i])\n    return max_product\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(tup):\n    return tuple(a + b for a, b in zip(tup, tup[1:]))\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(my_list):\n    for i in range(len(my_list)-1):\n        if my_list[i] + 1!= my_list[i+1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(tuple_list):\n    intersection = []\n    for t in tuple_list:\n        if t not in intersection:\n            intersection.append(t)\n    return intersection\n"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(s, old, new):\n    return s.replace(old, new)\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(s):\n    return s.lower()\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(s):\n    return ''.join([c for c in s if c.isupper() or c.islower()])\n"}
{"task_id": "Mbpp/479", "completion": "\ndef first_Digit(num):\n    return str(num)[0]\n"}
{"task_id": "Mbpp/554", "completion": "\ndef Split(lst):\n    return [x for x in lst if x % 2!= 0]\n"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    return sum([i**3 for i in range(1, n+1)]) - sum(range(1, n+1))\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    return s.swapcase()\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(a, b):\n    return sum(abs(a - b) - 9 for a in str(a) for b in str(b))\n"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(arr, k):\n    if k == 0:\n        return 0\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2])\n    if len(arr) == 4:\n        return max(arr[0] + arr[1] + arr[2], arr[1] + arr[2] + arr[3], arr[0] + arr[2] + arr[3], arr[0] + arr[1] + arr[3])\n    if len(arr) == 5:\n        return max(arr[0] + arr[1] + arr[2] + arr[3], arr[1] + arr[2] + arr[3] + arr[4], arr[0] + arr[2] + arr[3] + arr[4], arr[0] + arr[1] + arr[3] + arr[4], arr[0] + arr[1] + arr[2] + arr[4])\n    if len(arr) == 6:\n        return max(arr[0] + arr[1] + arr[2] + arr[3] + arr[4], arr[1] + arr[2] + arr[3] + arr[4] + arr[5], arr[0] + arr[2] + arr[3] + arr[4] + arr[5], arr[0] + arr[1] + arr[3] + arr[4] + arr[5], arr[0] + arr[1] + arr[2] + arr[4] + arr[5], arr[0] + arr[1] + arr[2] + arr[3] + arr[5])\n    if len(arr) == 7:\n        return max(arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5], arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6], arr"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(t1, t2):\n    return sorted(list(set(t1 + t2)))\n"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(lists):\n    if len(lists) == 0:\n        return 0\n    max_length = 0\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            if lists[i] == lists[j]:\n                max_length = max(max_length, j-i+1)\n    return max_length\n"}
{"task_id": "Mbpp/563", "completion": "\ndef extract_values(string):\n    \"\"\"Extract values between quotation marks from a string.\"\"\"\n    values = []\n    in_quotes = False\n    for char in string:\n        if char == '\"':\n            in_quotes = not in_quotes\n        elif in_quotes:\n            values.append(char)\n    return values\n"}
{"task_id": "Mbpp/564", "completion": "\ndef count_Pairs(nums, target):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]!= nums[j] and nums[i] + nums[j] == target:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/565", "completion": "\ndef split(string):\n    return [char for char in string]\n"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n"}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(my_list):\n    for i in range(len(my_list)-1):\n        if my_list[i] > my_list[i+1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(n):\n    return [{} for _ in range(n)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(l):\n    return [sorted(sublist) for sublist in l]\n"}
{"task_id": "Mbpp/572", "completion": "\ndef two_unique_nums(nums):\n    \"\"\"\n    Given a list of numbers, return a list of unique numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"}
{"task_id": "Mbpp/573", "completion": "\ndef unique_product(numbers):\n    \"\"\"\n    Given a list of numbers, return the product of the unique numbers in the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n"}
{"task_id": "Mbpp/574", "completion": "\ndef surfacearea_cylinder(radius,height):\n    return 2*3.14*radius*height+2*3.14*radius**2\n"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(main_list, sub_list):\n    if len(main_list) < len(sub_list):\n        return False\n    for i in range(len(main_list)):\n        if main_list[i] == sub_list[0]:\n            if is_Sub_Array(main_list[i+1:], sub_list[1:]):\n                return True\n    return False\n"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    return n % 10\n"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    return [x for x in list1 for y in list2 for z in list3]\n"}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(t1, t2):\n    return [x for x in t1 if x not in t2] + [x for x in t2 if x not in t1]\n"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(nested_tuple):\n    \"\"\"Extract even elements from a nested mixed tuple.\"\"\"\n    return tuple(filter(lambda x: x % 2 == 0, nested_tuple))\n"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(base_edge, height):\n    return (base_edge**2) * 3 + (base_edge * height) * 2\n"}
{"task_id": "Mbpp/582", "completion": "\ndef my_dict(d):\n    return d\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862\n    if n == 10:\n        return 16796\n    return 0\n"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(dataset, n):\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[:n] + arr[n:]\n"}
{"task_id": "Mbpp/587", "completion": "\ndef list_tuple(my_list):\n    return tuple(my_list)\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(nums):\n    return max(nums) - min(nums)\n"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(n):\n    return [i*i for i in range(1, int(n**0.5)+1)]\n"}
{"task_id": "Mbpp/590", "completion": "\ndef polar_rect(r, theta):\n    return ((r * cos(theta), r * sin(theta)), (r * sin(theta), r * cos(theta)))\n"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(my_list):\n    \"\"\"Interchange the first and last elements in a list.\"\"\"\n    return my_list[-1:] + my_list[:-1]\n"}
{"task_id": "Mbpp/592", "completion": "\ndef sum_Of_product(n):\n    return sum([binomial_coefficient(i, n) for i in range(1, n+1)])\n"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    return ip.replace('0','')\n"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(numbers):\n    even = 0\n    odd = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even += number\n        else:\n            odd += number\n    return even - odd\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/596", "completion": "\ndef tuple_size(tuple_):\n    return sys.getsizeof(tuple_)\n"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(arr1, arr2, k):\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if arr1[0] < arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k)\n"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(n):\n    sum=0\n    temp=n\n    while n>0:\n        digit=n%10\n        sum+=digit**3\n        n=n//10\n    if temp==sum:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    return sum(range(1, n+1)), sum(range(1, n+1))/n\n"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(string):\n    \"\"\"Find the first repeated character in a given string.\"\"\"\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"}
{"task_id": "Mbpp/603", "completion": "\ndef get_ludic(n):\n    return [i for i in range(1, n+1) if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0]\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(s):\n    return \" \".join(reversed(s.split()))\n"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/606", "completion": "\ndef radian_degree(deg):\n    return deg * (math.pi / 180)\n"}
{"task_id": "Mbpp/607", "completion": "\ndef find_literals(text, pattern):\n    start = 0\n    end = 0\n    for i in range(len(text)):\n        if text[i] == pattern[0]:\n            start = i\n            for j in range(1, len(pattern)):\n                if text[i + j]!= pattern[j]:\n                    break\n            else:\n                end = i + len(pattern) - 1\n                return (text[start:end + 1], start, end)\n    return (None, None, None)\n"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(my_list, k):\n    return my_list[:k] + my_list[k+1:]\n"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    return max([row[n] for row in matrix])\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lists):\n    return [[lists[0][0], lists[1][0], lists[2][0]], [lists[0][1], lists[1][1], lists[2][1]]]\n"}
{"task_id": "Mbpp/614", "completion": "\ndef cummulative_sum(tuple_list):\n    return sum(sum(x) for x in tuple_list)\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(tuple_of_tuples):\n    return [sum(t)/len(t) for t in tuple_of_tuples]\n"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(a, b):\n    return tuple(x % y for x, y in zip(a, b))\n"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(list1, list2):\n    return [x/y for x, y in zip(list1, list2)]\n"}
{"task_id": "Mbpp/619", "completion": "\ndef move_num(s):\n    return ''.join([c for c in s if not c.isdigit()]) + ''.join(sorted([c for c in s if c.isdigit()]))\n"}
{"task_id": "Mbpp/620", "completion": "\ndef largest_subset(numbers):\n    \"\"\"Return the size of the largest subset of a list of numbers so that every pair is divisible.\"\"\"\n    # Initialize a dictionary to store the largest subset\n    largest_subset = {}\n    # Initialize a variable to store the size of the largest subset\n    largest_subset_size = 0\n    # Iterate over the numbers\n    for i in range(len(numbers)):\n        # Check if the current number is divisible by the previous number\n        if numbers[i] % numbers[i-1] == 0:\n            # If it is, add it to the largest subset\n            largest_subset[numbers[i]] = True\n            # Update the size of the largest subset\n            largest_subset_size += 1\n    # Return the size of the largest subset\n    return largest_subset_size\n"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    list1.sort()\n    list2.sort()\n    if size % 2 == 0:\n        return (list1[size // 2 - 1] + list2[size // 2]) / 2\n    else:\n        return list1[size // 2]\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(nums, n):\n    return [num**n for num in nums]\n"}
{"task_id": "Mbpp/624", "completion": "\ndef is_upper(s):\n    return s.upper()\n"}
{"task_id": "Mbpp/626", "completion": "\ndef triangle_area(radius):\n    \"\"\"Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\"\"\"\n    if radius < 0:\n        return None\n    else:\n        return (radius ** 2) * (3 / 2)\n"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n"}
{"task_id": "Mbpp/629", "completion": "\ndef Split(numbers):\n    return [x for x in numbers if x % 2 == 0]\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coordinate):\n    return [[x - 1, y] for x in range(coordinate[0]) for y in range(coordinate[1])]\n"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(s):\n    return s.replace(' ', '_').replace('_','')\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zero(nums):\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.append(nums.pop(i))\n    return nums\n"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(numbers, target):\n    xor_sum = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            xor_sum ^= numbers[i] ^ numbers[j]\n    return xor_sum\n"}
{"task_id": "Mbpp/635", "completion": "\ndef heap_sort(lst):\n    n = len(lst)\n    for i in range(n//2-1, -1, -1):\n        heapify(lst, n, i)\n    for i in range(n-1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        heapify(lst, i, 0)\n    return lst\n"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(amount, cost):\n    if amount-cost==0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/638", "completion": "\ndef wind_chill(velocity,temperature):\n    return round(35.74 + 0.6215*velocity - 35.75*temperature**0.16 + 0.4275*velocity*temperature**0.16)\n"}
{"task_id": "Mbpp/639", "completion": "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n"}
{"task_id": "Mbpp/640", "completion": "\ndef remove_parenthesis(string):\n    return string.replace(\"(\", \"\").replace(\")\", \"\")\n"}
{"task_id": "Mbpp/641", "completion": "\ndef is_nonagonal(n):\n    return n == 325\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(text):\n    if text[0]!= 'z' or text[-1]!= 'z':\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)\n"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n    return dp[n - 1][n - 1] / n\n"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(data, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in data.items() if height >= min_height and weight >= min_weight}\n"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    return sum(int(digit) for digit in str(base**power))\n"}
{"task_id": "Mbpp/725", "completion": "\ndef extract_quotation(s):\n    \"\"\"Extract values between quotation marks \" \" of the given string.\"\"\"\n    return [x.strip() for x in s.split('\"')]\n"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(a, b):\n    return [a_i + b_i for a_i, b_i in zip(a, b)]\n"}
{"task_id": "Mbpp/730", "completion": "\ndef consecutive_duplicates(my_list):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Your code here\n    return my_list\n"}
{"task_id": "Mbpp/731", "completion": "\ndef lateralsurface_cone(r,h):\n    return 3.141592653589793 * r * h\n"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(string):\n    return string.replace(' ','::').replace(',','::').replace('.','::')\n"}
{"task_id": "Mbpp/733", "completion": "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            dp[i][j] = arr[i]*arr[j]\n            for k in range(i, j):\n                dp[i][j] += dp[i][k]*dp[k+1][j]\n    return dp[0][n-1]\n"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(n):\n    return n ^ (n >> 1) ^ (n << 1)\n"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"}
{"task_id": "Mbpp/737", "completion": "\ndef check_str(s):\n    return re.match(r'^[aeiou]', s)\n"}
{"task_id": "Mbpp/739", "completion": "\ndef find_Index(n):\n    # Find the smallest triangular number with n digits\n    # Return the index of the smallest triangular number\n    # with n digits\n    # Example: find_Index(2) returns 4\n    # Example: find_Index(3) returns 10\n    # Example: find_Index(4) returns 20\n    # Example: find_Index(5) returns 35\n    # Example: find_Index(6) returns 55\n    # Example: find_Index(7) returns 77\n    # Example: find_Index(8) returns 110\n    # Example: find_Index(9) returns 165\n    # Example: find_Index(10) returns 220\n    # Example: find_Index(11) returns 330\n    # Example: find_Index(12) returns 455\n    # Example: find_Index(13) returns 615\n    # Example: find_Index(14) returns 825\n    # Example: find_Index(15) returns 1090\n    # Example: find_Index(16) returns 1365\n    # Example: find_Index(17) returns 1716\n    # Example: find_Index(18) returns 2040\n    # Example: find_Index(19) returns 2315\n    # Example: find_Index(20) returns 2640\n    # Example: find_Index(21) returns 2975\n    # Example: find_Index(22) returns 3330\n    # Example: find_Index(23) returns 3705\n    # Example: find_Index(24) returns 4100\n    # Example: find_Index(25) returns 4515\n    # Example: find_Index(26) returns 4950\n    # Example: find_Index(27) returns 5405\n    # Example: find_Index(28) returns 5880\n    # Example: find_Index(29) returns 6365\n    # Example: find_Index(30) returns 6870\n    # Example: find_Index(31) returns 7395\n    # Example: find_Index(32) returns 7940\n    # Example: find_Index(33) returns 8515\n    # Example: find_Index(34) returns 9110\n    # Example: find_Index(35) returns 9725\n    # Example: find_Index(36) returns 10360\n   "}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(len(t)-1)}\n"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(string):\n    if len(string) == 1:\n        return True\n    else:\n        return string[0] == string[1] and all_Characters_Same(string[1:])\n"}
{"task_id": "Mbpp/742", "completion": "\ndef area_tetrahedron(a):\n    return 0.5 * a * a * a * math.sqrt(3)\n"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, n):\n    return lst[n:] + lst[:n]\n"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(tuple):\n    for i in tuple:\n        if i is None:\n            return True\n    return False\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    return [x for x in range(startnum, endnum+1) if all(x % int(y) == 0 for y in str(x))]\n"}
{"task_id": "Mbpp/746", "completion": "\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return radius * radius * angle / 360\n"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(string):\n    return''.join([word.capitalize() if word[0].isupper() else word for word in string.split()])\n"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(tup, lst):\n    return lst + list(tup)\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(tuple_list, k):\n    tuple_list.sort(key=lambda x: x[1])\n    return tuple_list[:k]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    return [i for i in l1 if i in l2 and i in l3]\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(numbers):\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/758", "completion": "\ndef unique_sublists(my_list):\n    return {tuple(sublist): my_list.count(sublist) for sublist in my_list}\n"}
{"task_id": "Mbpp/759", "completion": "\ndef is_decimal(s):\n    if s.find('.')==-1:\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(my_list):\n    if len(my_list) == 1:\n        return True\n    else:\n        for i in range(len(my_list)):\n            if my_list.count(my_list[i]) > 1:\n                return False\n        return True\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month):\n    if month in [4,6,9,11]:\n        return True\n    elif month in [1,3,5,7,8,10,12]:\n        return False\n    else:\n        return \"Invalid input\"\n"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, k):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff\n"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(s):\n    return len(s)\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    return n == 11\n"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs\n"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/769", "completion": "\ndef Diff(list1, list2):\n    return [x for x in list1 if x not in list2]\n"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    return sum([i**4 for i in range(1, n, 2)])\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == \"(\" or char == \"[\" or char == \"{\":\n            stack.append(char)\n        elif char == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n        elif char == \"]\":\n            if stack and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n        elif char == \"}\":\n            if stack and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(s, k):\n    return ''.join([word for word in s.split() if len(word)!= k])\n"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(string, substring):\n    if substring in string:\n        return (substring, string.index(substring), len(substring))\n    else:\n        return None\n"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(my_list):\n    for i in range(0, len(my_list), 2):\n        if my_list[i] % 2 == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(my_list):\n    \"\"\"Find the sum of non-repeated elements in a given list.\"\"\"\n    # Initialize an empty dictionary to store the counts of each element\n    counts = {}\n    # Iterate over the elements in the list\n    for element in my_list:\n        # If the element is not in the dictionary, add it with a count of 1\n        if element not in counts:\n            counts[element] = 1\n        # Otherwise, increment the count for the element\n        else:\n            counts[element] += 1\n    # Initialize a variable to store the sum\n    sum = 0\n    # Iterate over the elements in the dictionary\n    for element, count in counts.items():\n        # If the count is 1, add the element to the sum\n        if count == 1:\n            sum += element\n    # Return the sum\n    return sum\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(my_list):\n    return [[my_list[i], my_list[i+1]] for i in range(len(my_list)-1) if my_list[i] == my_list[i+1]]\n"}
{"task_id": "Mbpp/780", "completion": "\ndef find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i % 2 == 1:\n                odd_sum += arr[j]\n    return odd_sum\n"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(nums):\n    even = 0\n    odd = 1\n    for num in nums:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd\n"}
{"task_id": "Mbpp/785", "completion": "\ndef tuple_str_int(tuple_str):\n    return tuple(int(x) for x in tuple_str[1:-1].split(\",\"))\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"}
{"task_id": "Mbpp/787", "completion": "\ndef text_match_three(text):\n    return text.startswith(\"a\") and text[1] == \"b\" and text[2] == \"b\" and text[3] == \"b\"\n"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(string, list):\n    return tuple(string) + tuple(list)\n"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(my_list):\n    for i in range(0, len(my_list), 2):\n        if my_list[i] % 2!= 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(t):\n    \"\"\"Remove tuples from a tuple.\"\"\"\n    return tuple(x for x in t if not isinstance(x, tuple))\n"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lists):\n    return len(lists)\n"}
{"task_id": "Mbpp/793", "completion": "\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            while mid > 0 and arr[mid - 1] == target:\n                mid -= 1\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/794", "completion": "\ndef text_starta_endb(text):\n    return text.startswith(\"a\") and text.endswith(\"b\")\n"}
{"task_id": "Mbpp/796", "completion": "\ndef return_sum(dictionary):\n    return sum(dictionary.values())\n"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    \"\"\"Return the sum of all odd natural numbers within the range l and r.\"\"\"\n    return sum(range(l, r+1, 2))\n"}
{"task_id": "Mbpp/798", "completion": "\ndef _sum(arr):\n    return sum(arr)\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))\n"}
{"task_id": "Mbpp/800", "completion": "\ndef remove_all_spaces(s):\n    return ''.join(s.split())\n"}
{"task_id": "Mbpp/801", "completion": "\ndef test_three_equal(a, b, c):\n    count = 0\n    for i in range(a, b+1):\n        for j in range(c, b+1):\n            if i == j:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(n):\n    if n < 2:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if i ** 2 == n:\n            return True\n    return False\n"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(lists):\n    max_sum = 0\n    for lst in lists:\n        sum = 0\n        for num in lst:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n"}
{"task_id": "Mbpp/807", "completion": "\ndef first_odd(numbers):\n    for number in numbers:\n        if number % 2!= 0:\n            return number\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tuple, k):\n    for i in range(len(tuple)):\n        if tuple[i] == k:\n            return True\n    return False\n"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(tuple1, tuple2):\n    return all(x < y for x, y in zip(tuple1, tuple2))\n"}
