{"date": "2025-10-22 23:04", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\ndef is_not_prime(n):\n    \"\"\"\n    Checks if a number is not prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True  # 0 and 1 are not prime numbers\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True  # if n is divisible by any number between 2 and sqrt(n), it's not prime\n    return False  # if n is not divisible by any of the above, it's prime\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\ndef similar_elements(list1, list2):\n    \"\"\"\n    This function finds the shared elements from two given lists.\n\n    Args:\n        list1 (tuple): The first list of elements.\n        list2 (tuple): The second list of elements.\n\n    Returns:\n        set: A set of shared elements between the two lists.\n    \"\"\"\n    # Convert the input tuples into sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Use set intersection to find the shared elements\n    shared_elements = set1.intersection(set2)\n\n    return shared_elements\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, \n    in descending order.\n\n    Args:\n    nums (list): A list of integers.\n    n (int): The number of largest integers to return.\n\n    Returns:\n    list: A list of the n largest integers in descending order.\n    \"\"\"\n    # Check if n is greater than the length of the list\n    if n > len(nums):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n\n    # Use heapq.nlargest to find the n largest numbers\n    largest_nums = heapq.nlargest(n, nums)\n    \n    # Return the n largest numbers in descending order\n    return largest_nums\n\n# Test the function\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\ndef differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Checks whether two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # Calculate the XOR of the two numbers\n    xor_result = num1 ^ num2\n    \n    # If the XOR result is zero, then the numbers are identical\n    # If the XOR result is not zero, then the numbers differ at one bit position only\n    return xor_result == 0\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\ndef square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the squares of each number in the input list.\n    \"\"\"\n    return [num ** 2 for num in nums]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\ndef find_char_long(s):\n    \"\"\"\n    This function finds all words which are at least 4 characters long in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    set: A set of words that are at least 4 characters long.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty set to store the result\n    result = set()\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Check if the length of the word is at least 4\n        if len(word) >= 4:\n            # If the word is at least 4 characters long, add it to the result set\n            result.add(word)\n    \n    # Return the result set\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\ndef find_Rotations(s):\n    \"\"\"\n    This function calculates the minimum number of rotations required to get the same string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n    \"\"\"\n    # If the string is empty, return 0\n    if not s:\n        return 0\n    \n    # Calculate the length of the string\n    n = len(s)\n    \n    # Initialize a variable to store the minimum number of rotations\n    min_rotations = float('inf')\n    \n    # Iterate over all possible rotations\n    for i in range(1, n):\n        # Rotate the string by i positions\n        rotated_s = s[i:] + s[:i]\n        \n        # Check if the rotated string is the same as the original string\n        if rotated_s == s:\n            # Update the minimum number of rotations\n            min_rotations = min(min_rotations, i)\n    \n    # If no rotation is found, return the length of the string\n    if min_rotations == float('inf'):\n        return n\n    \n    # Return the minimum number of rotations\n    return min_rotations\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(s, c):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        s (str): The input string.\n        c (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(c)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n    \n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(c)\n    \n    # If the character is not found, return the original string\n    if last_occurrence == -1:\n        return s\n    \n    # Return the modified string with the first and last occurrence of the character removed\n    return s[:first_occurrence] + s[last_occurrence+1:]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abcda", "a"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list of lists): A 2D list of integers.\n\n    Returns:\n        list of lists: The sorted matrix.\n    \"\"\"\n    # Calculate the sum of each row and store it in a list of tuples\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum of each row\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base_area, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the base triangle.\n    height (float): The height of the prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return base_area * height * length\n\n# Test the function\nassert find_Volume(10,8,6) == 240\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into substrings separated by underscores\n    substrings = text.split(\"_\")\n    \n    # Check if all substrings are lowercase letters\n    for substring in substrings:\n        if not substring.islower():\n            return False\n    \n    # If all substrings are lowercase letters, return True\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length.\n\n    Args:\n        side_length (int): The length of a side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return side_length * 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        s1 (str): The original string.\n        s2 (str): The string containing characters to be removed.\n\n    Returns:\n        str: The modified string with characters removed.\n    \"\"\"\n    # Convert the second string to a set for efficient lookups\n    dirty_chars = set(s2)\n    \n    # Use a list comprehension to filter out dirty characters from the first string\n    # The if condition checks if a character is not in the set of dirty characters\n    filtered_chars = [char for char in s1 if char not in dirty_chars]\n    \n    # Join the filtered characters back into a string\n    result = ''.join(filtered_chars)\n    \n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    return len(arr) == len(set(arr))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    \"\"\"\n    Checks if the given number is woodall or not.\n\n    A woodall number is a number that is equal to the sum of its own digits when each digit is raised to the power of the digit's position.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is woodall, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Initialize a variable to store the sum of the digits raised to the power of their positions\n    total = 0\n    \n    # Iterate over each digit in the number\n    for i, digit in enumerate(str_n):\n        # Raise the digit to the power of its position and add it to the total\n        total += int(digit) ** (i + 1)\n    \n    # Check if the total is equal to the original number\n    return total == n\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-71]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    \"\"\"\n    Checks if a given number is one less than twice its reverse.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily reverse it\n    str_n = str(n)\n    \n    # Reverse the string\n    reversed_str_n = str_n[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_n = int(reversed_str_n)\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\ndef find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using these digits.\n\n    Args:\n        digits (list): A list of integers representing the digits to be used.\n\n    Returns:\n        int: The largest number that can be formed using the given digits.\n    \"\"\"\n    # First, we sort the list of digits in descending order\n    digits.sort(reverse=True)\n    \n    # Then, we join the sorted digits into a single string\n    num_str = ''.join(map(str, digits))\n    \n    # Finally, we convert the string back into an integer and return it\n    return int(num_str)\n\n# Test the function\nassert find_Max_Num([1,2,3]) == 321\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a, b):\n    \"\"\"\n    Checks whether two integers have opposite signs.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Check if the signs of the two integers are different\n    return (a >= 0 and b < 0) or (a < 0 and b >= 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    # The formula for the nth octagonal number is given by: \n    # (4 * n^2 - 4 * n) + 1\n    # This can be simplified to: \n    # 4 * n^2 - 4 * n + 1\n    # We can use the formula for the sum of squares to simplify this further:\n    # n^2 = (n + 1/2)^2 - 1/4\n    # Substituting this into the formula for the nth octagonal number:\n    # 4 * ((n + 1/2)^2 - 1/4) - 4 * n + 1\n    # Expanding and simplifying:\n    # 4 * (n^2 + n + 1/4) - 4 * n + 1\n    # 4 * n^2 + 4 * n + 1 - 4 * n + 1\n    # 4 * n^2 + 2\n    # This is the simplified formula for the nth octagonal number.\n    return 4 * n**2 + 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    \"\"\"\n    This function finds the smallest number in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n    return min(lst)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pairs):\n    \"\"\"\n    This function calculates the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        pairs (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs.\n    \"\"\"\n    # Sort the pairs based on the first element of each tuple\n    pairs.sort(key=lambda x: x[0])\n    \n    # Initialize the minimum and maximum values\n    min_val = pairs[0][0]\n    max_val = pairs[0][1]\n    \n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate over the sorted pairs\n    for pair in pairs:\n        # Update the minimum value if the current pair's first element is smaller\n        if pair[0] < min_val:\n            min_val = pair[0]\n        # Update the maximum value if the current pair's second element is larger\n        elif pair[1] > max_val:\n            max_val = pair[1]\n        # Update the maximum difference if the current difference is larger\n        if pair[1] - pair[0] > max_diff:\n            max_diff = pair[1] - pair[0]\n    \n    # Return the maximum difference\n    return max_diff\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(tuples_list):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        tuples_list (list): A list of tuples containing subject and marks.\n\n    Returns:\n        list: The sorted list of tuples based on the marks.\n    \"\"\"\n    return sorted(tuples_list, key=lambda x: x[1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    \"\"\"\n    This function takes a list as input, recursively flattens it, and returns the sum of all its elements.\n\n    Args:\n        lst (list): A list containing integers and/or lists.\n\n    Returns:\n        int: The sum of all elements in the list.\n    \"\"\"\n    total = 0  # Initialize a variable to store the sum\n    for element in lst:  # Iterate over each element in the list\n        if isinstance(element, list):  # Check if the element is a list\n            total += recursive_list_sum(element)  # Recursively call the function on the sublist\n        else:\n            total += element  # Add the element to the total if it's not a list\n    return total  # Return the total sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    return sum(1 for num in lst if num > 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n\n    The Bell numbers are a sequence of numbers that arise in combinatorial mathematics,\n    particularly in the study of recursive structures. They are named after the mathematician\n    \u00c9douard Bell, who introduced them in the early 20th century.\n\n    The Bell numbers are defined recursively as follows:\n    B(0) = 1\n    B(n) = \u03a3(B(k) * C(n-1, k)) for k = 1 to n\n\n    where C(n, k) is the binomial coefficient, defined as:\n    C(n, k) = n! / (k! * (n-k)!)\n\n    :param n: The index of the Bell number to calculate\n    :return: The nth Bell number\n    \"\"\"\n    # Base case: B(0) = 1\n    if n == 0:\n        return 1\n\n    # Initialize the list to store the Bell numbers\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n\n    # Calculate the Bell numbers iteratively\n    for i in range(1, n + 1):\n        # Initialize the sum for the current Bell number\n        total = 0\n        # Calculate the sum using the recursive formula\n        for k in range(1, i + 1):\n            # Calculate the binomial coefficient\n            binomial_coefficient = 1\n            for j in range(1, k + 1):\n                binomial_coefficient *= (i + 1 - j) / j\n            # Add the product of the kth Bell number and the binomial coefficient to the total\n            total += bell_numbers[k - 1] * binomial_coefficient\n        # Store the current Bell number\n        bell_numbers[i] = total\n\n    # Return the nth Bell number\n    return bell_numbers[n]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    \"\"\"\n    Checks whether the given array is monotonic or not.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Check if the array is monotonic increasing\n    is_increasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    \n    # Check if the array is monotonic decreasing\n    is_decreasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    # Return True if the array is either monotonic increasing or decreasing\n    return is_increasing or is_decreasing\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(main_list, sub_list):\n    \"\"\"\n    Checks whether the main list contains the given sublist.\n\n    Args:\n        main_list (list): The main list to be checked.\n        sub_list (list): The sublist to be searched for.\n\n    Returns:\n        bool: True if the main list contains the sublist, False otherwise.\n    \"\"\"\n    # Check if the sub_list is empty\n    if not sub_list:\n        return True  # An empty list is considered a sublist of any list\n    \n    # Check if the main list is empty\n    if not main_list:\n        return False  # An empty list cannot contain a sublist\n    \n    # Check if the sub_list is a subset of the main list\n    return set(sub_list).issubset(set(main_list))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82]]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\ndef get_equal(tuples):\n    \"\"\"\n    This function checks if all the given tuples have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    # If the list of tuples is empty, return True\n    if not tuples:\n        return True\n\n    # Get the length of the first tuple\n    length = len(tuples[0])\n\n    # Iterate over the rest of the tuples\n    for tup in tuples[1:]:\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(tup)!= length:\n            return False\n\n    # If the function hasn't returned False, all tuples have equal length, so return True\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Args:\n        lst (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n    \"\"\"\n    # Initialize the gap size\n    gap = len(lst)\n\n    # Make a copy of the list to avoid modifying the original list\n    lst = lst.copy()\n\n    # Initialize the swapped flag\n    swapped = True\n\n    # Continue the process until the gap size is greater than 1\n    while gap!= 1 or swapped:\n        # Update the gap size\n        gap = max(1, int(gap / 1.3))\n\n        # Initialize the swapped flag for the current gap\n        swapped = False\n\n        # Iterate over the list with the current gap\n        for i in range(len(lst) - gap):\n            # Check if the current element is greater than the next element\n            if lst[i] > lst[i + gap]:\n                # Swap the elements\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                # Set the swapped flag to True\n                swapped = True\n\n    # Return the sorted list\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\nimport math\n\ndef dif_Square(n):\n    \"\"\"\n    Checks whether the given number can be represented as the difference of two squares.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        return False\n\n    # Initialize the variable i\n    i = 1\n\n    # Loop until i is greater than or equal to sqrt(n)\n    while i * i <= n:\n        # Calculate the difference between n and i^2\n        diff = n - i * i\n\n        # Check if the difference is a perfect square\n        if math.sqrt(diff) == int(math.sqrt(diff)):\n            return True\n\n        # Increment i\n        i += 1\n\n    # If no such pair is found, return False\n    return False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\ndef is_samepatterns(patterns, sequence):\n    \"\"\"\n    Checks whether the given sequence follows the pattern.\n\n    Args:\n    patterns (list): A list of strings representing the pattern.\n    sequence (list): A list of strings representing the sequence.\n\n    Returns:\n    bool: True if the sequence follows the pattern, False otherwise.\n    \"\"\"\n    if len(patterns)!= len(sequence):\n        return False\n    pattern_map = {}\n    for pattern, seq in zip(patterns, sequence):\n        if pattern in pattern_map:\n            if pattern_map[pattern]!= seq:\n                return False\n        else:\n            if seq in pattern_map.values():\n                return False\n            pattern_map[pattern] = seq\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\ndef find_tuples(tuples_list, k):\n    \"\"\"\n    This function finds tuples in the given list that have all elements divisible by k.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples where all elements are divisible by k.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(i % k == 0 for i in tup):\n            # If all elements are divisible by k, add the tuple to the result\n            result.append(tup)\n    \n    # Return the result\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings in a given string where the sum of digits equals the length of the substring.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    def sum_of_digits(substring):\n        \"\"\"\n        Helper function to calculate the sum of digits in a substring.\n\n        Args:\n            substring (str): The input substring.\n\n        Returns:\n            int: The sum of digits in the substring.\n        \"\"\"\n        return sum(int(digit) for digit in substring)\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (n):\n    \"\"\"\n    Checks if a number is divisible by 11.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return n % 11!= 0\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    \"\"\"\n    Checks whether the length of the word is odd or not.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2!= 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is the number of ways to choose n objects from a set of n+1 objects,\n    where the order of the objects does not matter.\n\n    Args:\n        n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # The formula for the nth tetrahedral number is n*(n+1)*(n+2)/6\n    return n * (n + 1) * (n + 2) // 6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    \"\"\"\n    This function calculates the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum of ASCII values to 0\n    ascii_sum = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Add the ASCII value of the character to the sum\n        ascii_sum += ord(char)\n    \n    # Calculate the character made by adding the ASCII value of all the characters modulo 26\n    result = chr((ascii_sum - ord('a')) % 26 + ord('a'))\n    \n    # Return the result\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    This function calculates the nth number in the Newman Conway sequence.\n\n    The Newman Conway sequence is defined as follows:\n    - The first term is 1.\n    - Each subsequent term is the sum of the two preceding terms, \n      but with the last term replaced by the term two positions before it.\n\n    Args:\n        n (int): The position of the term in the sequence.\n\n    Returns:\n        int: The nth term in the Newman Conway sequence.\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    # Initialize the sequence with the first two terms\n    sequence = [1, 1]\n\n    # Calculate each term up to the nth term\n    for i in range(2, n):\n        # Calculate the next term as the sum of the previous two terms, \n        # but with the last term replaced by the term two positions before it\n        next_term = sequence[i-1] + sequence[i-2] + sequence[i-3]\n        sequence.append(next_term)\n\n    # Return the nth term\n    return sequence[-1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n    n (int): The position of the centered hexagonal number to calculate.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    # The formula for the nth centered hexagonal number is given by:\n    # (3n^2 - n) / 2\n    # We use this formula to calculate the nth centered hexagonal number.\n    return (3 * n ** 2 - n) // 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: A new dictionary containing all key-value pairs from the input dictionaries.\n    \"\"\"\n    # Create a new dictionary to store the merged result\n    merged_dict = {}\n    \n    # Copy key-value pairs from the first dictionary to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    \n    # Copy key-value pairs from the second dictionary to the merged dictionary\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    # Copy key-value pairs from the third dictionary to the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    # Return the merged dictionary\n    return merged_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\ndef freq_count(lst):\n    \"\"\"\n    This function calculates the frequency of all elements in a given list.\n    \n    Parameters:\n    lst (list): The input list.\n    \n    Returns:\n    dict: A dictionary where keys are the elements from the list and values are their respective frequencies.\n    \"\"\"\n    \n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate over each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq_dict\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The closest smaller number than n.\n    \"\"\"\n    # We can simply subtract 1 from n to get the closest smaller number\n    return n - 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    \"\"\"\n    This function calculates the length of the longest word in a given list.\n\n    Args:\n        words (list): A list of strings.\n\n    Returns:\n        int: The length of the longest word in the list.\n    \"\"\"\n    return max(len(word) for word in words)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string_list, target):\n    \"\"\"\n    This function checks if a target string is present as a substring in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        target (str): The target string to be searched.\n\n    Returns:\n        bool: True if the target string is found as a substring, False otherwise.\n    \"\"\"\n    # Iterate over each string in the list\n    for string in string_list:\n        # Check if the target string is a substring of the current string\n        if target in string:\n            # If found, return True\n            return True\n    # If the target string is not found in any string, return False\n    return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\ndef is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Initialize a variable to store the previous digit\n    prev_digit = str_n[0]\n    \n    # Iterate over the digits in the number\n    for digit in str_n[1:]:\n        # If the current digit is different from the previous digit, \n        # the number is not undulating\n        if digit!= prev_digit:\n            return False\n        # Update the previous digit\n        prev_digit = digit\n    \n    # If the function hasn't returned False, the number is undulating\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a (float): The base number.\n        b (int): The exponent.\n\n    Returns:\n        float: The result of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples_list):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n\n    Args:\n        tuples_list (list): A list of tuples, where each tuple contains a name and a number.\n\n    Returns:\n        str: The first name of the tuple with the smallest number.\n    \"\"\"\n    # Use the built-in min function with a custom key to find the tuple with the smallest number\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    \n    # Return the first value of the tuple with the smallest number\n    return min_tuple[0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lists):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list in the list of lists.\n    \"\"\"\n    # Check if the input list is empty\n    if not lists:\n        raise ValueError(\"Input list is empty\")\n\n    # Initialize the minimum length with the length of the first list\n    min_length = len(lists[0])\n\n    # Iterate over each list in the list of lists\n    for lst in lists:\n        # Update the minimum length if the current list is smaller\n        min_length = min(min_length, len(lst))\n\n    # Return the minimum length\n    return min_length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\ndef divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The number of divisors of the input integer.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Initialize the divisor count to 0\n    count = 0\n\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor, increment the count\n            count += 1\n\n            # If i is not the square root of n, increment the count again\n            # because n//i is also a divisor\n            if i!= n // i:\n                count += 1\n\n    # Return the total divisor count\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"\n    This function takes a list of lists as input, flattens it, and returns a dictionary with the frequency of each element.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lists for item in sublist]\n    \n    # Use dictionary comprehension to create a dictionary with element frequencies\n    frequency_dict = {element: flat_list.count(element) for element in set(flat_list)}\n    \n    return frequency_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef multiply_num(lst):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides the result by the length of the list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        float: The result of the multiplication and division.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"Cannot perform operation on an empty list\")\n\n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in lst:\n        product *= num\n\n    # Calculate the length of the list\n    length = len(lst)\n\n    # Check for division by zero\n    if length == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n\n    # Return the result of the multiplication and division\n    return product / length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    \"\"\"\n    Converts a decimal number to its binary equivalent as a string.\n\n    Args:\n        n (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the decimal number as a string.\n    \"\"\"\n    # Use the built-in bin() function to convert the decimal number to binary\n    binary = bin(n)\n    \n    # Remove the '0b' prefix that Python adds to binary numbers\n    binary = binary[2:]\n    \n    # Return the binary string\n    return binary\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The next smallest palindrome of the input integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n\n        Args:\n            num (int): The number to check.\n\n        Returns:\n            bool: True if the number is a palindrome, False otherwise.\n        \"\"\"\n        return str(num) == str(num)[::-1]\n\n    # Increment the number until we find a palindrome\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\ndef kth_element(arr, k):\n    \"\"\"\n    This function finds the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position of the element to be found (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If k is less than 1 or greater than the length of the array.\n    \"\"\"\n\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    # Since indexing in Python is 0-based, subtract 1 from k\n    # to get the correct index\n    index = k - 1\n\n    # Return the element at the calculated index\n    return arr[index]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Args:\n        s (str): The input snake case string.\n\n    Returns:\n        str: The converted camel case string.\n    \"\"\"\n    # Split the input string into words\n    words = s.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    camel_case_words = [words[0].lower()] + [word.capitalize() for word in words[1:]]\n    \n    # Join the words into a single string\n    camel_case_string = ''.join(camel_case_words)\n    \n    return camel_case_string\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is the number of permutations of n objects\n    that have m cycles.\n\n    Parameters:\n    n (int): The number of objects.\n    m (int): The number of cycles.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the result\n    result = 1\n    \n    # Calculate the Eulerian number\n    for i in range(1, m + 1):\n        # Calculate the binomial coefficient\n        binom_coeff = math.comb(n - i, i)\n        \n        # Update the result\n        result *= binom_coeff\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A list of lists with each sublist sorted.\n    \"\"\"\n    # Use list comprehension to create a new list with sorted sublists\n    return [sorted(sublist) for sublist in lst]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    \"\"\"\n    Counts the number of true booleans in a given list.\n\n    Args:\n        lst (list): A list containing boolean values.\n\n    Returns:\n        int: The number of true booleans in the list.\n    \"\"\"\n    return sum(1 for bool in lst if bool)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, tuple1):\n    \"\"\"\n    This function takes a list and a tuple as input, \n    and returns a new tuple with the elements of the list \n    appended to the elements of the tuple.\n\n    Args:\n        list1 (list): The input list.\n        tuple1 (tuple): The input tuple.\n\n    Returns:\n        tuple: A new tuple with the elements of the list \n        appended to the elements of the tuple.\n    \"\"\"\n    # Convert the list to a tuple\n    list1_tuple = tuple(list1)\n    \n    # Append the list to the tuple\n    result = tuple1 + list1_tuple\n    \n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A single sorted list containing all elements from the input lists.\n    \"\"\"\n    # Combine the three lists into a single list\n    merged_list = list1 + list2 + list3\n    \n    # Sort the merged list in ascending order\n    merged_list.sort()\n    \n    # Return the sorted merged list\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, n):\n    \"\"\"\n    This function calculates the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): The binary string to be rotated.\n    n (int): The number of times the string is to be rotated.\n\n    Returns:\n    int: The number of numbers with an odd value.\n    \"\"\"\n    # Calculate the length of the string\n    length = len(s)\n    \n    # Calculate the effective number of rotations, considering the length of the string\n    effective_rotations = n % length\n    \n    # Initialize a dictionary to store the frequency of each bit\n    bit_frequency = {0: 0, 1: 0}\n    \n    # Count the frequency of each bit in the string\n    for bit in s:\n        bit_frequency[int(bit)] += 1\n    \n    # Calculate the number of numbers with an odd value\n    odd_count = 0\n    for i in range(effective_rotations + 1):\n        # Calculate the number of 1s in the rotated string\n        ones = bit_frequency[(i % length)]\n        \n        # If the number of 1s is odd, increment the count\n        if ones % 2!= 0:\n            odd_count += 1\n    \n    return odd_count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\ndef common_in_nested_lists(nested_lists):\n    \"\"\"\n    This function finds the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing integers.\n\n    Returns:\n        set: A set of common elements found in the nested lists.\n    \"\"\"\n    # Flatten the nested lists into a single list\n    flat_list = [item for sublist in nested_lists for item in sublist]\n    \n    # Convert the list to a set to remove duplicates and improve lookup efficiency\n    flat_set = set(flat_list)\n    \n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate over each nested list\n    for nested_list in nested_lists:\n        # Convert the nested list to a set for efficient lookup\n        nested_set = set(nested_list)\n        \n        # Update the common_elements set with the intersection of the current nested list and the flat_set\n        common_elements.update(nested_set & flat_set)\n    \n    # Return the set of common elements\n    return common_elements\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    \"\"\"\n    Checks if a given string represents an integer.\n\n    Args:\n        s (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dict_list):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n\n    Args:\n        dict_list (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    return all(len(d) == 0 for d in dict_list)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "not", "EnIODji", "gA", "ML", "a", "e"], [], [], [], [], [], [], [], []]]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    \"\"\"\n    This function converts a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): A tuple of positive integers.\n\n    Returns:\n        int: A single integer formed by concatenating the integers in the tuple.\n\n    Raises:\n        ValueError: If the tuple contains non-positive integers or non-integer values.\n    \"\"\"\n    # Check if all elements in the tuple are positive integers\n    if not all(isinstance(x, int) and x > 0 for x in t):\n        raise ValueError(\"The tuple must contain only positive integers.\")\n\n    # Convert each integer in the tuple to a string\n    str_ints = [str(x) for x in t]\n\n    # Concatenate the strings\n    concatenated_str = ''.join(str_ints)\n\n    # Convert the concatenated string back to an integer\n    result = int(concatenated_str)\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\n\ndef list_to_float(lst):\n    \"\"\"\n    This function takes a list of lists as input, where each sublist contains two elements.\n    It converts all possible convertible elements in the list to floats and returns the result.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains two elements.\n\n    Returns:\n        list: A list of lists, where each sublist contains two elements, both of which are floats.\n    \"\"\"\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each sublist in the input list\n    for sub_list in lst:\n        # Initialize an empty list to store the converted elements\n        converted_sub_list = []\n        \n        # Iterate over each element in the sublist\n        for element in sub_list:\n            # Check if the element is a string\n            if isinstance(element, str):\n                # Try to convert the element to a float\n                try:\n                    converted_sub_list.append(float(element))\n                # If the conversion fails, append the original element\n                except ValueError:\n                    converted_sub_list.append(element)\n            # If the element is not a string, it's already a float, so append it as is\n            else:\n                converted_sub_list.append(element)\n        \n        # Append the converted sublist to the result\n        result.append(converted_sub_list)\n    \n    # Return the result\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list: A list of strings split on the space character.\n    \"\"\"\n    return s.split()\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\ndef search(nums):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n\n    Args:\n        nums (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the list.\n\n    \"\"\"\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(nums) - 1\n\n    # Continue the search until the low and high pointers meet\n    while low < high:\n        # Calculate the mid index\n        mid = (low + high) // 2\n\n        # If the mid element is the same as the next element, \n        # then the element that appears only once is in the right half\n        if nums[mid] == nums[mid ^ 1]:\n            low = mid + 1\n        # If the mid element is different from the next element, \n        # then the element that appears only once is in the left half\n        else:\n            high = mid\n\n    # At this point, low and high pointers are pointing to the same index\n    # which is the index of the element that appears only once\n    return nums[low]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    \"\"\"\n    This function calculates the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        tuples (list): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    # Initialize max_product as negative infinity\n    max_product = float('-inf')\n    \n    # Iterate over each tuple in the list\n    for tup in tuples:\n        # Calculate the product of the absolute values of the two numbers in the tuple\n        product = abs(tup[0]) * abs(tup[1])\n        \n        # Update max_product if the current product is greater\n        max_product = max(max_product, product)\n    \n    # Return the maximum product found\n    return max_product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef sum_of_amicable_numbers(n):\n    \"\"\"\n    This function calculates the sum of all amicable numbers from 1 to n.\n    \n    An amicable number is a number that is the sum of the proper divisors of another number.\n    For example, 220 and 284 are amicable numbers because the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, and 110, and the proper divisors of 284 are 1, 2, 4, 71, and 142, and 220 + 284 = 504.\n    \n    Parameters:\n    n (int): The upper limit for the amicable numbers.\n    \n    Returns:\n    int: The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    \n    # Initialize a dictionary to store the sum of proper divisors for each number\n    sum_of_divisors = {}\n    \n    # Iterate over all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Initialize the sum of proper divisors for the current number\n        sum_of_divisors[i] = 0\n        \n        # Iterate over all numbers from 1 to i\n        for j in range(1, i):\n            # If j is a divisor of i, add it to the sum of proper divisors\n            if i % j == 0:\n                sum_of_divisors[i] += j\n        \n        # If the sum of proper divisors is greater than i and less than or equal to n, \n        # and the sum of proper divisors of the sum of proper divisors is equal to i, \n        # then i and the sum of proper divisors are amicable numbers\n        if sum_of_divisors[i] > i and sum_of_divisors[i] <= n and sum_of_divisors[sum_of_divisors[i]] == i:\n            # Add the sum of proper divisors to the total sum\n            total_sum = sum_of_divisors[i]\n            # Add the current number to the total sum\n            total_sum += i\n            # Update the sum of proper divisors for the sum of proper divisors\n            sum_of_divisors[sum_of_divisors[i]] = total_sum\n    \n    # Return the total sum\n    return sum_of_divisors[sum_of_divisors[i]] for i in sum_of", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\ndef find_length(s):\n    \"\"\"\n    This function calculates the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        s (str): A binary string containing 0s and 1s.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string.\n    \"\"\"\n    max_diff = 0\n    count = 0\n    \n    # Iterate over the string\n    for char in s:\n        # If the character is '1', increment the count\n        if char == '1':\n            count += 1\n        # If the character is '0', reset the count\n        else:\n            count = 0\n        \n        # Update the maximum difference\n        max_diff = max(max_diff, count)\n    \n    return max_diff\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0000001110000001111111"]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\nimport math\nimport cmath\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    real (float): The real part of the complex number.\n    imag (float): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    # Calculate the angle using the cmath library\n    angle = cmath.phase(complex(real, imag))\n    \n    # Convert the angle from radians to degrees\n    angle_degrees = math.degrees(angle)\n    \n    return angle_degrees\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0", "1j"]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The sum of common divisors of a and b.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Return the sum of common divisors\n    return sum(common_divisors)\n\n# Test the function\nassert sum_of_common_divisors(10, 15) == 6\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a, b):\n    \"\"\"\n    This function multiplies two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The product of a and b.\n    \"\"\"\n    return a * b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n characters from the given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        words (str): A string of words separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n    \"\"\"\n    # Split the input string into a list of words\n    word_list = words.split()\n    \n    # Use a list comprehension to filter out words that are not longer than n characters\n    long_word_list = [word for word in word_list if len(word) > n]\n    \n    return long_word_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square grid filled with distinct positive integers \n    in the range 1 to n^2 such that each cell contains a different integer \n    and the sum of the integers in each row, column and diagonal is equal.\n    \n    Args:\n        matrix (list): A 2D list representing the matrix to be checked.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    \n    # Check if the matrix is a square\n    if len(matrix)!= len(matrix[0]):\n        return False\n    \n    # Get the size of the matrix\n    n = len(matrix)\n    \n    # Calculate the expected sum of each row, column and diagonal\n    expected_sum = n * (n**2 + 1) // 2\n    \n    # Check if the sum of each row is equal to the expected sum\n    for row in matrix:\n        if sum(row)!= expected_sum:\n            return False\n    \n    # Check if the sum of each column is equal to the expected sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n))!= expected_sum:\n            return False\n    \n    # Check if the sum of the main diagonal is equal to the expected sum\n    if sum(matrix[i][i] for i in range(n))!= expected_sum:\n        return False\n    \n    # Check if the sum of the anti-diagonal is equal to the expected sum\n    if sum(matrix[i][n-i-1] for i in range(n))!= expected_sum:\n        return False\n    \n    # Check if all elements in the matrix are distinct\n    if len(matrix)!= len(set(element for row in matrix for element in row)):\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[7, 7], [7, 7]]]]}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    This function finds the item with maximum frequency in a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The item with maximum frequency in the list.\n\n    \"\"\"\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = {}\n    \n    # Iterate over each item in the list\n    for item in lst:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_freq_item = max(freq_dict, key=freq_dict.get)\n    \n    # Return the item with the maximum frequency\n    return max_freq_item\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    \"\"\"\n    Reverses only the vowels of a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with vowels reversed.\n    \"\"\"\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the string to a list of characters\n    s = list(s)\n    \n    # Initialize two pointers, one at the start and one at the end of the string\n    left, right = 0, len(s) - 1\n    \n    # Loop until the pointers meet\n    while left < right:\n        # If the character at the left pointer is not a vowel, move the pointer to the right\n        if s[left] not in vowels:\n            left += 1\n        # If the character at the right pointer is not a vowel, move the pointer to the left\n        elif s[right] not in vowels:\n            right -= 1\n        # If both characters are vowels, swap them and move both pointers\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    \n    # Convert the list of characters back to a string\n    return ''.join(s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    It removes any non-alphabetic characters from the tuple and joins the remaining characters into a string.\n    \n    Parameters:\n    tup (tuple): The input tuple to be converted to a string.\n    \n    Returns:\n    str: The input tuple converted to a string.\n    \"\"\"\n    # Remove any non-alphabetic characters from the tuple\n    alphabetic_chars = ''.join(char for char in tup if char.isalpha())\n    \n    # Convert the string to lowercase\n    alphabetic_chars = alphabetic_chars.lower()\n    \n    # Remove any duplicate characters\n    unique_chars = ''.join(sorted(set(alphabetic_chars)))\n    \n    # Join the unique characters into a string\n    result = ''.join(unique_chars)\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["a", "a"]]]}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    \"\"\"\n    This function calculates the sum of the negative numbers in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n    \"\"\"\n    return sum(num for num in lst if num < 0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    The nth hexagonal number is the number of dots that make up the boundary of a hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number to calculate.\n\n    Returns:\n        int: The nth hexagonal number.\n\n    \"\"\"\n    # The formula for the nth hexagonal number is given by: Hn = 3n^2 - 3n + 1\n    # This formula is derived from the fact that the nth hexagonal number is the sum of the first n odd numbers\n    # The sum of the first n odd numbers is n^2, and the sum of the first n-1 odd numbers is (n-1)^2\n    # Therefore, the nth hexagonal number is 3n^2 - 3n + 1\n    return 3 * n ** 2 - 3 * n + 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes.\n    \"\"\"\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = sum(1 for x in arr if x == 0)\n    non_zero_count = len(arr) - zero_count\n\n    # Check for division by zero\n    if non_zero_count == 0:\n        return 0\n\n    # Calculate and return the ratio\n    return zero_count / non_zero_count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Initialize a variable to store the count of consecutive 1's\n    count = 0\n    \n    # Iterate over the binary string\n    for bit in binary:\n        # If the bit is 1, increment the count\n        if bit == '1':\n            count += 1\n        # If the bit is 0, reset the count\n        else:\n            count = 0\n        # If the count is more than 1, return False\n        if count > 1:\n            return False\n    \n    # If the function hasn't returned False, return True\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[14]], "plus_fail_tests": [[-2147483648]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Args:\n        radius (float): The radius of the circle.\n\n    Returns:\n        float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\ndef extract_singly(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns a set of numbers.\n    \n    Args:\n        lists (list): A list of lists containing integers.\n    \n    Returns:\n        set: A set of unique integers.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    result = set()\n    \n    # Iterate over each sublist in the input list\n    for sublist in lists:\n        # Iterate over each number in the sublist\n        for num in sublist:\n            # Add the number to the result set\n            result.add(num)\n    \n    # Return the result set\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Args:\n        lst (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n    \"\"\"\n    # Create a copy of the input list to avoid modifying it in-place\n    lst = lst.copy()\n\n    # Iterate over the list from the last element to the first\n    for i in range(len(lst) - 1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = lst.index(max(lst[:i + 1]))\n\n        # If the maximum element is not at the end of the unsorted part, flip it to the end\n        if max_idx!= i:\n            # Flip the maximum element to the end of the unsorted part\n            lst[:max_idx + 1] = reversed(lst[:max_idx + 1])\n\n            # Flip the maximum element to the beginning of the unsorted part\n            lst[:i + 1] = reversed(lst[:i + 1])\n\n    # Return the sorted list\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n    \"\"\"\n    # Initialize a counter variable to store the count of identical items\n    count = 0\n    \n    # Iterate over the indices of the first list\n    for i in range(len(list1)):\n        # Check if the items at the current index are identical in all three lists\n        if list1[i] == list2[i] == list3[i]:\n            # If they are identical, increment the counter\n            count += 1\n    \n    # Return the count of identical items\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n\n    Args:\n        tup (tuple): A tuple containing lists.\n\n    Returns:\n        int: The number of lists present in the tuple.\n    \"\"\"\n    # Initialize a counter variable to store the number of lists\n    count = 0\n    \n    # Iterate over each element in the tuple\n    for element in tup:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If the element is a list, increment the counter\n            count += 1\n    \n    # Return the total count of lists\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr):\n    \"\"\"\n    This function calculates the maximum absolute difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    \"\"\"\n    # Check if the array has less than two elements\n    if len(arr) < 2:\n        raise ValueError(\"Array should have at least two elements\")\n\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n\n    # The maximum difference will be between the first and last element\n    # or between the first and second smallest element and the last and second largest element\n    max_diff = max(sorted_arr[-1] - sorted_arr[0], sorted_arr[-2] - sorted_arr[1])\n\n    return max_diff\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1]]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, \n    or returns None if no solution exists.\n\n    :param a: coefficient of x\n    :param b: coefficient of y\n    :param n: constant term\n    :return: tuple of integers (x, y) or None\n    \"\"\"\n    # Calculate the greatest common divisor of a and b\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the coefficients of x and y using the Extended Euclidean Algorithm\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd_val, x, y = extended_gcd(b % a, a)\n            return gcd_val, y - (b // a) * x, x\n\n    # Calculate the greatest common divisor of a and b\n    gcd_val = gcd(a, b)\n\n    # If the greatest common divisor is not 1, there is no solution\n    if gcd_val!= 1:\n        return None\n\n    # Calculate the coefficients of x and y using the Extended Euclidean Algorithm\n    x, y, _ = extended_gcd(a, b)\n\n    # Scale the coefficients to satisfy ax + by = n\n    x *= n // gcd_val\n    y *= n // gcd_val\n\n    # Return the solution as a tuple\n    return x, y\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(main_list, elements_to_remove):\n    \"\"\"\n    Removes all elements from the main list present in the elements_to_remove list.\n\n    Args:\n        main_list (list): The list from which elements will be removed.\n        elements_to_remove (list): The list containing elements to be removed.\n\n    Returns:\n        list: The modified main list with elements removed.\n    \"\"\"\n    # Convert the elements_to_remove list to a set for efficient lookups\n    elements_to_remove_set = set(elements_to_remove)\n    \n    # Use a list comprehension to filter out elements present in elements_to_remove_set\n    filtered_list = [element for element in main_list if element not in elements_to_remove_set]\n    \n    return filtered_list\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, "apple", [1, 2], [3, 4], {"name": "John"}, 5.5], [2, "apple", [3, 4], {"name": "John"}, 5.5]]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) +... until n-x =< 0.\n\n    Args:\n        n (int): The starting number of the series.\n\n    Returns:\n        int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through i from 0 to n // 2\n    for i in range(n // 2):\n        # Calculate the current term and add it to the sum\n        total_sum += n - 2 * i\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[1]]}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\n\ndef are_equivalent(a: int, b: int) -> bool:\n    \"\"\"\n    This function determines if the sum of the divisors of two integers are the same.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the sum of the divisors of a and b are the same, False otherwise.\n    \"\"\"\n\n    # Calculate the sum of divisors for a\n    sum_divisors_a = sum(i for i in range(1, a + 1) if a % i == 0)\n    \n    # Calculate the sum of divisors for b\n    sum_divisors_b = sum(i for i in range(1, b + 1) if b % i == 0)\n    \n    # Return False if the sums are not equal, True otherwise\n    return sum_divisors_a!= sum_divisors_b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position \n    in the string as in the English alphabet (case insensitive).\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The count of characters at the same position.\n    \"\"\"\n    # Convert the string to lowercase for case insensitive comparison\n    s = s.lower()\n    \n    # Initialize a counter for characters at the same position\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an alphabet letter\n        if char.isalpha():\n            # Calculate the position of the character in the alphabet\n            position = ord(char) - ord('a') + 1\n            \n            # Check if the character is at the same position in the string\n            if s.index(char) + 1 == position:\n                # Increment the counter\n                count += 1\n    \n    # Return the count of characters at the same position\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["TheQuickBrownFoxJumpsOverTheLazyDog"]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\ndef find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The number of pairs of integers that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            # Check if the xor of the pair is even\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\ndef next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    # Calculate the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\ndef frequency(lst, num):\n    \"\"\"\n    This function counts the number of occurrences of a given number in a list.\n\n    Args:\n        lst (list): A list of integers.\n        num (int): The number to be searched in the list.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\ndef sum_range_list(lst, start, end):\n    \"\"\"\n    This function calculates the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): A list of integers.\n        start (int): The starting index of the range (inclusive).\n        end (int): The ending index of the range (inclusive).\n\n    Returns:\n        int: The sum of numbers in the list within the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n    \"\"\"\n    # Check if the start or end index is out of range\n    if start < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Start or end index is out of range\")\n\n    # Use list slicing to get the numbers in the range and sum them up\n    return sum(lst[start:end+1])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Args:\n        n (int): The number of sides of the polygon. For a regular pentagon, n = 5.\n\n    Returns:\n        int: The perimeter of the regular pentagon.\n\n    Raises:\n        ValueError: If n is not 5.\n\n    \"\"\"\n    if n!= 5:\n        raise ValueError(\"A regular pentagon has 5 sides.\")\n    \n    # The formula for the perimeter of a regular polygon is P = n * s, where P is the perimeter and s is the length of one side.\n    # Since we know the number of sides (n) is 5, we can directly multiply it by the length of one side (s) to get the perimeter.\n    perimeter = 5 * 5  # Replace 5 with the length of one side\n    \n    return perimeter\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(s):\n    \"\"\"\n    This function counts the number of occurrences of the string'std' in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of occurrences of'std' in the string.\n\n    \"\"\"\n    # Initialize a counter variable to store the count of'std'\n    count = 0\n    \n    # Iterate over the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Check if the current window matches'std'\n        if s[i:i+3] =='std':\n            # If it matches, increment the counter\n            count += 1\n    \n    # Return the total count\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    \"\"\"\n    This function checks if all elements in a tuple have the same data type.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    # Get the data type of the first element in the tuple\n    data_type = type(tup[0])\n    \n    # Iterate over the rest of the elements in the tuple\n    for element in tup[1:]:\n        # If the data type of the current element is different from the first element's data type, return False\n        if type(element)!= data_type:\n            return False\n    \n    # If the function hasn't returned False after checking all elements, return True\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number of set bits in the given number.\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Initialize a counter for set bits\n    set_bits = 0\n    \n    # Iterate over each character in the binary string\n    for bit in binary:\n        # If the bit is '1', increment the counter\n        if bit == '1':\n            set_bits += 1\n    \n    # Return the total count of set bits\n    return set_bits\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    \"\"\"\n    This function removes characters with odd index values from a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with characters at odd index values removed.\n    \"\"\"\n    return s[::2]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum value among them.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    int: The minimum value among the three input numbers.\n    \"\"\"\n    # We use the built-in min() function in Python to find the minimum value.\n    # This function returns the smallest item in an iterable or the smallest of two or more arguments.\n    return min(a, b, c)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): The input array.\n        n (int): The number of elements to re-arrange.\n\n    Returns:\n        list: The re-arranged array.\n    \"\"\"\n    # Separate the first n elements into negative and positive lists\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n\n    # Combine the negative and positive lists\n    result = negative + positive\n\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], 5]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, c):\n    \"\"\"\n    Replaces all blank spaces in a given string with a specified character.\n\n    Args:\n        s (str): The input string.\n        c (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced.\n    \"\"\"\n    return s.replace(' ', c)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list of the n largest items from the input list.\n    \"\"\"\n    # Check if n is greater than the length of the list\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n\n    # Return the n largest items\n    return sorted_lst[:n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula 2\u03c0rh\n    lateral_surface_area = 2 * math.pi * radius * height\n    \n    return lateral_surface_area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The volume of the cube.\n\n    Raises:\n        ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return side_length ** 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number with all even bits set.\n    \"\"\"\n    # Initialize the result as 0\n    result = 0\n    \n    # Iterate over each bit in the number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n >> i) & 1:\n            # If the bit is even, set it to 1 in the result\n            result |= 1 << i\n    \n    # Return the result\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[20]], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Initialize an empty dictionary to store the occurrences of each tuple\n    occurrences_dict = {}\n\n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Convert the tuple to a string so it can be used as a dictionary key\n        tup_str = str(tup)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if tup_str in occurrences_dict:\n            occurrences_dict[tup_str] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurrences_dict[tup_str] = 1\n\n    # Sort the dictionary items by the first element of the tuple\n    sorted_items = sorted(occurrences_dict.items(), key=lambda x: x[0][0])\n\n    # Initialize an empty dictionary to store the final result\n    result_dict = {}\n\n    # Iterate over the sorted items\n    for item in sorted_items:\n        # If the first element of the tuple is not already in the result dictionary, add it\n        if item[0][0] not in result_dict:\n            result_dict[item[0][0]] = item[1]\n        # If the first element of the tuple is already in the result dictionary, increment its count\n        else:\n            result_dict[item[0][0]] += item[1]\n\n    # Return the result dictionary\n    return result_dict\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s: str) -> int:\n    \"\"\"\n    This function calculates the number of non-empty substrings of a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of non-empty substrings.\n    \"\"\"\n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible start indices of substrings\n    for start in range(n):\n        # Iterate over all possible end indices of substrings\n        for end in range(start + 1, n + 1):\n            # Increment the count for each non-empty substring\n            count += 1\n    \n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function calculates the number of possible sequences of length n, \n    where each element is a positive integer and is greater than or equal to \n    twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The upper limit for each element in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The total number of possible sequences.\n    \"\"\"\n    # Initialize a list to store the number of sequences for each length up to n\n    sequences = [0] * (n + 1)\n    \n    # There is one way to have a sequence of length 1 (the number 1 itself)\n    sequences[1] = 1\n    \n    # For each length from 2 to n\n    for i in range(2, n + 1):\n        # Initialize the number of sequences for the current length to 0\n        sequences[i] = 0\n        # For each possible previous element (from 1 to m)\n        for j in range(1, min(i, m) + 1):\n            # If the current element is greater than or equal to twice the previous element\n            if j * 2 <= i:\n                # Add the number of sequences for the previous length to the current length\n                sequences[i] += sequences[i - j * 2]\n    \n    # Return the total number of sequences for length n\n    return sequences[n]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[50, 5]]}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(nums, n, target):\n    \"\"\"\n    Checks if the target element is the majority element in the given sorted array.\n\n    Args:\n    - nums (list): A sorted list of integers.\n    - n (int): The length of the list.\n    - target (int): The element to check.\n\n    Returns:\n    - bool: True if the target element is the majority element, False otherwise.\n    \"\"\"\n    # Initialize two pointers, one at the start and one at the end of the list\n    left, right = 0, n - 1\n    \n    # Continue the loop until the two pointers meet\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to the target, we need to check its frequency\n        if nums[mid] == target:\n            # Initialize two pointers, one at the start and one at the end of the subarray\n            left_sub, right_sub = left, mid\n            \n            # Continue the loop until the two pointers meet\n            while left_sub <= right_sub:\n                # If the left element is equal to the target, move the left pointer to the right\n                if nums[left_sub] == target:\n                    left_sub += 1\n                # If the right element is equal to the target, move the right pointer to the left\n                elif nums[right_sub] == target:\n                    right_sub -= 1\n                # If neither of the above conditions is met, break the loop\n                else:\n                    break\n            \n            # If the left pointer is greater than the right pointer, it means the target element is the majority element\n            if left_sub > right_sub:\n                return True\n        \n        # If the middle element is less than the target, move the left pointer to the right\n        elif nums[mid] < target:\n            left = mid + 1\n        # If the middle element is greater than the target, move the right pointer to the left\n        else:\n            right = mid - 1\n    \n    # If the loop ends without finding the target element as the majority element, return False\n    return False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    \"\"\"\n    This function replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The list from which the last element will be replaced.\n        list2 (list): The list whose elements will replace the last element of list1.\n\n    Returns:\n        list: The modified list1 with the last element replaced.\n    \"\"\"\n    # Check if list1 has at least two elements\n    if len(list1) < 2:\n        raise ValueError(\"list1 must have at least two elements\")\n    \n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    \n    # Return the modified list1\n    return list1\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5], [1, 2, 3, 4, 5]]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(s):\n    \"\"\"\n    This function counts the total number of characters in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nimport math\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    This function calculates the next perfect square greater than a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The next perfect square greater than the input number.\n    \"\"\"\n    # Calculate the square root of the input number\n    sqrt_n = math.sqrt(n)\n    \n    # If the square root is an integer, it means the input number is already a perfect square\n    if sqrt_n == int(sqrt_n):\n        # In this case, the next perfect square is the square of the next integer\n        return (sqrt_n + 1) ** 2\n    else:\n        # If the square root is not an integer, the next perfect square is the square of the next integer\n        # This is because the next perfect square must be greater than the input number\n        return (sqrt_n + 1) ** 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\ndef max_sum(arr):\n    \"\"\"\n    This function calculates the maximum sum of a bitonic subsequence for the given array.\n    \n    A sequence is bitonic if it is first increasing and then decreasing.\n    \n    Parameters:\n    arr (list): The input array.\n    \n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n    \"\"\"\n    \n    # Get the length of the array\n    n = len(arr)\n    \n    # Initialize arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Initialize the maximum sum of increasing subsequence\n    inc[0] = arr[0]\n    \n    # Calculate the maximum sum of increasing subsequences\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Calculate the maximum sum of decreasing subsequences\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Initialize the maximum sum of bitonic subsequences\n    max_sum = float('-inf')\n    \n    # Calculate the maximum sum of bitonic subsequences\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i])\n    \n    return max_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n    \n    Parameters:\n    arr1 (list): The first array.\n    arr2 (list): The second array.\n    \n    Returns:\n    list: A list of elements that are common to both input arrays.\n    \"\"\"\n    \n    # Convert the first array to a set for efficient lookups\n    set1 = set(arr1)\n    \n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Iterate over the second array\n    for num in arr2:\n        # Check if the current number is in the set of the first array\n        if num in set1:\n            # If it is, add it to the intersection list\n            intersection.append(num)\n    \n    # Return the intersection list\n    return intersection\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, X):\n    \"\"\"\n    This function counts the occurrences of element X in a given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        X (any): The element to be searched.\n\n    Returns:\n        int: The number of occurrences of element X in the tuple.\n    \"\"\"\n    return tup.count(X)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\ndef lps(s):\n    \"\"\"\n    This function calculates the length of the longest palindromic subsequence in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    # Create a 2D array to store the lengths of the longest palindromic subsequences.\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes of length 1.\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for substrings of length 2.\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n    \n    # Check for lengths greater than 2.\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # The length of the longest palindromic subsequence is stored in dp[0][n-1].\n    return dp[0][n - 1]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\ndef insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n    \"\"\"\n    return [element] + [x for x in lst] + [element]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    z (complex): The complex number to convert.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the complex number in polar coordinates.\n    \"\"\"\n    # Calculate the magnitude of the complex number\n    magnitude = abs(z)\n    \n    # Calculate the angle of the complex number in radians\n    angle = math.atan2(z.imag, z.real)\n    \n    # Return the magnitude and angle as a tuple\n    return (magnitude, angle)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Args:\n        lst (list): A list containing elements of different data types.\n\n    Returns:\n        int: The number of integer elements in the list.\n    \"\"\"\n    return sum(1 for elem in lst if isinstance(elem, int))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Args:\n        n (int): A non-negative number.\n\n    Returns:\n        int: The number of prime numbers less than n.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is a negative number.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n\n        Args:\n            num (int): The number to check.\n\n        Returns:\n            bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a tuple with the second number first and the first number second.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        tuple: A tuple containing the second number first and the first number second.\n    \"\"\"\n    return b, a\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input, compares their elements, and returns a new tuple \n    where the elements from the first tuple are replaced with the maximum elements from the second tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple to compare.\n        tuple2 (tuple): The second tuple to compare.\n\n    Returns:\n        tuple: A new tuple with the maximum elements from the second tuple.\n    \"\"\"\n    \n    # Initialize an empty list to store the maximum elements\n    max_elements = []\n    \n    # Iterate over the elements in the first tuple\n    for i in range(len(tuple1)):\n        # Compare the current element in the first tuple with the corresponding element in the second tuple\n        if tuple1[i][0] < tuple2[i][0]:\n            # If the element in the second tuple is greater, append it to the list of maximum elements\n            max_elements.append(tuple2[i])\n        else:\n            # If the element in the first tuple is greater, append it to the list of maximum elements\n            max_elements.append(tuple1[i])\n    \n    # Return the list of maximum elements as a tuple\n    return tuple(max_elements)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_shanks_williams(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    return newman_shanks_williams(n)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    This function performs element-wise division operation on two input tuples.\n\n    Args:\n        tuple1 (tuple): The dividend tuple.\n        tuple2 (tuple): The divisor tuple.\n\n    Returns:\n        tuple: A tuple containing the results of the element-wise division operation.\n\n    Raises:\n        ZeroDivisionError: If any element in the divisor tuple is zero.\n    \"\"\"\n    # Check if any element in the divisor tuple is zero\n    if 0 in tuple2:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n\n    # Use list comprehension to perform element-wise division\n    result = tuple(i / j for i, j in zip(tuple1, tuple2))\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, L):\n    \"\"\"\n    This function splits the given list into two parts where the length of the first part of the list is L.\n    \n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n    \n    Returns:\n        tuple: A tuple containing the two resulting lists.\n    \"\"\"\n    \n    # Check if L is greater than the length of the list\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    \n    # Split the list into two parts using list slicing\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    A dog's age is calculated as follows:\n    - The first two years of a dog's life are equivalent to 10 human years.\n    - Each subsequent year is equivalent to 5 human years.\n\n    Args:\n        human_age (int): The human's age.\n\n    Returns:\n        int: The dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's age\n    dog_age = min(human_age, 2) * 10 + max(0, human_age - 2) * 5\n    \n    return dog_age\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\ndef list_split(lst, n):\n    \"\"\"\n    This function splits a list into sublists of size n.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The size of each sublist.\n\n    Returns:\n        list: A list of sublists of size n.\n    \"\"\"\n    # Initialize an empty list to store the sublists\n    result = []\n    \n    # Calculate the number of full sublists\n    num_full_sublists = len(lst) // n\n    \n    # Create full sublists and add them to the result\n    for i in range(num_full_sublists):\n        result.append(lst[i*n:(i+1)*n])\n    \n    # Calculate the number of remaining elements\n    num_remaining = len(lst) % n\n    \n    # If there are remaining elements, create a sublist for them and add it to the result\n    if num_remaining:\n        result.append(lst[num_full_sublists*n:])\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    # The lateral surface area of a cube is 4 times the square of its side length\n    return 4 * (side ** 2)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    This function calculates the sum of the squares of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to consider.\n\n    Returns:\n        int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n + 1):\n        # Calculate the square of the current odd number\n        square = (2 * i - 1) ** 2\n        \n        # Add the square to the total sum\n        total_sum += square\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    This function calculates the nth star number.\n\n    The star number is calculated using the formula: \n    (n * (n + 1)) / 2\n\n    Args:\n        n (int): The position of the star number to be found.\n\n    Returns:\n        int: The nth star number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the nth star number using the formula\n    star_num = (n * (n + 1)) // 2\n\n    return star_num\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    \"\"\"\n    This function calculates the ASCII value of a given character.\n\n    Parameters:\n    char (str): The input character.\n\n    Returns:\n    int: The ASCII value of the input character.\n    \"\"\"\n    return ord(char)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst):\n    \"\"\"\n    This function calculates the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list contains non-integer values.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in lst):\n        raise ValueError(\"List must contain only integers.\")\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate over the list with enumerate to get both index and value\n    for index, value in enumerate(lst):\n        # Check if the index is even\n        if index % 2 == 0:\n            # Check if the value is even\n            if value % 2 == 0:\n                # Add the value to the sum\n                total_sum += value\n\n    # Return the sum\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Args:\n        n (int): The number of even natural numbers to be raised to the fifth power.\n\n    Returns:\n        int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2 * n, 2):\n        # Calculate the fifth power of the current even number\n        fifth_power = i ** 5\n        \n        # Add the fifth power to the total sum\n        total_sum += fifth_power\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(tuples_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n    \"\"\"\n    return [t[-1] for t in tuples_list]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the elements of tuple1 subtracted by the elements of tuple2.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Use a list comprehension to subtract corresponding elements\n    result = [a - b for a, b in zip(tuple1, tuple2)]\n\n    # Convert the list back to a tuple and return it\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients.\n\n    Args:\n    n (int): A positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize sum\n    total_sum = 0\n\n    # Calculate binomial coefficients for each index\n    for i in range(n + 1):\n        # Calculate binomial coefficient using math.comb\n        binomial_coefficient = math.comb(n, i)\n        \n        # Check if index is even\n        if i % 2 == 0:\n            # Add binomial coefficient to sum\n            total_sum += binomial_coefficient\n\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    volume = math.pi * (radius ** 2) * height\n    \n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary, n):\n    \"\"\"\n    This function filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The dictionary to be filtered.\n        n (int): The minimum value for the dictionary entries.\n\n    Returns:\n        dict: A new dictionary containing only the entries with values greater than or equal to n.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    \n    # Iterate over each key-value pair in the input dictionary\n    for key, value in dictionary.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # If the value is greater than or equal to n, add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n    \n    # Return the filtered dictionary\n    return filtered_dict\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    \"\"\"\n    This function counts the number of elements before the first tuple element in the given tuple.\n\n    Args:\n        tup (tuple): A tuple containing elements.\n\n    Returns:\n        int: The number of elements before the first tuple element.\n    \"\"\"\n    # Initialize a counter to keep track of the number of elements before the first tuple element\n    count = 0\n    \n    # Iterate over each element in the tuple\n    for element in tup:\n        # If the current element is a tuple, break the loop\n        if isinstance(element, tuple):\n            break\n        # Otherwise, increment the counter\n        count += 1\n    \n    # Return the count\n    return count\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    This function calculates the nth decagonal number.\n\n    Args:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    # The formula for the nth decagonal number is given by: Dn = 10n^2 - 10n + 1\n    # We can use this formula to calculate the nth decagonal number directly.\n    return 10 * n ** 2 - 10 * n + 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, element):\n    \"\"\"\n    Searches for an element in a given array using sequential search algorithm.\n\n    Args:\n        array (list): The list of elements to search in.\n        element: The element to search for.\n\n    Returns:\n        tuple: A tuple containing a boolean indicating if the element is found and its index position.\n    \"\"\"\n    # Initialize the index to -1, assuming the element is not found\n    index = -1\n    \n    # Iterate over the array with the index and value\n    for i, value in enumerate(array):\n        # Check if the current value matches the element\n        if value == element:\n            # If a match is found, update the index and break the loop\n            index = i\n            break\n    \n    # Return a tuple containing a boolean indicating if the element is found and its index position\n    return (index!= -1, index)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    \"\"\"\n    Checks if all elements in a given list are unique.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list with the result of element-wise subtraction.\n\n    Raises:\n        ValueError: If the two lists are not of the same length.\n\n    \"\"\"\n    # Check if the two lists are of the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must be of the same length.\")\n\n    # Use list comprehension to create a new list with the result of element-wise subtraction\n    return [x - y for x, y in zip(list1, list2)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    \"\"\"\n    This function checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert the integer into a string to easily access each digit\n    str_n = str(n)\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_n:\n        # Calculate the frequency of the digit\n        frequency = str_n.count(digit)\n        \n        # Check if the frequency is greater than the digit itself\n        if int(digit) > frequency:\n            # If it is, return False\n            return False\n    \n    # If the function hasn't returned False, it means the frequency of each digit is less than or equal to the digit itself, so return True\n    return True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, elem):\n    \"\"\"\n    This function checks whether all items in the list are equal to the given element.\n\n    Args:\n        lst (list): A list of elements\n        elem: The element to be compared with the list elements\n\n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return True  # Return True for an empty list\n    \n    # Check if all elements in the list are equal to the given element\n    return all(item == elem for item in lst)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'a' followed by two or three 'b's, False otherwise.\n    \"\"\"\n    # Check if the string is at least 3 characters long\n    if len(text) < 3:\n        return False\n    \n    # Check if the string starts with 'a'\n    if text[0]!= 'a':\n        return False\n    \n    # Check if the string contains exactly two or three 'b's\n    if text[1] == 'b' and (text[2] == 'b' and text[3] == 'b'):\n        return True\n    elif text[1] == 'b' and text[2] == 'b' and text[3] == 'b':\n        return True\n    elif text[1] == 'b' and text[2] == 'b' and text[3] == 'b' and text[4] == 'b':\n        return True\n    else:\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    This function calculates the maximum sum of a contiguous subarray in the modified array \n    which is formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The size of the subarray.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Initialize the window start index\n    window_start = 0\n    \n    # Traverse the array\n    for window_end in range(len(arr)):\n        # Add the current element to the current sum\n        current_sum += arr[window_end]\n        \n        # If the window size is greater than n, subtract the element at the window start\n        if window_end >= n - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= arr[window_start]\n            window_start += 1\n    \n    # Calculate the sum of the first n elements in the repeated array\n    repeated_sum = total_sum * k\n    \n    # Return the maximum of the maximum sum and the sum of the first n elements\n    return max(max_sum, repeated_sum)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    This function calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to sum.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2 * n, 2):\n        # Calculate the square of the current number and add it to the sum\n        total_sum += i ** 2\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    \"\"\"\n    This function finds the list of maximum length in a list of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with that length.\n    \"\"\"\n    # Check if the input list is empty\n    if not lists:\n        return None, None\n\n    # Initialize the maximum length and the corresponding list\n    max_len = max(len(sublist) for sublist in lists)\n    max_len_list = next(sublist for sublist in lists if len(sublist) == max_len)\n\n    return max_len, max_len_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n\ndef find(dividend, divisor):\n    \"\"\"\n    This function calculates the quotient of two numbers rounded down to the nearest integer.\n\n    Args:\n        dividend (int): The number being divided.\n        divisor (int): The number by which we are dividing.\n\n    Returns:\n        int: The quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    if divisor == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return dividend // divisor\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    This function calculates the length of the third side of a right-angled triangle.\n    \n    Parameters:\n    a (float): The length of one side of the triangle.\n    b (float): The length of the other side of the triangle.\n    \n    Returns:\n    float: The length of the third side of the triangle.\n    \"\"\"\n    \n    # Calculate the length of the third side using the Pythagorean theorem\n    c = math.sqrt(a**2 + b**2)\n    \n    # Return the calculated length\n    return c\n\n# Test the function\nassert round(otherside_rightangle(7,8), 8) == 10.63014581273465\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): A list containing heterogeneous elements.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    # Initialize max_val with the first element of the list\n    max_val = lst[0]\n\n    # Iterate over the list starting from the second element\n    for val in lst[1:]:\n        # If the current value is greater than max_val, update max_val\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value\n    return max_val\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\nimport itertools\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list.\n\n    Args:\n        colors (list): A list of elements.\n        n (int): The length of each combination.\n\n    Returns:\n        list: A list with a tuple for each combination.\n    \"\"\"\n    # Use itertools.combinations_with_replacement to generate all combinations with repetition\n    combinations = list(itertools.combinations_with_replacement(colors, n))\n    \n    # Convert each combination to a tuple and return the result\n    return [combination for combination in combinations]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Dog", "Cat", "CatBird", "Bird", "Fish"], 77]]}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"\n    This function calculates the sum of all divisors of a given number.\n\n    Args:\n        n (int): The number for which the sum of divisors is to be calculated.\n\n    Returns:\n        int: The sum of all divisors of the given number.\n\n    \"\"\"\n    # Initialize the sum of divisors to 0\n    sum_divisors = 0\n    \n    # Iterate over all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor, add it to the sum\n            sum_divisors += i\n    \n    # Return the sum of divisors\n    return sum_divisors\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in a given array.\n    \n    An inversion is a pair of elements in which the first element is greater than the second element.\n    \n    The function uses the merge sort algorithm to count the inversions.\n    \n    Parameters:\n    arr (list): The input array.\n    \n    Returns:\n    int: The number of inversions in the array.\n    \"\"\"\n    if len(arr) <= 1:\n        # Base case: If the array has one or zero elements, it has no inversions.\n        return 0\n    \n    mid = len(arr) // 2\n    # Divide the array into two halves.\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively count the inversions in the left and right halves.\n    left_inv_count = get_Inv_Count(left_half)\n    right_inv_count = get_Inv_Count(right_half)\n    \n    # Merge the two sorted halves and count the inversions between them.\n    merged_inv_count = merge_and_count(left_half, right_half)\n    \n    # Return the total number of inversions.\n    return left_inv_count + right_inv_count + merged_inv_count\n\n\ndef merge_and_count(left, right):\n    \"\"\"\n    This function merges two sorted arrays and counts the number of inversions between them.\n    \n    Parameters:\n    left (list): The first sorted array.\n    right (list): The second sorted array.\n    \n    Returns:\n    int: The number of inversions between the two arrays.\n    \"\"\"\n    merged = []\n    inv_count = 0\n    \n    # Merge the two arrays and count the inversions.\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n    \n    # Append the remaining elements, if any.\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return inv_count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 5, 6, 1]]], "plus_fail_tests": [[[12, 93, 45, 7, 23, 56, 78, 15, 99]]]}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \n    Args:\n        nested_list (list): A list that can contain integers and/or other lists.\n    \n    Returns:\n        list: A flattened list containing all the integers from the input list.\n    \"\"\"\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Iterate over each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively call the function to flatten it\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        # If the element is not a list, append it to the flat list\n        else:\n            flat_list.append(element)\n    \n    # Return the flattened list\n    return flat_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples_list):\n    \"\"\"\n    This function calculates the maximum aggregate from a list of tuples.\n    \n    Parameters:\n    tuples_list (list): A list of tuples containing names and scores.\n    \n    Returns:\n    tuple: A tuple containing the name with the maximum aggregate score.\n    \"\"\"\n    \n    # Create an empty dictionary to store the aggregate scores\n    aggregate_scores = {}\n    \n    # Iterate over each tuple in the list\n    for name, score in tuples_list:\n        # If the name is already in the dictionary, add the score to the existing aggregate\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        # If the name is not in the dictionary, add it with the score as the aggregate\n        else:\n            aggregate_scores[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_aggregate_name = max(aggregate_scores, key=aggregate_scores.get)\n    \n    # Return the name with the maximum aggregate score\n    return (max_aggregate_name, aggregate_scores[max_aggregate_name])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the count of all binary sequences of length 2n \n    such that sum of first n bits is same as sum of last n bits.\n\n    Args:\n    n (int): The number of bits in the binary sequence.\n\n    Returns:\n    float: The count of all binary sequences of length 2n.\n    \"\"\"\n    \n    # Initialize count as 0\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the number to binary and remove the '0b' prefix\n        bin_seq = bin(i)[2:].zfill(2*n)\n        \n        # Check if the sum of first n bits is the same as the sum of last n bits\n        if sum(int(bit) for bit in bin_seq[:n]) == sum(int(bit) for bit in bin_seq[n:]):\n            # If they are the same, increment the count\n            count += 1\n    \n    # Return the count\n    return count / (2**n)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d, depth=1):\n    \"\"\"\n    Calculate the depth of a dictionary.\n\n    Args:\n        d (dict): The dictionary to calculate the depth of.\n        depth (int, optional): The current depth. Defaults to 1.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return depth\n    max_depth = depth\n    for k, v in d.items():\n        if isinstance(v, dict):\n            max_depth = max(max_depth, dict_depth(v, depth + 1))\n    return max_depth\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, i, k, kth_index):\n    \"\"\"\n    This function calculates the maximum sum of an increasing subsequence \n    from the prefix until the ith index and also including the kth element \n    which is after the ith index.\n\n    Parameters:\n    arr (list): The input list of integers.\n    i (int): The index up to which the subsequence is considered.\n    k (int): The index of the element to be included in the subsequence.\n    kth_index (int): The index of the kth element in the array.\n\n    Returns:\n    int: The maximum sum of the increasing subsequence.\n    \"\"\"\n    \n    # Initialize a list to store the maximum sum of increasing subsequence \n    # ending at each index.\n    max_sum = [0] * len(arr)\n    \n    # Initialize the maximum sum for the first element as the element itself.\n    max_sum[0] = arr[0]\n    \n    # Initialize the minimum value for the first element as the element itself.\n    min_val = arr[0]\n    \n    # Iterate over the array from the second element to the ith index.\n    for j in range(1, i + 1):\n        # Initialize the maximum sum for the current element as the element itself.\n        max_sum[j] = arr[j]\n        \n        # Iterate over the previous elements to find the maximum sum of increasing \n        # subsequence ending at the current element.\n        for prev in range(j):\n            # If the current element is greater than the previous element, \n            # update the maximum sum if the sum of the current element and the \n            # maximum sum of the increasing subsequence ending at the previous element \n            # is greater than the current maximum sum.\n            if arr[j] > arr[prev] and max_sum[j] < max_sum[prev] + arr[j]:\n                max_sum[j] = max_sum[prev] + arr[j]\n        \n        # Update the minimum value for the current element as the minimum of the \n        # current element and the minimum value of the previous element.\n        min_val = min(min_val, arr[j])\n    \n    # Return the maximum sum of the increasing subsequence including the kth element.\n    return max(max_sum[kth_index - 1] + min_val, max_sum[kth_index - 1])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: Two words from the list starting with 'p'.\n    \"\"\"\n    # Filter the list to get words starting with 'p'\n    p_words = [word for word in words if word.startswith('p')]\n    \n    # If there are less than two words starting with 'p', return all of them\n    if len(p_words) < 2:\n        return tuple(p_words)\n    \n    # Return the first two words starting with 'p'\n    return p_words[:2]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    This function finds the specified number of largest products from two given lists,\n    selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        n (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the n largest products.\n    \"\"\"\n    # Combine the two lists into a list of pairs\n    pairs = list(zip(list1, list2))\n    \n    # Sort the pairs in descending order based on the product of each pair\n    pairs.sort(key=lambda x: x[0]*x[1], reverse=True)\n    \n    # Select the n largest products\n    largest_products = [pair[0]*pair[1] for pair in pairs[:n]]\n    \n    return largest_products\n\n# Test the function\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    \"\"\"\n    This function converts a given string into a tuple of characters.\n\n    Args:\n        s (str): The input string to be converted.\n\n    Returns:\n        tuple: A tuple of characters from the input string.\n    \"\"\"\n    return tuple(s)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello   world"]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The maximum of a and b.\n    \"\"\"\n    return max(a, b)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in the binary representation of the input number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number with the left most unset bit set.\n    \"\"\"\n    # Calculate the number of bits in the binary representation of n\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set to the left of the left most unset bit\n    mask = (1 << num_bits) - 1\n    \n    # Set the left most unset bit by performing a bitwise OR operation with the mask\n    return n | mask\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function calculates the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n    \n    # Keep doubling the power of 2 until it exceeds n\n    while power_of_2 <= n:\n        # Double the power of 2\n        power_of_2 *= 2\n    \n    # The highest power of 2 that is less than or equal to n is the previous power of 2\n    return power_of_2 // 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone's base.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    # Calculate the volume using the formula (1/3)\u03c0r\u00b2h\n    volume = (1/3) * math.pi * (radius ** 2) * height\n    return volume\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    This function calculates the nth Lucas number.\n\n    Args:\n    n (int): The position of the Lucas number to be calculated.\n\n    Returns:\n    int: The nth Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n    \"\"\"\n\n    # Check if n is less than 1 and raise a ValueError if true\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    # Initialize the first two Lucas numbers\n    a, b = 2, 1\n\n    # If n is 1, return the first Lucas number\n    if n == 1:\n        return a\n\n    # If n is 2, return the second Lucas number\n    if n == 2:\n        return b\n\n    # Calculate the nth Lucas number\n    for _ in range(2, n):\n        # Update a and b to the next two Lucas numbers\n        a, b = b, a + b\n\n    # Return the nth Lucas number\n    return b\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(keys, values, scores):\n    \"\"\"\n    This function converts a list of keys, values, and scores into a nested dictionary.\n\n    Args:\n        keys (list): A list of keys.\n        values (list): A list of values.\n        scores (list): A list of scores.\n\n    Returns:\n        list: A list of nested dictionaries.\n    \"\"\"\n    result = []\n    for i in range(len(keys)):\n        result.append({keys[i]: {values[i]: scores[i]}})\n    return result\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, format_str):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): A list of elements to be formatted.\n        format_str (str): A format string with placeholders for the elements.\n\n    Returns:\n        list: A list of formatted strings.\n    \"\"\"\n    return [format_str.format(i) for i in lst]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    This function calculates the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    Args:\n    n (int): The input number.\n    \n    Returns:\n    int: The maximum sum possible.\n    \"\"\"\n    \n    # Create a dictionary to store the results of subproblems\n    memo = {}\n    \n    def get_max_sum_helper(n):\n        # If the result is already in the memo, return it\n        if n in memo:\n            return memo[n]\n        \n        # Base case: If n is 1, return n\n        if n == 1:\n            return n\n        \n        # Initialize the maximum sum to n\n        max_sum = n\n        \n        # Calculate the maximum sum for n/2, n/3, n/4, and n/5\n        for i in [2, 3, 4, 5]:\n            if n % i == 0:\n                # Recursively calculate the maximum sum for the subproblem\n                subproblem_sum = get_max_sum_helper(n // i)\n                # Update the maximum sum if the subproblem sum is greater\n                max_sum = max(max_sum, subproblem_sum + get_max_sum_helper(i))\n        \n        # Store the result in the memo\n        memo[n] = max_sum\n        \n        # Return the maximum sum\n        return max_sum\n    \n    # Call the helper function and return the result\n    return get_max_sum_helper(n)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str or None: The first non-repeated character if found, otherwise None.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character\n    char_frequency = {}\n    \n    # Iterate over the string to count the frequency of each character\n    for char in s:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    \n    # Iterate over the string again to find the first non-repeated character\n    for char in s:\n        if char_frequency[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    \"\"\"\n    Checks if a given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    \"\"\"\n    Checks whether the given string starts and ends with the same character.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: \"Valid\" if the string starts and ends with the same character, \"Invalid\" otherwise.\n    \"\"\"\n    # Check if the string is not empty\n    if len(s) == 0:\n        return \"Invalid\"\n    \n    # Check if the first and last characters are the same\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    This function calculates the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of digits of each number in the list.\n    \"\"\"\n    return sum(sum(int(digit) for digit in str(num)) for num in numbers)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    This function calculates the median of three numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    # First, we sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Then, we find the middle number (or numbers) in the sorted list\n    middle_index = len(numbers) // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(numbers) % 2!= 0:\n        median = numbers[middle_index]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    \n    return median\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    \"\"\"\n    This function calculates the number of unique tuples in the given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The number of unique tuples in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(lst)\n    \n    # Return the number of unique tuples\n    return len(unique_tuples)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuplex, element):\n    \"\"\"\n    Checks whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to search in.\n        element: The element to search for.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The minimum of a and b.\n    \"\"\"\n    return a if a <= b else b\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\ndef find_Parity(n):\n    \"\"\"\n    This function determines whether the parity of a given number is odd.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        bool: True if the parity is odd, False otherwise.\n    \"\"\"\n    # Calculate the remainder of the number when divided by 2\n    remainder = n % 2\n    \n    # If the remainder is 0, the parity is even\n    # If the remainder is not 0, the parity is odd\n    return remainder!= 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    \"\"\"\n    This function finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    \"\"\"\n    # First, we sort the list of tuples based on the first element of each tuple\n    # This is because we want to compare the products of the pairs of tuples\n    # where the first element of the first tuple is the smallest\n    tuples.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product with a large number\n    min_product = float('inf')\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(tuples) - 1):\n        # For each tuple, calculate the product with the next tuple in the list\n        product = tuples[i][0] * tuples[i+1][1]\n        # Update the minimum product if the current product is smaller\n        min_product = min(min_product, product)\n\n    # Return the minimum product\n    return min_product\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    \"\"\"\n    This function takes an integer as input, rearranges its digits to form the next bigger number, \n    and returns the resulting number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The next bigger number formed by rearranging the digits of the input number.\n    \"\"\"\n    # Convert the number into a list of digits\n    digits = [int(x) for x in str(n)]\n    \n    # Find the first pair of digits from the right that are in increasing order\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such pair is found, the number is already the biggest possible\n        return n\n    \n    # Find the smallest digit to the right of the first pair that is greater than the first digit\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the first digit with the smallest greater digit\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits to the right of the first pair in ascending order\n    digits[i + 1:] = sorted(digits[i + 1:])\n    \n    # Convert the list of digits back into a number and return it\n    return int(''.join(map(str, digits)))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): A list containing heterogeneous elements.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    # Initialize the minimum value with the first element of the list\n    min_val = lst[0]\n\n    # Iterate over the list to find the minimum value\n    for val in lst:\n        # Check if the current value is smaller than the minimum value\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value\n    return min_val\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(tuples_list, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples containing multiple elements.\n        n (int): The position of the element to be extracted.\n\n    Returns:\n        list: A list of extracted elements.\n    \"\"\"\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate over the list of tuples with their indices\n    for i, tup in enumerate(tuples_list):\n        # Check if the current index is equal to n-1 (since indexing starts at 0)\n        if i == n-1:\n            # Append the nth element to the extracted_elements list\n            extracted_elements.append(tup[0])\n    \n    # Return the list of extracted elements\n    return extracted_elements\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 1]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of integers with odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Checks if any value in seq1 exists in seq2.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(x in seq2 for x in seq1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    \"\"\"\n    This function finds the element of a list having maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The element of the list having maximum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n\n    # Find the maximum length of the sublists\n    max_len = max(len(sublist) for sublist in lst)\n\n    # Find the first sublist with the maximum length\n    max_sublist = next(sublist for sublist in lst if len(sublist) == max_len)\n\n    return max_sublist\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(nums):\n    \"\"\"\n    This function finds a pair of numbers in the given array that have the highest product.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the pair of numbers with the highest product.\n\n    Raises:\n        ValueError: If the input list is empty or contains only one element.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"Input list must contain at least two elements.\")\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # The maximum product can be either the product of the two largest numbers or the product of the two smallest numbers (in case of negative numbers)\n    max_product = max(nums[-1] * nums[-2], nums[0] * nums[1])\n\n    # Find the pair with the maximum product\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] == max_product:\n                return (nums[i], nums[j])\n\n    # If no pair is found, return an empty tuple\n    return ()\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    \"\"\"\n    This function rounds every number in the given list to the nearest integer, \n    then calculates the sum of the rounded numbers and multiplies it by the length of the list.\n\n    Args:\n        numbers (list): A list of floating point numbers.\n\n    Returns:\n        int: The sum of the rounded numbers multiplied by the length of the list.\n    \"\"\"\n    \n    # Initialize a variable to store the sum of the rounded numbers\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Round the number to the nearest integer\n        rounded_num = round(num)\n        \n        # Add the rounded number to the total sum\n        total_sum += rounded_num\n    \n    # Calculate the sum of the rounded numbers multiplied by the length of the list\n    result = total_sum * len(numbers)\n    \n    # Return the result\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    \"\"\"\n    Concatenates each element of a tuple by a delimiter.\n\n    Args:\n        tup (tuple): The input tuple to be concatenated.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    return '-'.join(map(str, tup))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    \"\"\"\n    This function calculates the cube sum of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to consider.\n\n    Returns:\n        int: The cube sum of the first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2 * n, 2):\n        # Calculate the cube of the current number and add it to the sum\n        total_sum += i ** 3\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        float: The average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize sum_of_cubes to zero\n    sum_of_cubes = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n + 1):\n        # Calculate the cube of the current number and add it to sum_of_cubes\n        sum_of_cubes += i ** 3\n    \n    # Calculate the average by dividing sum_of_cubes by n\n    average_of_cubes = sum_of_cubes / n\n    \n    # Return the calculated average\n    return average_of_cubes\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lists, element):\n    \"\"\"\n    This function counts the number of sublists containing a particular element.\n\n    Args:\n        lists (list): A list of lists.\n        element: The element to be searched in the sublists.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    # Initialize a counter variable to store the count of sublists containing the element\n    count = 0\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in lists:\n        # Check if the element is in the current sublist\n        if element in sublist:\n            # If the element is found, increment the counter\n            count += 1\n    \n    # Return the count of sublists containing the element\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    \"\"\"\n    This function takes a tuple of strings as input and returns a list of rear index elements of each string.\n\n    Args:\n        tup (tuple): A tuple of strings.\n\n    Returns:\n        list: A list of rear index elements of each string.\n    \"\"\"\n    return [s[-1] for s in tup]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters out the odd numbers from a given list of numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2!= 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    \"\"\"\n    Sorts the given array using shell sort algorithm.\n\n    Args:\n        arr (list): The input array to be sorted.\n\n    Returns:\n        list: The sorted array.\n    \"\"\"\n    # Initialize the gap size\n    gap = len(arr) // 2\n\n    # Continue the process until the gap size is greater than zero\n    while gap > 0:\n        # Iterate over the array starting from the gap size\n        for i in range(gap, len(arr)):\n            # Store the current element\n            temp = arr[i]\n            # Initialize the index for the previous gap\n            j = i\n            # Shift the previous elements to the right until a smaller element is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            # Place the current element at its correct position\n            arr[j] = temp\n        # Reduce the gap size by half for the next iteration\n        gap //= 2\n\n    # Return the sorted array\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date_str):\n    \"\"\"\n    This function takes a date string in the format 'yyyy-mm-dd' and returns the date in the format 'dd-mm-yyyy'.\n\n    Args:\n        date_str (str): The input date string.\n\n    Returns:\n        str: The date string in the 'dd-mm-yyyy' format.\n    \"\"\"\n    # Split the input date string into year, month, and day components\n    year, month, day = date_str.split('-')\n    \n    # Return the date string in the 'dd-mm-yyyy' format\n    return f'{day}-{month}-{year}'\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is the result of the bitwise AND operation between the corresponding elements of the input tuples.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the elementwise AND operation results.\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(t1)!= len(t2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    # Use a list comprehension to perform the bitwise AND operation on each pair of elements\n    result = [x & y for x, y in zip(t1, t2)]\n\n    # Convert the list to a tuple and return it\n    return tuple(result)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, h, k):\n    \"\"\"\n    This function calculates the directrix of a parabola given its vertex form.\n    \n    Parameters:\n    a (float): The coefficient of the squared term in the parabola's equation.\n    h (float): The x-coordinate of the vertex of the parabola.\n    k (float): The y-coordinate of the vertex of the parabola.\n    \n    Returns:\n    float: The y-coordinate of the directrix of the parabola.\n    \"\"\"\n    # The directrix of a parabola in vertex form is given by y = k - 1/(4a)\n    # We can calculate this directly from the given parameters\n    return k - 1/(4*a)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    \"\"\"\n    This function checks if two lists have at least one common element.\n\n    Args:\n        list1 (list): The first list to compare.\n        list2 (list): The second list to compare.\n\n    Returns:\n        bool: True if the lists have at least one common element, False otherwise.\n    \"\"\"\n    # Convert the lists to sets for efficient lookups\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Use the set intersection operation to find common elements\n    common = set1.intersection(set2)\n    \n    # If the intersection is not empty, return True; otherwise, return False\n    return bool(common)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, [4, 5]], [[4, 5], 6, 7, 8]]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\ndef check_greater(arr, num):\n    \"\"\"\n    Checks whether the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): A list of integers.\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is greater than all elements in the array, False otherwise.\n    \"\"\"\n    # Check if the number is greater than all elements in the array\n    return all(num > x for x in arr)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The last digit of the input number.\n    \"\"\"\n    return n % 10\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c, d):\n    \"\"\"\n    This function calculates the median length of a trapezium.\n\n    Parameters:\n    a (int): The length of the first side of the trapezium.\n    b (int): The length of the second side of the trapezium.\n    c (int): The length of the third side of the trapezium.\n    d (int): The length of the fourth side of the trapezium.\n\n    Returns:\n    int: The median length of the trapezium.\n    \"\"\"\n    # Sort the sides of the trapezium in ascending order\n    sides = sorted([a, b, c, d])\n    \n    # Calculate the median\n    n = len(sides)\n    if n % 2 == 0:\n        median = (sides[n//2 - 1] + sides[n//2]) / 2\n    else:\n        median = sides[n//2]\n    \n    return median\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\ndef neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A list of negative integers.\n    \"\"\"\n    return [i for i in lst if i < 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    \"\"\"\n    This function removes odd characters from a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with all odd characters removed.\n    \"\"\"\n    return \"\".join([char for char in s if ord(char) % 2 == 0])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\n\ndef count_bidirectional(pairs):\n    \"\"\"\n    This function counts the number of bidirectional tuple pairs in a given list of pairs.\n\n    Args:\n        pairs (list): A list of tuples, where each tuple represents a pair of numbers.\n\n    Returns:\n        int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    # Initialize a counter to store the number of bidirectional pairs\n    count = 0\n    \n    # Iterate over each pair in the list\n    for pair in pairs:\n        # Check if the pair is bidirectional by comparing it with its reverse\n        if pair == (pair[1], pair[0]):\n            # If the pair is bidirectional, increment the counter\n            count += 1\n    \n    # Return the total count of bidirectional pairs\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1]]]]}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport nltk\nfrom nltk import word_tokenize, pos_tag\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    This function finds the first adverb and its position in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the position of the first adverb and the adverb itself.\n    \"\"\"\n    \n    # Tokenize the sentence into words\n    words = word_tokenize(sentence)\n    \n    # Tag the parts of speech for each word\n    tagged_words = pos_tag(words)\n    \n    # Find the first adverb\n    for word, tag in tagged_words:\n        if tag in ['RB', 'RBR', 'RBS']:\n            # Return the position and the adverb\n            return (tagged_words.index((word, tag)), len(' '.join(words[:tagged_words.index((word, tag))])), word)\n    \n    # If no adverb is found, return None\n    return None\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a single integer.\n    The single integer is formed by concatenating the integers in the list.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: A single integer formed by concatenating the integers in the list.\n    \"\"\"\n    # Convert each integer in the list to a string\n    str_lst = [str(i) for i in lst]\n    \n    # Join the strings together\n    joined_str = ''.join(str_lst)\n    \n    # Convert the joined string back to an integer\n    result = int(joined_str)\n    \n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(size):\n    \"\"\"\n    This function calculates the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n    \"\"\"\n    # Calculate the surface area of the cube\n    surface_area = 6 * (size ** 2)\n    \n    # Return the calculated surface area\n    return surface_area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    \"\"\"\n    This function performs index-wise multiplication of elements in two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the result of index-wise multiplication.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Use zip to iterate over the tuples in parallel\n    # and a list comprehension to perform the multiplication\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n    \n    return result\n\n# Test the function\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))\nassert index_multiplication(tuple1, tuple2) == ((6, 21), (12, 45), (2, 9), (7, 30))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    \"\"\"\n    This function calculates the ratio of positive numbers in an array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of positive numbers in the array.\n    \"\"\"\n    # Count the total number of positive numbers in the array\n    positive_count = sum(1 for num in arr if num > 0)\n    \n    # Calculate the total number of elements in the array\n    total_count = len(arr)\n    \n    # Calculate the ratio of positive numbers\n    ratio = positive_count / total_count if total_count!= 0 else 0\n    \n    return ratio\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function counts the occurrence of all elements of list in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search in.\n    lst (list): The list to search for.\n\n    Returns:\n    int: The total count of elements from lst in tup.\n    \"\"\"\n    # Convert the tuple to a list to make it mutable\n    tup_list = list(tup)\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate over each element in the list\n    for elem in lst:\n        # Count the occurrences of the element in the tuple\n        count += tup_list.count(elem)\n    \n    # Return the total count\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to the nth number.\n\n    Args:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    # Initialize the first three Perrin numbers\n    p1, p2, p3 = 0, 1, 2\n    \n    # Initialize the sum of Perrin numbers\n    total_sum = p1 + p2 + p3\n    \n    # Calculate the sum of the remaining Perrin numbers\n    for _ in range(3, n + 1):\n        # Calculate the next Perrin number\n        p1, p2, p3 = p2, p3, p1 + p2 + p3\n        \n        # Add the new Perrin number to the total sum\n        total_sum += p3\n    \n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of each number.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of cubes of the input numbers.\n    \"\"\"\n    return [num ** 3 for num in nums]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(string_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to be extracted.\n\n    Returns:\n        list: A list of strings of specified size.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    \n    # Iterate over each string in the input list\n    for string in string_list:\n        # Check if the length of the current string is equal to the specified size\n        if len(string) == size:\n            # If the length is equal, append the string to the extracted_strings list\n            extracted_strings.append(string)\n    \n    # Return the list of extracted strings\n    return extracted_strings\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],8)==['practice','solution']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(s):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return s.replace(' ', '')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\ndef text_match_wordz(text):\n    return 'z' in text\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n\n    Args:\n        monthnumb (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    # Define a dictionary to store the number of days in each month\n    month_days = {\n        1: 31,  # January\n        2: 28,  # February\n        3: 31,  # March\n        4: 30,  # April\n        5: 31,  # May\n        6: 30,  # June\n        7: 31,  # July\n        8: 31,  # August\n        9: 30,  # September\n        10: 31,  # October\n        11: 30,  # November\n        12: 31  # December\n    }\n\n    # Check if the given month number exists in the dictionary\n    if monthnumb in month_days:\n        # Return True if the month number contains 31 days, False otherwise\n        return month_days[monthnumb] == 31\n    else:\n        # Return False if the month number does not exist in the dictionary\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    This function takes a list of strings as input, reverses each string in the list, \n    and returns the resulting list of reversed strings.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        list: A list of strings where each string is the reverse of the corresponding string in the input list.\n    \"\"\"\n    # Initialize an empty list to store the reversed strings\n    reversed_list = []\n    \n    # Iterate over each string in the input list\n    for string in string_list:\n        # Reverse the string using slicing and append it to the reversed list\n        reversed_list.append(string[::-1])\n    \n    # Return the list of reversed strings\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    \"\"\"\n    This function finds the sublist with the minimum length in a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n\n    # Find the minimum length\n    min_len = min(len(sublist) for sublist in lst)\n\n    # Find the first sublist with the minimum length\n    min_sublist = next(sublist for sublist in lst if len(sublist) == min_len)\n\n    return min_sublist\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The sum of even factors of the input number.\n    \"\"\"\n    # Initialize the sum of even factors to 0\n    sum_even_factors = 0\n    \n    # Iterate over all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to the sum of even factors\n                sum_even_factors += i\n    \n    # Return the sum of even factors\n    return sum_even_factors\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    \"\"\"\n    This function calculates the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with all uppercase substrings removed.\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i].islower():\n            result += s[i]\n        elif i < len(s) - 1 and s[i+1].islower():\n            result += s[i]\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of upper case characters in the string.\n    \"\"\"\n    return sum(1 for char in s if char.isupper())\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list containing the first element of each sublist.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lists]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\nimport itertools\n\ndef combinations_list(lst):\n    \"\"\"\n    This function generates all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of lists, where each sublist is a combination of the elements of the input list.\n    \"\"\"\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Iterate over the range of the length of the input list\n    for r in range(len(lst) + 1):\n        # Use itertools.combinations to generate all combinations of the input list with length r\n        # and extend the combinations list with the generated combinations\n        combinations.extend(itertools.combinations(lst, r))\n    \n    # Convert the combinations to lists (because itertools.combinations returns tuples)\n    # and return the list of combinations\n    return [list(c) for c in combinations]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The maximum product of a subarray.\n\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    \"\"\"\n    Drops empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The dictionary to process.\n\n    Returns:\n        dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(t):\n    \"\"\"\n    This function calculates the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        t (tuple): A tuple of integers.\n\n    Returns:\n        tuple: A tuple containing the pairwise sum of the neighboring elements.\n\n    Raises:\n        ValueError: If the input tuple has less than 3 elements.\n    \"\"\"\n    if len(t) < 3:\n        raise ValueError(\"Input tuple must have at least 3 elements.\")\n\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\ndef max_product(nums):\n    \"\"\"\n    This function calculates the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The maximum product of an increasing subsequence.\n    \"\"\"\n    if not nums:\n        return 0\n\n    n = len(nums)\n    dp = [[0, 0] for _ in range(n)]\n\n    # Initialize the first element of dp\n    dp[0][0] = nums[0]\n    dp[0][1] = nums[0]\n\n    # Fill the dp table\n    for i in range(1, n):\n        # Initialize the maximum and minimum product ending at the current position\n        max_product = float('-inf')\n        min_product = float('inf')\n        # Calculate the maximum and minimum product ending at the current position\n        for j in range(i):\n            max_product = max(max_product, dp[j][0] * nums[i])\n            min_product = min(min_product, dp[j][1] * nums[i])\n        # Update the dp table\n        dp[i][0] = max_product\n        dp[i][1] = min_product\n\n    # Return the maximum product\n    return max(dp[-1][0], dp[-1][1])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\ndef find_remainder(arr, n):\n    \"\"\"\n    This function calculates the product of the array multiplication modulo n.\n\n    Args:\n        arr (list): A list of integers.\n        n (int): The modulo number.\n\n    Returns:\n        int: The product of the array multiplication modulo n.\n    \"\"\"\n    # Initialize the result with 1\n    result = 1\n    \n    # Iterate over each number in the array\n    for num in arr:\n        # Calculate the remainder of the current number modulo n\n        # and multiply it with the result\n        result = (result * num) % n\n    \n    # Return the final result\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list, target_tuple_list):\n    \"\"\"\n    This function finds the intersection of elements in the given tuple list \n    irrespective of their order.\n\n    Args:\n        tuple_list (list): A list of tuples.\n        target_tuple_list (list): A list of target tuples.\n\n    Returns:\n        set: A set of tuples that are common in both tuple_list and target_tuple_list.\n    \"\"\"\n    \n    # Convert the list of tuples into a set for efficient lookups\n    tuple_set = set(tuple(sorted(t)) for t in tuple_list)\n    \n    # Initialize an empty set to store the intersection\n    intersection = set()\n    \n    # Iterate over each tuple in the target tuple list\n    for target_tuple in target_tuple_list:\n        # Sort the tuple to ensure consistent ordering\n        sorted_target_tuple = tuple(sorted(target_tuple))\n        \n        # Check if the sorted tuple is in the set of tuples\n        if sorted_target_tuple in tuple_set:\n            # If it is, add it to the intersection set\n            intersection.add(target_tuple)\n    \n    # Return the intersection set\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    \"\"\"\n    Checks whether the given list contains consecutive numbers or not.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check if the list contains consecutive numbers\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i + 1] - sorted_lst[i]!= 1:\n            return False\n    \n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(s, old, new):\n    \"\"\"\n    Replaces all occurrences of 'old' with 'new' in the string's'.\n\n    Args:\n        s (str): The input string.\n        old (str): The character to be replaced.\n        new (str): The character to replace with.\n\n    Returns:\n        str: The modified string with 'old' replaced by 'new'.\n    \"\"\"\n    return s.replace(old, new)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    \"\"\"\n    This function calculates the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    \"\"\"\n    # Check if the array is empty\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty\")\n\n    # Find the smallest value in the array\n    smallest = min(arr)\n    \n    # Find the largest value in the array\n    largest = max(arr)\n    \n    # Return the sum of the largest and smallest value\n    return smallest + largest\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    \"\"\"\n    Sorts a dictionary by its values in descending order.\n\n    Args:\n        counter (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples containing the keys and their corresponding values in descending order.\n\n    \"\"\"\n    # Use the sorted function to sort the dictionary items by their values in descending order\n    sorted_items = sorted(counter.items(), key=lambda item: item[1], reverse=True)\n    \n    return sorted_items\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    This function converts the given string to lower case.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The input string in lower case.\n    \"\"\"\n    return s.lower()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to easily access the first character\n    str_n = str(n)\n    \n    # The first digit is the first character in the string\n    first_digit = int(str_n[0])\n    \n    return first_digit\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    \"\"\"\n    Removes all lowercase substrings from a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with all lowercase substrings removed.\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if s[i].isupper():\n            result += s[i]\n        elif s[i].islower():\n            if i > 0 and s[i-1].isupper():\n                result += s[i]\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["AbCdEfGhIjKlMnOpQrStUvWxYz"]]}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\ndef Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A list of odd integers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\ndef find_Odd_Pair(arr, target):\n    \"\"\"\n    This function counts the number of pairs in the given array whose XOR value is odd.\n\n    Parameters:\n    arr (list): The input list of integers.\n    target (int): The target number.\n\n    Returns:\n    int: The number of pairs whose XOR value is odd.\n    \"\"\"\n    count = 0\n    xor_dict = {}\n    \n    # Iterate over the array\n    for num in arr:\n        # Calculate the XOR of the current number and the target\n        xor_val = num ^ target\n        \n        # If the XOR value is already in the dictionary, increment the count\n        if xor_val in xor_dict:\n            count += xor_dict[xor_val]\n            # Increment the count of the current XOR value in the dictionary\n            xor_dict[xor_val] += 1\n        else:\n            # If the XOR value is not in the dictionary, add it with a count of 1\n            xor_dict[xor_val] = 1\n    \n    # Return the total count of pairs whose XOR value is odd\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\ndef difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers \n    and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_natural_numbers = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_natural_numbers\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\ndef toggle_string(s):\n    \"\"\"\n    This function takes a string as input and returns a new string with all characters toggled in case.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: A new string with all characters toggled in case.\n    \"\"\"\n    return s.swapcase()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\ndef max_sub_array_sum(lst, target_sum):\n    \"\"\"\n    This function calculates the sum of the largest contiguous sublist \n    in the given list that sums up to the target value.\n\n    Args:\n        lst (list): A list of integers.\n        target_sum (int): The target sum.\n\n    Returns:\n        int: The sum of the largest contiguous sublist that sums up to the target value.\n    \"\"\"\n    max_sum = float('-inf')  # Initialize max_sum as negative infinity\n    current_sum = 0  # Initialize current_sum as 0\n\n    for num in lst:\n        current_sum += num  # Add the current number to current_sum\n        if current_sum == target_sum:  # If current_sum equals the target_sum\n            max_sum = max(max_sum, current_sum)  # Update max_sum\n            current_sum = 0  # Reset current_sum\n\n    return max_sum  # Return the maximum sum found\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\ndef digit_distance_nums(a, b):\n    \"\"\"\n    This function calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between a and b.\n    \"\"\"\n    # Calculate the absolute difference between a and b\n    diff = abs(a - b)\n    \n    # Convert the difference to a string to easily iterate over each digit\n    str_diff = str(diff)\n    \n    # Initialize a variable to store the sum of the per-digit difference\n    total_diff = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_diff:\n        # Convert the character back to an integer and subtract the corresponding digit of a and b\n        total_diff += abs(int(digit) - (a % 10))\n        # Move to the next digit\n        a //= 10\n    \n    return total_diff\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\ndef union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input, finds their union, and returns the result in sorted order.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements of the input tuples, sorted in ascending order.\n    \"\"\"\n    # Convert the input tuples to sets to remove duplicates and improve lookup efficiency\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n\n    # Convert the union set back to a tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union_set))\n\n    return sorted_union\n\n# Test the function\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\ndef extract_values(s):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    values = []\n    in_quotes = False\n    current_value = ''\n    for char in s:\n        if char == '\"':\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n        if in_quotes and not current_value.strip():\n            values.append(current_value)\n            current_value = ''\n    return values\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yellow\""]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\ndef Find_Max_Length(lists):\n    \"\"\"\n    This function finds the length of the longest sublist in a list of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The length of the longest sublist.\n    \"\"\"\n    # Initialize the maximum length to 0\n    max_length = 0\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in lists:\n        # Update the maximum length if the current sublist is longer\n        max_length = max(max_length, len(sublist))\n    \n    # Return the maximum length\n    return max_length\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    This function calculates the number of possible unordered pairs in a list where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The number of possible unordered pairs with unequal elements.\n    \"\"\"\n    # Calculate the total number of pairs using the combination formula\n    total_pairs = n * (n - 1) // 2\n    \n    # Calculate the number of pairs with equal elements\n    equal_pairs = sum(1 for i in range(len(lst)) for j in range(i + 1, len(lst)) if lst[i] == lst[j])\n    \n    # Subtract the number of pairs with equal elements from the total number of pairs\n    unequal_pairs = total_pairs - equal_pairs\n    \n    return unequal_pairs\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2]]}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\ndef sum_digits(n):\n    \"\"\"\n    This function calculates the sum of the digits of a non-negative integer.\n\n    Args:\n        n (int): A non-negative integer.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the integer to a string to easily iterate over each digit\n    str_n = str(n)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_n:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    # Return the sum of the digits\n    return sum_of_digits\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\ndef split(s):\n    \"\"\"\n    Splits a string into a list of characters.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list: A list of characters.\n    \"\"\"\n    return list(s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\ndef issort_list(lst):\n    \"\"\"\n    Checks whether a specified list is sorted or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return lst == sorted(lst)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A list of lists with each sublist sorted.\n    \"\"\"\n    # Use list comprehension to create a new list with sorted sublists\n    return [sorted(sublist) for sublist in lst]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\ndef empty_list(n):\n    \"\"\"\n    Creates a list of n empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of n empty dictionaries.\n    \"\"\"\n    return [{},{} for _ in range(n)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\ndef two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input, removes duplicates, \n    and returns a list of two unique numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of two unique numbers.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    \n    # Check if the set has at least two unique numbers\n    if len(unique_nums) < 2:\n        raise ValueError(\"The list must have at least two unique numbers\")\n    \n    # Convert the set back to a list and sort it\n    unique_nums = sorted(list(unique_nums))\n    \n    # Return the first two unique numbers\n    return unique_nums[:2]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    # Import the math module for pi\n    import math\n\n    # Calculate the surface area using the formula 2 * pi * r^2 + 2 * pi * r * h\n    surface_area = 2 * math.pi * radius**2 + 2 * math.pi * radius * height\n\n    # Return the surface area\n    return surface_area\n\n# Test the function\nassert round(surfacearea_cylinder(10,5), 2) == 942.45\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\ndef unique_product(lst):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of unique numbers in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(lst)\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate over each unique number in the set\n    for num in unique_nums:\n        # Multiply the product by the current number\n        product *= num\n    \n    # Return the final product\n    return product\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\ndef is_Sub_Array(main_array, sub_array):\n    \"\"\"\n    Checks whether a sub_array is a sublist of main_array or not.\n\n    Args:\n        main_array (list): The main list to be checked.\n        sub_array (list): The sub list to be checked.\n\n    Returns:\n        bool: True if sub_array is a sublist of main_array, False otherwise.\n    \"\"\"\n    # Check if the length of sub_array is greater than main_array\n    if len(sub_array) > len(main_array):\n        return False\n    \n    # Iterate over the main_array with a sliding window of size equal to sub_array\n    for i in range(len(main_array) - len(sub_array) + 1):\n        # Check if the current window matches the sub_array\n        if main_array[i:i+len(sub_array)] == sub_array:\n            return True\n    \n    # If no match is found, return False\n    return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A flat list containing elements from the input lists in interleaved order.\n    \"\"\"\n    # Initialize an empty list to store the interleaved result\n    result = []\n    \n    # Use zip to iterate over the three lists in parallel\n    for elem1, elem2, elem3 in zip(list1, list2, list3):\n        # Append each element to the result list\n        result.append(elem1)\n        result.append(elem2)\n        result.append(elem3)\n    \n    # Return the interleaved list\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\ndef last_Digit_Factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number and returns the last digit.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The last digit of the factorial of the input number.\n    \"\"\"\n    # Initialize the factorial result\n    factorial = 1\n    \n    # Calculate the factorial\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return factorial % 10\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.5]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\ndef find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    This function finds the dissimilar elements in two given tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements from both tuples.\n    \"\"\"\n    # Convert the tuples to sets for efficient lookups\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find the elements that are in one set but not the other\n    dissimilar = (element for element in set1 if element not in set2) | (element for element in set2 if element not in set1)\n\n    # Convert the dissimilar elements back to a tuple and return it\n    return tuple(dissimilar)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\ndef surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the edge of the square base.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = (base_edge ** 2 + height ** 2) ** 0.5\n    \n    # Calculate the area of the square base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of one triangular face\n    triangular_area = 0.5 * base_edge * slant_height\n    \n    # Calculate the total surface area\n    total_area = base_area + 4 * triangular_area\n    \n    return total_area\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\ndef extract_even(nested_tuple):\n    \"\"\"\n    This function removes uneven elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple: A tuple containing mixed data types, including integers and tuples.\n\n    Returns:\n        A new tuple with uneven elements removed.\n    \"\"\"\n    # Initialize an empty list to store the even elements\n    even_elements = []\n    \n    # Initialize an empty list to store the even sub-tuples\n    even_sub_tuples = []\n    \n    # Iterate over each element in the nested tuple\n    for element in nested_tuple:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If the integer is even, add it to the list of even elements\n            if element % 2 == 0:\n                even_elements.append(element)\n        # Check if the element is a tuple\n        elif isinstance(element, tuple):\n            # If the tuple is even, add it to the list of even sub-tuples\n            if len(element) % 2 == 0:\n                even_sub_tuples.append(element)\n    \n    # Combine the even elements and even sub-tuples into a single tuple\n    result = tuple(even_elements + even_sub_tuples)\n    \n    # Return the resulting tuple\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n\ndef my_dict(input_dict):\n    \"\"\"\n    Checks if the input dictionary is empty.\n\n    Args:\n        input_dict (dict): The dictionary to be checked.\n\n    Returns:\n        bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    return len(input_dict) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    Returns the n most expensive items in the given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries, each containing 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items, sorted in descending order by price.\n    \"\"\"\n    # First, we sort the dataset in descending order by price\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    \n    # Then, we return the first n items from the sorted dataset\n    return sorted_dataset[:n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\ndef catalan_number(n: int) -> int:\n    \"\"\"\n    This function calculates the nth Catalan number.\n\n    Args:\n    n (int): The position of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    # Initialize a list to store the Catalan numbers\n    catalan = [0]*(n+1)\n    \n    # Base cases\n    catalan[0] = 1\n    \n    # Calculate the Catalan numbers iteratively\n    for i in range(1, n+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j]*catalan[i-j-1]\n    \n    # Return the nth Catalan number\n    return catalan[n]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\ndef split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which the list is split.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n    \"\"\"\n    # Check if n is within the bounds of the list\n    if n < 0 or n >= len(arr):\n        raise ValueError(\"n is out of range\")\n\n    # Split the list at the nth element\n    first_part = arr[:n]\n    second_part = arr[n:]\n\n    # Add the first part to the end of the second part\n    result = second_part + first_part\n\n    return result\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\ndef big_diff(lst):\n    \"\"\"\n    This function calculates the difference between the largest and smallest value in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n    \n    return max(lst) - min(lst)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\ndef list_to_tuple(input_list):\n    \"\"\"\n    This function converts a list into a tuple.\n\n    Args:\n        input_list (list): The list to be converted.\n\n    Returns:\n        tuple: The tuple representation of the input list.\n    \"\"\"\n    return tuple(input_list)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\nimport math\n\ndef perfect_squares(start, end):\n    \"\"\"\n    This function finds all perfect squares between two given numbers.\n\n    Args:\n        start (int): The start of the range (inclusive).\n        end (int): The end of the range (inclusive).\n\n    Returns:\n        list: A list of perfect squares between start and end.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n\n    # Iterate over the range from start to end (inclusive)\n    for i in range(start, end + 1):\n        # Calculate the square root of the current number\n        sqrt = math.sqrt(i)\n        \n        # Check if the square root is an integer (i.e., it's a perfect square)\n        if sqrt == int(sqrt):\n            # If it's a perfect square, append it to the list\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\ndef swap_List(lst):\n    \"\"\"\n    This function swaps the first and last elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list has at least two elements\n    if len(lst) > 1:\n        # Swap the first and last elements using tuple unpacking\n        lst[0], lst[-1] = lst[-1], lst[0]\n    # Return the modified list\n    return lst\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radial distance from the origin.\n    theta (float): The angle in radians from the positive x-axis.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y) and the complex number representing the point in the complex plane.\n    \"\"\"\n    # Calculate the rectangular coordinates using the formulas x = r * cos(theta) and y = r * sin(theta)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n\n    # Represent the point in the complex plane as a complex number\n    complex_point = complex(x, y)\n\n    # Return the rectangular coordinates and the complex number\n    return (x, y), complex_point\n\n# Test the function\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\ndef removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n\ndef diff_even_odd(lst):\n    \"\"\"\n    This function calculates the difference between the first even and first odd number in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The difference between the first even and first odd number in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains no even or odd numbers.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"The list is empty\")\n\n    # Separate even and odd numbers\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2!= 0]\n\n    # Check if there are any even or odd numbers in the list\n    if not evens or not odds:\n        raise ValueError(\"The list contains no even or odd numbers\")\n\n    # Return the difference between the first even and first odd number\n    return evens[0] - odds[0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\n\ndef min_Swaps(s1, s2):\n    \"\"\"\n    This function calculates the minimum number of swaps required to convert one binary number \n    represented as a string to another.\n\n    Parameters:\n    s1 (str): The initial binary number.\n    s2 (str): The target binary number.\n\n    Returns:\n    int: The minimum number of swaps required.\n    \"\"\"\n    \n    # Initialize variables to store the number of mismatches and the number of swaps\n    mismatches = 0\n    swaps = 0\n    \n    # Iterate over the characters in the strings\n    for i in range(len(s1)):\n        # If the characters at the current position are different\n        if s1[i]!= s2[i]:\n            # Increment the number of mismatches\n            mismatches += 1\n            \n            # If the number of mismatches is greater than 1, we need to swap\n            if mismatches > 1:\n                # Increment the number of swaps\n                swaps += 1\n                \n                # Reset the number of mismatches\n                mismatches = 0\n                \n    # If there are remaining mismatches, we need to swap them\n    if mismatches > 0:\n        swaps += 1\n        \n    # Return the minimum number of swaps\n    return swaps\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["111", "000"]], "plus_fail_tests": [["1111111111111111111101110111111001111100111111110111111111111001", "0000111111111111111111001111111111111111111111101111111001111000"]]}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\nimport sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        int: The size in bytes of the tuple.\n    \"\"\"\n    return sys.getsizeof(t)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The position of the element to be found.\n\n    Returns:\n    int: The kth element from the combined array.\n\n    \"\"\"\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    \n    # Traverse both arrays\n    while i < len(arr1) and j < len(arr2):\n        # If current element in arr1 is smaller, move to the next element in arr1\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If current element in arr2 is smaller, move to the next element in arr2\n        elif arr2[j] < arr1[i]:\n            j += 1\n        # If current elements are equal, move to the next elements in both arrays\n        else:\n            i += 1\n            j += 1\n    \n    # If we have traversed all elements in arr1, the kth element must be in arr2\n    if i == len(arr1):\n        return arr2[j - 1]\n    # If we have traversed all elements in arr2, the kth element must be in arr1\n    elif j == len(arr2):\n        return arr1[i - 1]\n    # If the kth element is in the remaining elements of arr1\n    elif i + 1 <= k:\n        return arr1[k - i]\n    # If the kth element is in the remaining elements of arr2\n    else:\n        return arr2[k - j]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n\ndef armstrong_number(n):\n    \"\"\"\n    Checks whether the given number is armstrong or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is armstrong, False otherwise.\n    \"\"\"\n    # Convert the number to string to calculate the power of each digit\n    str_n = str(n)\n    # Calculate the power of each digit\n    power = len(str_n)\n    # Initialize the result\n    result = 1\n    # Calculate the result\n    for digit in str_n:\n        result *= int(digit) ** power\n    # Check if the result is equal to the original number\n    return result == n\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\ndef sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers using the formula n*(n+1)/2\n    total_sum = n * (n + 1) // 2\n    \n    # Calculate the average by dividing the sum by n\n    average = total_sum / n\n    \n    # Return the sum and average as a tuple\n    return total_sum, average\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\ndef is_Even(n):\n    \"\"\"\n    Checks whether the given number is even or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\ndef first_repeated_char(s):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string. If no character is repeated, returns None.\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\ndef get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to n.\n\n    A lucid number is a number that is the sum of its proper divisors, excluding the number itself.\n\n    :param n: The upper limit for the lucid numbers.\n    :return: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"Check if a number is lucid.\"\"\"\n        return sum(i for i in range(1, num) if num % i == 0) == num\n\n    return [i for i in range(1, n + 1) if is_lucid(i)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\ndef reverse_words(s):\n    \"\"\"\n    Reverses the order of words in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The string with words reversed.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words into a string\n    reversed_string =''.join(reversed_words)\n    \n    return reversed_string\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[" a a a a a a  "]]}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\ndef prime_num(n):\n    \"\"\"\n    Checks if a given integer is a prime number.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\nimport math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\nimport re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, \n    a start index and an end index.\n\n    Args:\n        string (str): The string to search in.\n        pattern (str): The regex pattern to search for.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\nimport math\n\ndef sum_Of_product(n):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): The number of consecutive binomial coefficients to consider.\n\n    Returns:\n        int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(n):\n        # Calculate the binomial coefficient using the math.comb function\n        binomial_coefficient = math.comb(n, i)\n        \n        # Add the product of the current binomial coefficient and the next one to the total sum\n        total_sum += binomial_coefficient * math.comb(n, i + 1)\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n\n    The Bell numbers are a sequence of numbers that arise in combinatorial mathematics,\n    particularly in the study of recursive structures. They are named after the mathematician\n    \u00c9douard Lucas, who introduced them in a paper on partitioning.\n\n    The Bell numbers are defined recursively as follows:\n    B(0) = 1\n    B(n) = \u03a3(B(k) * C(n-1, k)) for k = 1 to n\n\n    where C(n, k) is the binomial coefficient, defined as:\n    C(n, k) = n! / (k! * (n-k)!)\n\n    :param n: The position of the Bell number to calculate\n    :return: The nth Bell number\n    \"\"\"\n    # Base case: B(0) = 1\n    if n == 0:\n        return 1\n\n    # Initialize the list to store the Bell numbers\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n\n    # Calculate the Bell numbers iteratively\n    for i in range(1, n + 1):\n        # Initialize the sum for the current Bell number\n        total = 0\n        # Calculate the sum using the binomial coefficient\n        for k in range(1, i + 1):\n            total += bell_numbers[k] * math.comb(i - 1, k - 1)\n        # Store the current Bell number\n        bell_numbers[i] = total\n\n    # Return the nth Bell number\n    return bell_numbers[n]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\ndef remove_kth_element(lst, k):\n    \"\"\"\n    This function removes the k'th element from a given list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The position of the element to be removed.\n\n    Returns:\n        list: A new list with the k'th element removed.\n    \"\"\"\n    # Check if k is within the bounds of the list\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k is out of range\")\n    \n    # Use list slicing to create a new list without the k'th element\n    return lst[:k-1] + lst[k:]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\ndef merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element \n    of each sublist and the second one has the second.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list has the first element \n        of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize two empty lists to store the first and second elements\n    first_elements = []\n    second_elements = []\n\n    # Iterate over each sublist in the input list\n    for sub_list in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sub_list[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sub_list[1])\n\n    # Return a list containing the first_elements and second_elements lists\n    return [first_elements, second_elements]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\ndef max_of_nth(matrix, n):\n    \"\"\"\n    This function returns the maximum value in the nth column of a given matrix.\n\n    Args:\n        matrix (list of lists): A 2D list representing the matrix.\n        n (int): The column index for which the maximum value is to be found.\n\n    Returns:\n        int: The maximum value in the nth column.\n\n    Raises:\n        IndexError: If the column index is out of range.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n\n    # Check if the column index is within the valid range\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column index out of range\")\n\n    # Initialize max_value with the first element of the nth column\n    max_value = matrix[0][n]\n\n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Update max_value if the current element is greater\n        if row[n] > max_value:\n            max_value = row[n]\n\n    return max_value\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\ndef cummulative_sum(tuple_list):\n    \"\"\"\n    This function calculates the cumulative sum of all values present in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples containing integers.\n\n    Returns:\n        int: The cumulative sum of all values in the tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    \n    # Iterate over each tuple in the tuple list\n    for tup in tuple_list:\n        # Iterate over each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumulative_sum += val\n    \n    # Return the cumulative sum\n    return cumulative_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\ndef tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo operation.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the element wise modulo of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n    \"\"\"\n    # Check if the input tuples are of the same length\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    # Use a list comprehension to perform the element wise modulo operation\n    # The modulo operator (%) is used to get the remainder of the division of the elements\n    result = tuple(i % j for i, j in zip(tuple1, tuple2))\n\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\ndef div_list(list1, list2):\n    \"\"\"\n    This function divides two lists element-wise.\n\n    Args:\n        list1 (list): The dividend list.\n        list2 (list): The divisor list.\n\n    Returns:\n        list: A new list containing the division of corresponding elements from list1 and list2.\n\n    Raises:\n        ZeroDivisionError: If any element in list2 is zero.\n    \"\"\"\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # Check if the divisor is zero\n        if list2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        # Calculate the division and append the result to the list\n        result.append(list1[i] / list2[i])\n\n    # Return the list of results\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\ndef average_tuple(tuples):\n    \"\"\"\n    This function calculates the average value for each tuple in a given tuple of tuples.\n\n    Args:\n        tuples (tuple of tuples): A tuple containing multiple tuples.\n\n    Returns:\n        list: A list of averages, one for each tuple in the input.\n\n    \"\"\"\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input tuple of tuples\n    for tup in tuples:\n        # Calculate the sum of the tuple\n        total = sum(tup)\n        \n        # Calculate the average by dividing the sum by the number of elements in the tuple\n        avg = total / len(tup)\n        \n        # Append the average to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\ndef move_num(s):\n    \"\"\"\n    This function moves all the numbers to the end of the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The modified string with numbers at the end.\n    \"\"\"\n    # Initialize two lists to store non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it's a digit, add it to the numeric_chars list\n            numeric_chars.append(char)\n        else:\n            # If it's not a digit, add it to the non_numeric_chars list\n            non_numeric_chars.append(char)\n\n    # Join the non-numeric characters into a string\n    non_numeric_str = ''.join(non_numeric_chars)\n    # Join the numeric characters into a string\n    numeric_str = ''.join(numeric_chars)\n\n    # Return the modified string with numbers at the end\n    return non_numeric_str + numeric_str\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\ndef largest_subset(nums):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers \n    so that every pair is divisible.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The size of the largest subset.\n    \"\"\"\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Initialize variables to keep track of the current subset size and the maximum subset size\n    current_subset_size = 1\n    max_subset_size = 1\n    \n    # Iterate over the sorted list\n    for i in range(1, len(nums)):\n        # If the current number is divisible by the previous number, increment the current subset size\n        if nums[i] % nums[i - 1] == 0:\n            current_subset_size += 1\n        # If the current number is not divisible by the previous number, update the maximum subset size and reset the current subset size\n        else:\n            max_subset_size = max(max_subset_size, current_subset_size)\n            current_subset_size = 1\n    \n    # Update the maximum subset size one last time\n    max_subset_size = max(max_subset_size, current_subset_size)\n    \n    return max_subset_size\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\ndef get_median(list1, list2, size):\n    \"\"\"\n    This function calculates the median of two sorted lists of the same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        size (int): The size of the lists.\n\n    Returns:\n        float: The median of the combined list.\n\n    Raises:\n        ValueError: If the size of the lists is not equal to the specified size.\n    \"\"\"\n\n    # Check if the size of the lists is equal to the specified size\n    if len(list1)!= size or len(list2)!= size:\n        raise ValueError(\"The size of the lists must be equal to the specified size.\")\n\n    # Combine the two lists into one\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    # Calculate the median\n    if size % 2 == 0:\n        # If the size is even, the median is the average of the two middle numbers\n        median = (combined_list[size // 2 - 1] + combined_list[size // 2]) / 2\n    else:\n        # If the size is odd, the median is the middle number\n        median = combined_list[size // 2]\n\n    return median\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\ndef is_upper(s):\n    \"\"\"\n    This function converts a given string to uppercase.\n\n    Args:\n        s (str): The input string to be converted.\n\n    Returns:\n        str: The input string in uppercase.\n    \"\"\"\n    return s.upper()\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\ndef nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        list: A list of n-th powers of the input numbers.\n    \"\"\"\n    # Use list comprehension to raise each number in the list to the power of n\n    return [num ** n for num in nums]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\nimport math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle.\n\n    Args:\n    radius (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle, or None if the radius is negative.\n    \"\"\"\n    if radius < 0:\n        return None\n    \n    # The largest triangle that can be inscribed in a semicircle has a height equal to the radius\n    # and a base equal to the diameter of the semicircle\n    base = 2 * radius\n    height = radius\n    \n    # Calculate the area of the triangle using the formula 0.5 * base * height\n    area = 0.5 * base * height\n    \n    return area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\ndef Split(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of even integers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\ndef replace_spaces(s):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced.\n    \"\"\"\n    return s.replace(' ', '%20')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\ndef replace_spaces(s):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced by underscores and vice versa.\n    \"\"\"\n    return s.replace(' ', '_').replace('_','')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["  Jumanji The Jungle  "]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\ndef move_zero(nums):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: The input list with all zeroes moved to the end.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    non_zero_ptr = 0\n    zero_ptr = 0\n\n    # Traverse the list\n    while zero_ptr < len(nums):\n        # If the current element is not zero, swap it with the element at the non_zero_ptr\n        if nums[zero_ptr]!= 0:\n            nums[non_zero_ptr], nums[zero_ptr] = nums[zero_ptr], nums[non_zero_ptr]\n            # Move the non_zero_ptr forward\n            non_zero_ptr += 1\n        # Move the zero_ptr forward\n        zero_ptr += 1\n\n    return nums\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\ndef get_coordinates(coord):\n    \"\"\"\n    This function takes a coordinate tuple as input and returns a list of all adjacent coordinates.\n\n    Args:\n        coord (tuple): A tuple containing two integers representing the x and y coordinates.\n\n    Returns:\n        list: A list of tuples, each representing an adjacent coordinate.\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coords.append((x + dx, y + dy))\n    return adjacent_coords\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\ndef pair_xor_Sum(lst, n):\n    \"\"\"\n    This function calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The number of pairs to consider.\n\n    Returns:\n        int: The sum of XOR of all pairs of numbers in the given list.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate over the list to consider each number as the first number in the pair\n    for i in range(len(lst)):\n        # Iterate over the list again to consider each number as the second number in the pair\n        for j in range(i+1, len(lst)):\n            # Calculate the XOR of the current pair and add it to the result\n            result += lst[i] ^ lst[j]\n    \n    # Return the result\n    return result\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\ndef noprofit_noloss(amount, cost):\n    \"\"\"\n    Checks whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The total amount.\n        cost (float): The cost.\n\n    Returns:\n        bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    # Calculate the profit\n    profit = amount - cost\n    \n    # Check if the profit is zero\n    if profit == 0:\n        # Calculate the loss\n        loss = cost - amount\n        \n        # Check if the loss is zero\n        if loss == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\nimport heapq\n\ndef heap_sort(lst):\n    \"\"\"\n    Sorts the given list in ascending order using the heap sort algorithm.\n\n    Args:\n        lst (list): The list to be sorted.\n\n    Returns:\n        list: The sorted list.\n    \"\"\"\n    # Convert the list into a heap\n    heapq.heapify(lst)\n    \n    # Initialize an empty list to store the sorted elements\n    sorted_lst = []\n    \n    # While the heap is not empty, pop the smallest element and add it to the sorted list\n    while lst:\n        sorted_lst.append(heapq.heappop(lst))\n    \n    # Return the sorted list\n    return sorted_lst\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n\ndef wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index given the wind velocity in km/h and a temperature in Celsius.\n\n    Args:\n        velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in Celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    # Wind chill index formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    \n    # Round the result to the next integer\n    return round(wind_chill_index)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\n\ndef remove_parenthesis(lst):\n    return lst[0].replace(\"(\", \"\").replace(\")\", \"\")\n\n# Test the function\nprint(remove_parenthesis([\"python (chrome)\"]))  # Output: \"python\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\ndef sample_nam(names):\n    \"\"\"\n    This function calculates the sum of the lengths of the names in the list\n    after removing the names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of names\n\n    Returns:\n        int: The sum of the lengths of the names after filtering\n    \"\"\"\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n    \n    # Calculate the sum of the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\ndef is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n    n (int): The position of the nonagonal number to calculate.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    \"\"\"\n    # The formula for the nth nonagonal number is (n^2 - n + 2) * (n + 1) / 2\n    # This formula is derived from the formula for the nth triangular number (n*(n+1)/2) \n    # and the fact that the nonagonal number is the sum of the first n triangular numbers\n    return (n**2 - n + 2) * (n + 1) // 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the array up to the k-th index.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position up to which the array should be reversed.\n\n    Returns:\n        list: The modified array with elements up to the k-th index reversed.\n    \"\"\"\n    # Check if k is within the bounds of the array\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"k is out of bounds\")\n\n    # Reverse the array up to the k-th index\n    arr[:k] = arr[:k][::-1]\n    \n    # Return the modified array\n    return arr\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["apple", "cherry", "date"], 3]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' in the middle, False otherwise.\n    \"\"\"\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Check if the string is empty\n    if not text:\n        return False\n    \n    # Check if the first and last characters are 'z'\n    if text[0] == 'z' and text[-1] == 'z':\n        return False\n    \n    # Check if 'z' is in the middle of the string\n    for i in range(1, len(text) - 1):\n        if text[i] == 'z':\n            return True\n    \n    # If no 'z' is found in the middle, return False\n    return False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\ndef add_dict_to_tuple(tup, d):\n    \"\"\"\n    This function adds a dictionary to a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        d (dict): The input dictionary.\n\n    Returns:\n        tuple: A new tuple containing the input tuple and the input dictionary.\n    \"\"\"\n    return tup + (d,)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\ndef filter_data(data, min_height, min_weight):\n    \"\"\"\n    Filter students with height and weight above the minimum.\n\n    Args:\n        data (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height.\n        min_weight (float): The minimum weight.\n\n    Returns:\n        dict: A dictionary with student names as keys and tuples of height and weight as values, \n              where height and weight are above the minimum.\n    \"\"\"\n    return {name: height_weight for name, height_weight in data.items() if height_weight[0] > min_height and height_weight[1] > min_weight}\n\n# Test the function\ndata = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nassert filter_data(data,6.0,70)=={'Cierra Vega': (6.2, 70)}\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\ndef maxAverageOfPath(matrix):\n    \"\"\"\n    This function calculates the maximum average cost of a path in a square matrix.\n    \n    The path can only move right or down and must start from the top-left cell and end at the bottom-right cell.\n    \n    Args:\n    matrix (list of lists): A square matrix of size N*N where each cell is associated with a specific cost.\n    \n    Returns:\n    float: The maximum average cost of a path in the matrix.\n    \"\"\"\n    \n    # Get the size of the matrix\n    N = len(matrix)\n    \n    # Create a 2D array to store the maximum cost of reaching each cell\n    max_cost = [[0]*N for _ in range(N)]\n    \n    # Initialize the first cell with the cost of the first cell in the matrix\n    max_cost[0][0] = matrix[0][0]\n    \n    # Fill the first row\n    for i in range(1, N):\n        max_cost[0][i] = max_cost[0][i-1] + matrix[0][i]\n    \n    # Fill the first column\n    for i in range(1, N):\n        max_cost[i][0] = max_cost[i-1][0] + matrix[i][0]\n    \n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            max_cost[i][j] = max(max_cost[i-1][j], max_cost[i][j-1]) + matrix[i][j]\n    \n    # Calculate the maximum average cost\n    max_average = max_cost[-1][-1] / (N*N)\n    \n    return max_average\n\n# Test the function\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\ndef count_same_pair(list1, list2):\n    \"\"\"\n    This function counts the indices where two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The number of indices where the lists have the same values.\n    \"\"\"\n    # Initialize a counter variable to store the count of same values\n    count = 0\n    \n    # Iterate over the indices of the first list\n    for i in range(len(list1)):\n        # Check if the values at the current index are the same in both lists\n        if list1[i] == list2[i]:\n            # If the values are the same, increment the counter\n            count += 1\n    \n    # Return the count of same values\n    return count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\nimport re\n\ndef extract_quotation(s):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    # Use regular expression to find all substrings enclosed in quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', s)\n    \n    # Return the list of extracted values\n    return matches\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n\ndef power_base_sum(base, power):\n    \"\"\"\n    This function calculates the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of all digits of the base to the specified power.\n    \"\"\"\n    # Calculate the base to the power\n    result = base ** power\n    \n    # Convert the result to a string to easily access each digit\n    str_result = str(result)\n    \n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_result:\n        # Add the integer value of the digit to the sum\n        sum_of_digits += int(digit)\n    \n    # Return the sum of digits\n    return sum_of_digits\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\ndef multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N \n    where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \n    Args:\n        t (tuple): A tuple of numbers.\n    \n    Returns:\n        tuple: A tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the input list\n    for i in range(len(lst)):\n        # If the result list is empty or the current element is different from the last element in the result list,\n        # append the current element to the result list\n        if not result or lst[i]!= result[-1]:\n            result.append(lst[i])\n    \n    # Return the result list\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\ndef sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements in the input lists.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements in the input lists.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    # Use a list comprehension to create a new list where each element is the sum of the corresponding elements in the input lists\n    return [a + b for a, b in zip(list1, list2)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\nimport math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area using the formula \u03c0rl\n    lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\ndef find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        target (int): The target number to find.\n\n    Returns:\n        int: The index of the first occurrence of the target number. Returns -1 if not found.\n\n    \"\"\"\n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Continue the search until the two pointers meet\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to the target, we need to check if it's the first occurrence\n        if arr[mid] == target:\n            # If the middle element is the first element or the element before it is not the target, return the middle index\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            # If the middle element is not the first occurrence, move the right pointer to the left of the middle index\n            else:\n                right = mid - 1\n        # If the middle element is less than the target, move the left pointer to the right of the middle index\n        elif arr[mid] < target:\n            left = mid + 1\n        # If the middle element is greater than the target, move the right pointer to the left of the middle index\n        else:\n            right = mid - 1\n    \n    # If the target is not found, return -1\n    return -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\ndef replace_specialchar(s):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, and dots replaced with colons.\n    \"\"\"\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\ndef sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    This function calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the current sublist\n            product = 1\n            for k in range(i, j + 1):\n                product *= lst[k]\n            # Add the product to the total sum\n            total_sum += product\n    return total_sum\n\n# Test the function\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\ndef left_insertion(arr, target):\n    \"\"\"\n    This function finds the leftmost index where the target value can be inserted in the sorted array to maintain sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted.\n\n    Returns:\n    int: The leftmost index where the target value can be inserted.\n    \"\"\"\n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Continue the loop until the two pointers meet\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the target is equal to the middle element, return the middle index\n        if arr[mid] == target:\n            return mid\n        # If the target is less than the middle element, move the right pointer to the left\n        elif arr[mid] > target:\n            right = mid - 1\n        # If the target is greater than the middle element, move the left pointer to the right\n        else:\n            left = mid + 1\n    \n    # If the target is not found, return the left pointer which is the leftmost index where the target value can be inserted\n    return left\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\ndef toggle_middle_bits(n):\n    \"\"\"\n    This function toggles the bits of the number except the first and the last bit.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number with the middle bits toggled.\n    \"\"\"\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # Create a mask to toggle the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits\n    result = n ^ mask\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\nimport re\n\ndef check_str(s):\n    \"\"\"\n    Checks whether the given string is starting with a vowel or not.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    # Define a regex pattern that matches any vowel at the start of the string\n    pattern = re.compile(r'^[aeiouAEIOU]')\n\n    # Use the regex pattern to match the start of the string\n    match = pattern.match(s)\n\n    # If a match is found, return True; otherwise, return False\n    return match is not None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\ndef tuple_to_dict(t):\n    \"\"\"\n    This function converts a given tuple into a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: A dictionary where each key is an element from the tuple and its corresponding value is the next element in the tuple.\n\n    Raises:\n        ValueError: If the tuple has less than two elements.\n    \"\"\"\n    # Check if the tuple has at least two elements\n    if len(t) < 2:\n        raise ValueError(\"The tuple must have at least two elements.\")\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Iterate over the indices of the tuple\n    for i in range(len(t) - 1):\n        # For each index, add a key-value pair to the dictionary\n        result[t[i]] = t[i + 1]\n\n    # Return the resulting dictionary\n    return result\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\ndef all_Characters_Same(s):\n    \"\"\"\n    Checks whether all characters in a given string are the same.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    # If the string is empty, return True\n    if len(s) == 0:\n        return True\n    \n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Iterate over the rest of the string\n    for char in s[1:]:\n        # If a character is different from the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If the function hasn't returned False, all characters are the same\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\nimport math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    a (float): The length of one edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area using the formula: (sqrt(6)/4) * a^2\n    area = (math.sqrt(6)/4) * a**2\n    return area\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\ndef rotate_right(lst, num):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The input list to be rotated.\n        num (int): The number of items to rotate the list to the right.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    # Calculate the effective number of rotations, considering the length of the list\n    num = num % len(lst)\n    \n    # Split the list into two parts: the last 'num' elements and the rest\n    tail = lst[-num:]\n    head = lst[:-num]\n    \n    # Combine the two parts in reverse order to get the rotated list\n    rotated_list = tail + head\n    \n    return rotated_list\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\ndef check_none(tup):\n    \"\"\"\n    This function checks if the given tuple has any None value.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any None value, False otherwise.\n    \"\"\"\n    return None in tup\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function finds numbers within a given range from startnum to endnum \n    where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The start of the range (inclusive).\n        endnum (int): The end of the range (inclusive).\n\n    Returns:\n        list: A list of numbers within the range that meet the condition.\n    \"\"\"\n    def is_divisible_by_digits(n):\n        # Convert the number to a string to easily access each digit\n        str_n = str(n)\n        \n        # Check if the number is divisible by every digit it contains\n        for digit in str_n:\n            # Skip division by zero\n            if digit == '0':\n                return False\n            # Check if the number is divisible by the digit\n            if n % int(digit)!= 0:\n                return False\n        return True\n\n    # Use list comprehension to filter numbers within the range\n    return [n for n in range(startnum, endnum + 1) if is_divisible_by_digits(n)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\n\nimport math\n\ndef sector_area(radius, angle):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n\n    Args:\n    radius (float): The radius of the circle.\n    angle (float): The angle of the sector in degrees.\n\n    Returns:\n    float: The area of the sector. Returns None if the angle is larger than 360 degrees.\n    \"\"\"\n    # Check if the angle is larger than 360 degrees\n    if angle > 360:\n        return None\n    \n    # Convert the angle from degrees to radians\n    angle_in_radians = math.radians(angle)\n    \n    # Calculate the area of the sector\n    area = 0.5 * radius ** 2 * angle_in_radians\n    \n    return area\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\ndef capital_words_spaces(s):\n    \"\"\"\n    This function puts spaces between words starting with capital letters in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    result = ''\n    for i, char in enumerate(s):\n        if char.isupper() and i == 0 or (char.isupper() and s[i-1].islower()):\n            result +=''\n        result += char\n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\ndef sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of numbers.\n    \"\"\"\n    # Use the sorted function with a custom key to sort the list\n    # The key function converts each string to an integer before comparing\n    return sorted(lst, key=lambda x: int(x))\n\n# Test the function\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\ndef add_tuple(lst, tup):\n    \"\"\"\n    Adds the elements of a given tuple to the end of a list.\n\n    Args:\n        lst (list): The list to which the tuple elements will be added.\n        tup (tuple): The tuple whose elements will be added to the list.\n\n    Returns:\n        list: The updated list with the tuple elements added.\n    \"\"\"\n    return lst + list(tup)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\ndef check_min_heap(arr):\n    \"\"\"\n    Checks if the given array represents a min heap.\n\n    Args:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n\n    # Check for negative values\n    if any(val < 0 for val in arr):\n        return False\n\n    # Check for min heap property\n    for i in range(n // 2 - 1, -1, -1):\n        # Check if left child is smaller than parent\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # Check if right child is smaller than parent\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n\n    Args:\n    n (int): The number of digits.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the index and the triangular number\n    index = 1\n    triangular_num = 1\n\n    # Loop until we find a triangular number with n digits\n    while True:\n        # Convert the triangular number to a string to check its length\n        str_triangular_num = str(triangular_num)\n\n        # If the length of the triangular number is equal to n, return the index\n        if len(str_triangular_num) == n:\n            return index\n\n        # Increment the index and the triangular number\n        index += 1\n        triangular_num += index\n\n# Test the function\nassert find_Index(2) == 4\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\ndef jacobsthal_num(n):\n    \"\"\"\n    This function calculates the nth Jacobsthal number.\n\n    Args:\n    n (int): The position of the Jacobsthal number to be calculated.\n\n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n\n    # Initialize variables to store the last two Jacobsthal numbers\n    a, b = 0, 1\n\n    # Calculate the nth Jacobsthal number\n    for _ in range(2, n + 1):\n        # Calculate the next Jacobsthal number as the sum of the last two\n        a, b = b, a + b\n\n    # Return the nth Jacobsthal number\n    return b\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function finds common elements from three lists.\n    \n    Args:\n    l1 (list): The first list.\n    l2 (list): The second list.\n    l3 (list): The third list.\n    \n    Returns:\n    list: A list of indices where common elements appear in all three lists.\n    \"\"\"\n    \n    # Find the length of the shortest list\n    min_len = min(len(l1), len(l2), len(l3))\n    \n    # Initialize an empty list to store the indices of common elements\n    common_indices = []\n    \n    # Iterate over the range of the shortest list\n    for i in range(min_len):\n        # Check if the elements at the current index are equal in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are equal, append the index to the common_indices list\n            common_indices.append(i)\n    \n    # Return the list of common indices\n    return common_indices\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\ndef min_k(tuple_list, k):\n    \"\"\"\n    This function finds the minimum k records from a given tuple list.\n    \n    Parameters:\n    tuple_list (list): A list of tuples containing names and ages.\n    k (int): The number of records to be found.\n    \n    Returns:\n    list: A list of tuples containing the minimum k records.\n    \"\"\"\n    \n    # Sort the tuple list based on the age in ascending order\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    \n    # Return the first k records\n    return sorted_list[:k]\n\n# Test the function\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\ndef second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two unique numbers.\n    \"\"\"\n    # Remove duplicates by converting the list to a set\n    unique_numbers = set(numbers)\n    \n    # Check if the list has less than two unique numbers\n    if len(unique_numbers) < 2:\n        raise ValueError(\"The list must have at least two unique numbers.\")\n    \n    # Sort the unique numbers in ascending order\n    sorted_numbers = sorted(unique_numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\ndef count_unique_sublists(lst):\n    \"\"\"\n    This function counts the occurrences of each sublist in the given list.\n    \n    Args:\n        lst (list): A list containing sublists.\n    \n    Returns:\n        dict: A dictionary where each sublist is converted to a tuple and its value is the number of its occurrences.\n    \"\"\"\n    \n    # Initialize an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    \n    # Iterate over each sublist in the given list\n    for sublist in lst:\n        # Convert the sublist to a tuple (since lists are not hashable and cannot be used as dictionary keys)\n        sublist_tuple = tuple(sublist)\n        \n        # If the sublist is already in the dictionary, increment its count\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # If the sublist is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    \n    # Return the dictionary containing the count of each sublist\n    return sublist_count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\ndef count_reverse_pairs(lst):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given list.\n\n    Args:\n        lst (list): A list of strings.\n\n    Returns:\n        int: The number of pairs of reverse strings.\n    \"\"\"\n    # Create a dictionary to store the frequency of each string\n    freq_dict = {}\n    for string in lst:\n        # Reverse the string and use it as a key in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string in freq_dict:\n            freq_dict[reversed_string] += 1\n        else:\n            freq_dict[reversed_string] = 1\n\n    # Initialize a variable to store the count of pairs\n    pair_count = 0\n    # Iterate over the frequency dictionary\n    for key in freq_dict:\n        # For each string, add the number of pairs to the total count\n        pair_count += freq_dict[key] * (freq_dict[key] - 1) // 2\n\n    return pair_count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\ndef is_decimal(s):\n    \"\"\"\n    Checks whether a given string is a decimal number with a precision of 2.\n\n    Args:\n        s (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    \n    # Check if the string contains a decimal point\n    if '.' not in s:\n        return False\n    \n    # Split the string into two parts at the decimal point\n    parts = s.split('.')\n    \n    # Check if the first part is a digit and the second part has a length of 2\n    if not parts[0].isdigit() or len(parts[1])!= 2:\n        return False\n    \n    # If all checks pass, the string is a decimal number with a precision of 2\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["1.1$"]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n\ndef check_monthnumber_number(month_number):\n    \"\"\"\n    This function checks whether the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number from 1 to 12.\n\n    Returns:\n        bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    # Define a dictionary to store the number of days in each month\n    days_in_month = {\n        1: 31,  # January\n        2: 28,  # February\n        3: 31,  # March\n        4: 30,  # April\n        5: 31,  # May\n        6: 30,  # June\n        7: 31,  # July\n        8: 31,  # August\n        9: 30,  # September\n        10: 31,  # October\n        11: 30,  # November\n        12: 31  # December\n    }\n\n    # Check if the month number is in the dictionary\n    if month_number in days_in_month:\n        # Return True if the month contains 30 days, False otherwise\n        return days_in_month[month_number] == 30\n    else:\n        # Return False if the month number is not in the dictionary\n        return False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\ndef unique_element(lst):\n    \"\"\"\n    Checks if a list contains only one distinct element.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(lst)) == 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\ndef find_min_diff(arr, target_sum):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    target_sum (int): The target sum that we want to achieve by adding two elements from the array.\n    \n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, one at the start and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    \n    # Traverse the array from both ends\n    while left < right:\n        # Calculate the sum of the elements at the current pointers\n        current_sum = arr[left] + arr[right]\n        \n        # If the current sum is equal to the target sum, return 0\n        if current_sum == target_sum:\n            return 0\n        \n        # If the current sum is less than the target sum, move the left pointer to the right\n        elif current_sum < target_sum:\n            left += 1\n        \n        # If the current sum is greater than the target sum, move the right pointer to the left\n        else:\n            right -= 1\n        \n        # Update the minimum difference\n        min_diff = min(min_diff, target_sum - current_sum)\n    \n    # Return the minimum difference\n    return min_diff\n\n# Test the function\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\ndef number_ctr(s):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of digits in the string.\n    \"\"\"\n    return sum(c.isdigit() for c in s)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\ndef pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a pair of consecutive items.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\ndef get_pairs_count(nums, sum):\n    \"\"\"\n    This function calculates the number of pairs in a list of numbers \n    whose sum equals a given number.\n\n    Args:\n    nums (list): A list of numbers.\n    sum (int): The target sum.\n\n    Returns:\n    int: The number of pairs whose sum equals the target sum.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each number\n    freq_dict = {}\n    \n    # Initialize a variable to store the count of pairs\n    pair_count = 0\n    \n    # Iterate over the list of numbers\n    for num in nums:\n        # Calculate the complement of the current number\n        complement = sum - num\n        \n        # If the complement is already in the dictionary, \n        # it means we have found a pair whose sum equals the target sum\n        if complement in freq_dict:\n            # Increment the pair count by the frequency of the complement\n            pair_count += freq_dict[complement]\n        \n        # Increment the frequency of the current number in the dictionary\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Return the count of pairs\n    return pair_count\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\ndef Diff(list1, list2):\n    \"\"\"\n    This function calculates the difference between two lists.\n    \n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n    \n    Returns:\n        list: A list containing the differences between corresponding elements in list1 and list2.\n    \"\"\"\n    \n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Use list comprehension to calculate the differences\n    return [x - y for x, y in zip(list1, list2)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\ndef odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to consider.\n\n    Returns:\n        int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_num = 2 * i + 1\n        \n        # Add the fourth power of the ith odd natural number to the sum\n        total_sum += odd_num ** 4\n    \n    # Return the calculated sum\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\ndef check_expression(expression):\n    \"\"\"\n    Checks if the given expression is balanced or not.\n\n    Args:\n    expression (str): The input expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    # Create a dictionary to map closing brackets to opening brackets\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    # Create a set of opening brackets for easy lookup\n    opening_brackets = set([\"(\", \"{\", \"[\"])\n    # Create a stack to store the opening brackets\n    stack = []\n    # Iterate over each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in opening_brackets:\n            stack.append(char)\n        # If the character is a closing bracket, check if the stack is empty or the top of the stack does not match the current closing bracket\n        elif char in bracket_map:\n            if not stack or stack.pop()!= bracket_map[char]:\n                return False\n    # If the stack is empty after iterating over the entire expression, it is balanced\n    return not stack\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\ndef remove_length(s, k):\n    \"\"\"\n    This function removes all the words with k length in the given string.\n\n    Parameters:\n    s (str): The input string.\n    k (int): The length of the words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the words with length k\n    words_to_remove = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Check if the length of the word is equal to k\n        if len(word) == k:\n            # If the length is equal to k, add the word to the list of words to remove\n            words_to_remove.append(word)\n    \n    # Initialize an empty list to store the words that are not of length k\n    new_words = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Check if the word is not in the list of words to remove\n        if word not in words_to_remove:\n            # If the word is not in the list of words to remove, add it to the list of new words\n            new_words.append(word)\n    \n    # Join the list of new words into a string separated by spaces\n    new_string =''.join(new_words)\n    \n    # Return the modified string\n    return new_string\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestablishmentarianism.", 10]]}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\ndef find_substring(string, sub):\n    \"\"\"\n    This function finds the occurrence and position of a substring within a string.\n    \n    Args:\n        string (str): The main string to search in.\n        sub (str): The substring to search for.\n    \n    Returns:\n        tuple: A tuple containing the substring, its occurrence, and its position. \n               Returns None if there is no match.\n    \"\"\"\n    \n    # Check if the substring exists in the string\n    if sub not in string:\n        return None\n    \n    # Find the first occurrence of the substring\n    occurrence = string.find(sub)\n    \n    # Find the last occurrence of the substring\n    last_occurrence = string.rfind(sub)\n    \n    # Return the substring, its first occurrence, and its position\n    return (sub, occurrence, last_occurrence)\n\n# Test the function\nassert find_substring('python programming, python language','python')==('python', 0, 6)\nassert find_substring('hello world, hello again','hello')==('hello', 0, 5)\nassert find_substring('apple, banana, apple','apple')==('apple', 0, 10)\nassert find_substring('hello world, world is beautiful','world')==('world', 0, 13)\nassert find_substring('hello world, world is beautiful','python')==None\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\ndef odd_position(lst):\n    \"\"\"\n    Checks whether every odd index contains odd numbers of a given list.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    # Iterate over the indices and values of the list\n    for i, val in enumerate(lst):\n        # Check if the index is odd\n        if i % 2!= 0:\n            # If the index is odd, check if the value is odd\n            if val % 2 == 0:\n                # If the value is even, return False\n                return False\n    # If the function hasn't returned False, all odd indices contain odd numbers\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\ndef find_sum(lst):\n    \"\"\"\n    This function calculates the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate over the list to count the frequency of each element\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    total_sum = 0\n    \n    # Iterate over the list again to find the sum of non-repeated elements\n    for num in lst:\n        if freq_dict[num] == 1:\n            total_sum += num\n    \n    return total_sum\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists containing consecutive duplicates.\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    current_group = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n\n    result.append(current_group)\n    return result\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\nfrom itertools import combinations\n\ndef find_combinations(tuples):\n    \"\"\"\n    This function generates all possible combinations of sums from the given tuple list.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing all possible combinations of sums.\n    \"\"\"\n    # Generate all possible combinations of tuples\n    all_combinations = list(combinations(tuples, 2))\n    \n    # Initialize an empty set to store unique combinations of sums\n    combinations_of_sums = set()\n    \n    # Iterate over all combinations of tuples\n    for combination in all_combinations:\n        # Calculate the sum of the current combination\n        total = sum(combination[0]) + sum(combination[1])\n        \n        # Add the sum to the set\n        combinations_of_sums.add(tuple(sorted((total, combination[0][0], combination[0][1], combination[1][0], combination[1][1]))))\n    \n    # Convert the set to a list and return it\n    return list(combinations_of_sums)\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n\n    A polite number is a number that can be expressed as the sum of two cubes in n different ways.\n\n    :param n: The position of the polite number to find.\n    :return: The nth polite number.\n    \"\"\"\n    def is_polite_num(num):\n        \"\"\"Check if a number is polite.\"\"\"\n        count = 0\n        for i in range(1, int(num ** (1/3)) + 1):\n            for j in range(i, int(num ** (1/3)) + 1):\n                for k in range(j, int(num ** (1/3)) + 1):\n                    if i ** 3 + j ** 3 + k ** 3 == num:\n                        count += 1\n        return count == n\n\n    polite_nums = []\n    num = 1\n    while len(polite_nums) < n:\n        if is_polite_num(num):\n            polite_nums.append(num)\n        num += 1\n    return polite_nums[-1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\ndef odd_length_sum(arr):\n    \"\"\"\n    This function calculates the sum of all odd length subarrays in a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n+1):\n        if length % 2!= 0:\n            for i in range(n - length + 1):\n                total_sum += sum(arr[i:i+length])\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n\n    Parameters:\n    r (int): The red component of the RGB color, ranging from 0 to 255.\n    g (int): The green component of the RGB color, ranging from 0 to 255.\n    b (int): The blue component of the RGB color, ranging from 0 to 255.\n\n    Returns:\n    tuple: A tuple containing the hue, saturation, and value of the HSV color.\n    \"\"\"\n\n    # Normalize the RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum of the RGB values\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n\n    # If the maximum and minimum are the same, the color is grayscale\n    if mx == mn:\n        h = 0\n    # If the maximum is red, calculate the hue\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    # If the maximum is green, calculate the hue\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    # If the maximum is blue, calculate the hue\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n\n    # If the maximum is zero, the color is black or white\n    if mx == 0:\n        s = 0\n    # Otherwise, calculate the saturation\n    else:\n        s = df / mx\n\n    # The value is the maximum of the RGB values\n    v = mx\n\n    return h, s, v\n\n# Test the function\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 1.0)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 0, 1]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef mul_even_odd(lst):\n    \"\"\"\n    This function calculates the product of the first even and odd number in a given list.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The product of the first even and odd number in the list.\n    \"\"\"\n    \n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate over the list to find the first even and odd numbers\n    for num in lst:\n        if num % 2 == 0:  # Check if the number is even\n            if first_even is None:  # If this is the first even number, store it\n                first_even = num\n        else:  # If the number is odd\n            if first_odd is None:  # If this is the first odd number, store it\n                first_odd = num\n    \n    # If both first even and odd numbers are found, calculate their product\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        # If either of the numbers is not found, return None\n        return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\ndef tuple_str_int(s):\n    \"\"\"\n    This function converts a tuple string to an integer tuple.\n\n    Args:\n        s (str): A string representing a tuple of integers.\n\n    Returns:\n        tuple: An integer tuple.\n    \"\"\"\n    # Remove the parentheses from the string\n    s = s.strip('()')\n    \n    # Split the string into a list of strings\n    str_list = s.split(', ')\n    \n    # Convert each string in the list to an integer and return as a tuple\n    return tuple(int(i) for i in str_list)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\ndef right_insertion(sorted_list, target):\n    \"\"\"\n    This function finds the right insertion point for a specified value in a sorted list.\n\n    Args:\n        sorted_list (list): A sorted list of elements.\n        target (int): The value to be inserted into the sorted list.\n\n    Returns:\n        int: The index at which the target value should be inserted to maintain sorted order.\n    \"\"\"\n    # Initialize two pointers, one at the start and one at the end of the list\n    left, right = 0, len(sorted_list) - 1\n    \n    # Continue the loop until the two pointers meet\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the target is equal to the middle element, return the middle index\n        if sorted_list[mid] == target:\n            return mid\n        # If the target is less than the middle element, move the right pointer to the left\n        elif sorted_list[mid] > target:\n            right = mid - 1\n        # If the target is greater than the middle element, move the left pointer to the right\n        else:\n            left = mid + 1\n    \n    # If the target is not found, return the left pointer which is the right insertion point\n    return left\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\nimport re\n\ndef text_match_three(text):\n    \"\"\"\n    This function checks if a given string contains 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'a' followed by three 'b', False otherwise.\n    \"\"\"\n    # Use regular expression to match the pattern 'a' followed by three 'b'\n    pattern = r\"a{1}b{3}\"\n    \n    # Use the fullmatch function to check if the entire string matches the pattern\n    # If the string matches the pattern, return True; otherwise, return False\n    return bool(re.fullmatch(pattern, text))\n", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\ndef new_tuple(string_list, string):\n    \"\"\"\n    This function creates a new tuple from the given string and list.\n\n    Args:\n        string_list (list): A list of strings.\n        string (str): A single string.\n\n    Returns:\n        tuple: A tuple containing the elements from the list and the string.\n    \"\"\"\n    # Convert the list to a tuple\n    string_tuple = tuple(string_list)\n    \n    # Combine the tuple with the string using the + operator\n    new_tuple = string_tuple + (string,)\n    \n    return new_tuple\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\ndef even_position(lst):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    # Iterate over the list with enumerate to get both index and value\n    for i, num in enumerate(lst):\n        # Check if the index is even\n        if i % 2 == 0:\n            # If the index is even, check if the number is even\n            if num % 2!= 0:\n                # If the number is odd, return False\n                return False\n    # If the function hasn't returned False, it means every even index contains even numbers, so return True\n    return True\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\ndef remove_nested(tup):\n    \"\"\"\n    This function removes tuples from a given tuple.\n\n    Args:\n        tup (tuple): The input tuple that may contain nested tuples.\n\n    Returns:\n        tuple: The input tuple with all nested tuples removed.\n    \"\"\"\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            # Recursively remove nested tuples\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\ndef count_list(lst):\n    \"\"\"\n    This function counts the number of lists in a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list of lists.\n    \"\"\"\n    return len(lst)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the count of divisors for a given number n.\n    \n    Args:\n    n (int): The number for which the count of divisors is to be calculated.\n    \n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    \n    # Initialize a variable to store the count of divisors\n    count = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor, increment the count\n            count += 1\n    \n    # Return True if the count is even, False otherwise\n    return count % 2 == 0\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\ndef last(arr, target):\n    \"\"\"\n    This function finds the last position of a target element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of elements.\n    target (int): The target element to be found.\n\n    Returns:\n    int: The last position of the target element in the array. If the target element is not found, returns -1.\n    \"\"\"\n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Continue the search until the two pointers meet\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the target element is found at the middle index, update the left pointer to mid + 1 to find the last position\n        if arr[mid] == target:\n            left = mid + 1\n        # If the target element is less than the middle element, update the right pointer to mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        # If the target element is greater than the middle element, update the left pointer to mid + 1\n        else:\n            left = mid + 1\n    \n    # After the loop ends, the left pointer will be pointing to the last position of the target element\n    # If the target element is not found, the left pointer will be pointing to a position that is greater than the length of the array\n    # In this case, we return -1 to indicate that the target element is not found\n    return left - 1 if left < len(arr) else -1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\nimport re\n\ndef text_starta_endb(text):\n    \"\"\"\n    This function checks if a given string starts with 'a' and ends with 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\ndef return_sum(dictionary):\n    \"\"\"\n    This function calculates the sum of all items in a given dictionary.\n\n    Args:\n        dictionary (dict): A dictionary containing items to be summed.\n\n    Returns:\n        int: The sum of all items in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\ndef _sum(arr):\n    \"\"\"\n    This function calculates the sum of all elements in a given array.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        int: The sum of all elements in the array.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"List must contain only numbers.\")\n    return sum(arr)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\ndef left_rotate(n, d):\n    \"\"\"\n    Rotate left bits of a 32-bit number by d bits.\n\n    Args:\n    n (int): The number to be rotated.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The number after rotation.\n    \"\"\"\n    # Calculate the number of bits to shift\n    shift = d % 32\n    \n    # Create a mask to extract the bits to be shifted out\n    mask = (1 << shift) - 1\n    \n    # Extract the bits to be shifted out\n    shifted_out = n & mask\n    \n    # Create a mask to extract the bits to be shifted in\n    mask2 = (1 << (32 - shift)) - 1\n    \n    # Extract the bits to be shifted in\n    shifted_in = n >> shift\n    \n    # Shift the bits in\n    shifted_in = shifted_in << shift\n    \n    # Combine the shifted in and out bits\n    result = shifted_in | shifted_out\n    \n    return result\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1, 1]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\ndef remove_all_spaces(input_string):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n\n    Args:\n        input_string (str): The input string to remove whitespaces from.\n\n    Returns:\n        str: The input string with all whitespaces removed.\n    \"\"\"\n    return input_string.replace(' ', '')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l, r):\n    \"\"\"\n    This function calculates the sum of all odd natural numbers within the range l and r.\n\n    Args:\n        l (int): The lower bound of the range (inclusive).\n        r (int): The upper bound of the range (inclusive).\n\n    Returns:\n        int: The sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate over the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the current number is odd\n        if num % 2!= 0:\n            # If the number is odd, add it to the total sum\n            total_sum += num\n    \n    # Return the total sum\n    return total_sum\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\ndef test_three_equal(a, b, c):\n    \"\"\"\n    This function counts the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The number of equal numbers among the three integers.\n    \"\"\"\n    # Initialize a counter to store the number of equal numbers\n    count = 0\n    \n    # Check if a is equal to b\n    if a == b:\n        # If a is equal to b, increment the counter\n        count += 1\n    \n    # Check if a is equal to c\n    if a == c:\n        # If a is equal to c, increment the counter\n        count += 1\n    \n    # Check if b is equal to c\n    if b == c:\n        # If b is equal to c, increment the counter\n        count += 1\n    \n    # Return the count of equal numbers\n    return count\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\ndef is_product_even(numbers):\n    \"\"\"\n    Checks whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n\n    # Check if the product is even\n    return product % 2 == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Checks whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # If the number is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Calculate the square root of the number\n    sqrt = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    return sqrt == int(sqrt)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\ndef max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in the list of lists whose sum of elements is the highest.\n\n    Args:\n        lists (list): A list of lists containing integers.\n\n    Returns:\n        list: The list in the list of lists with the highest sum of elements.\n    \"\"\"\n    # Initialize the maximum sum and the corresponding list\n    max_sum = float('-inf')  # Initialize max_sum as negative infinity\n    max_sum_list = None\n\n    # Iterate over each list in the input list\n    for lst in lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # If the current sum is greater than the max_sum, update max_sum and max_sum_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    # Return the list with the highest sum\n    return max_sum_list\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\ndef first_odd(numbers):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The first odd number in the list. If no odd number is found, returns None.\n    \"\"\"\n    for num in numbers:\n        if num % 2!= 0:\n            return num\n    return None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\ndef max_run_uppercase(s):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\ndef check_K(tup, k):\n    \"\"\"\n    Checks if the given tuple contains the k.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n        k (int): The number to be searched in the tuple.\n\n    Returns:\n        bool: True if k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tup\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\ndef check_smaller(t1, t2):\n    \"\"\"\n    This function checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if all elements of t2 are smaller than corresponding elements in t1, False otherwise.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(t1)!= len(t2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    # Use the zip function to iterate over the tuples in parallel\n    for elem1, elem2 in zip(t1, t2):\n        # If an element in t2 is not smaller than the corresponding element in t1, return False\n        if elem2 >= elem1:\n            return False\n\n    # If the function hasn't returned False, all elements of t2 are smaller than corresponding elements in t1\n    return True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}