{"task_id": "Mbpp/2", "completion": "assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "completion": "assert is_not_prime(3) == False"}
{"task_id": "Mbpp/4", "completion": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],4)==[85, 75, 65, 58]"}
{"task_id": "Mbpp/6", "completion": "assert differ_At_One_Bit_Pos(13,10) == False"}
{"task_id": "Mbpp/7", "completion": "assert set(find_char_long('Please move back to stream', 5)) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "completion": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]"}
{"task_id": "Mbpp/9", "completion": "assert find_Rotations(\"abc\") == 0"}
{"task_id": "Mbpp/11", "completion": "assert remove_Occ(\"hello\",\"o\") == \"hell\""}
{"task_id": "Mbpp/12", "completion": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "completion": "assert find_Volume(10,8,6) == 240"}
{"task_id": "Mbpp/16", "completion": "assert text_lowercase_underscore(\"aab_cbbbc_\")==(False)"}
{"task_id": "Mbpp/17", "completion": "assert square_perimeter(15)==60"}
{"task_id": "Mbpp/18", "completion": "assert remove_dirty_chars(\"probasscurve\", \"prosabc\") == 'bacuve'"}
{"task_id": "Mbpp/19", "completion": "assert test_duplicate(([1,2,3,4,5,1]))==True"}
{"task_id": "Mbpp/20", "completion": "assert is_woodall(384) == False"}
{"task_id": "Mbpp/56", "completion": "assert check(71) == True"}
{"task_id": "Mbpp/57", "completion": "assert find_Max_Num([1,2,3,4]) == 4321"}
{"task_id": "Mbpp/58", "completion": "assert opposite_Signs(1,2) == False"}
{"task_id": "Mbpp/59", "completion": "assert is_octagonal(7) == 113"}
{"task_id": "Mbpp/61", "completion": "assert count_Substrings('112112112112') == 12"}
{"task_id": "Mbpp/62", "completion": "assert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/63", "completion": "assert max_difference([(1, 2), (1, 2), (1, 2)]) == 0"}
{"task_id": "Mbpp/64", "completion": ""}
{"task_id": "Mbpp/65", "completion": "assert recursive_list_sum(([1, 2, [3,4],[5,6,7]]))==43"}
{"task_id": "Mbpp/66", "completion": "assert pos_count([-1,-2,-3,-4]) == 0"}
{"task_id": "Mbpp/67", "completion": "assert bell_number(3)==5"}
{"task_id": "Mbpp/68", "completion": "assert is_Monotonic([5, 6, 7, 8, 9]) == True"}
{"task_id": "Mbpp/69", "completion": "assert is_sublist([2,4,3,5,7],[2,4,3])==True"}
{"task_id": "Mbpp/70", "completion": "assert get_equal([(11, 22, 33), (44, 55)]) == False"}
{"task_id": "Mbpp/71", "completion": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/72", "completion": "assert dif_Square(6) == False"}
{"task_id": "Mbpp/74", "completion": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"])==False"}
{"task_id": "Mbpp/75", "completion": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12) == [(6, 24, 12), (12, 18, 21)]"}
{"task_id": "Mbpp/77", "completion": "assert is_Diff (11111) == True"}
{"task_id": "Mbpp/79", "completion": "assert word_len(\"Python\") == True\n\nWrite a Python function which takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise."}
{"task_id": "Mbpp/80", "completion": "assert tetrahedral_number(10) == 653"}
{"task_id": "Mbpp/82", "completion": "assert math.isclose(volume_sphere(100), 4188790.204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/83", "completion": "assert get_Char(\"xyz\") == \"c\""}
{"task_id": "Mbpp/84", "completion": "assert sequence(20) == 12"}
{"task_id": "Mbpp/85", "completion": "assert math.isclose(surfacearea_sphere(100), 125663.70614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "completion": "assert centered_hexagonal_number(1) == 1"}
{"task_id": "Mbpp/87", "completion": "\nWrite a function to merge two dictionaries into a single dictionary."}
{"task_id": "Mbpp/88", "completion": "assert freq_count}
{"task_id": "Mbpp/89", "completion": "assert closest_num(12) == 11"}
{"task_id": "Mbpp/90", "completion": "assert len_log([\"python\",\"PHP\",\"bigdata\",\"java\"]) == 7"}
{"task_id": "Mbpp/91", "completion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"red\")==True"}
{"task_id": "Mbpp/92", "completion": "assert is_undulating(1234567) == False"}
{"task_id": "Mbpp/93", "completion": "assert power(2,3) == 8"}
{"task_id": "Mbpp/94", "completion": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100), ('Rash', 100)]) == 'Rash'"}
{"task_id": "Mbpp/95", "completion": "assert Find_Min_Length([[1],[1,2],[2,3,4]]) == 2"}
{"task_id": "Mbpp/96", "completion": "assert divisor(12) == 6"}
{"task_id": "Mbpp/97", "completion": "\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary."}
{"task_id": "Mbpp/98", "completion": "assert math.isclose(multiply_num((1, 2, 3, 4, 5)), 120, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "completion": "assert decimal_to_binary(10) == '1010'"}
{"task_id": "Mbpp/100", "completion": "assert next_smallest_palindrome(123)==121"}
{"task_id": "Mbpp/101", "completion": "assert kth_element([12,3,5,7,19], 4) == 7"}
{"task_id": "Mbpp/102", "completion": "assert snake_to_camel('python_program_1')=='PythonProgram1'"}
{"task_id": "Mbpp/103", "completion": "assert eulerian_num(3, 2) == 6"}
{"task_id": "Mbpp/104", "completion": "\nWrite a function to sort each sublist of strings in a given list of lists."}
{"task_id": "Mbpp/105", "completion": "assert count([True,True,True]) == 3"}
{"task_id": "Mbpp/106", "completion": "assert add_lists([5, 6, 7], (9, 10, 11)) == (9, 10, 11, 5, 6, 7)"}
{"task_id": "Mbpp/108", "completion": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "completion": "assert odd_Equivalent(\"101010\",3) == 2"}
{"task_id": "Mbpp/111", "completion": "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12, 1])"}
{"task_id": "Mbpp/113", "completion": "assert check_integer(\"123\")==True"}
{"task_id": "Mbpp/115", "completion": "assert empty_dit([{},{},{\"a\":1}])==False"}
{"task_id": "Mbpp/116", "completion": "assert tuple_to_int((1,2,3,4))==1234"}
{"task_id": "Mbpp/117", "completion": "\nWrite a function to convert all possible convertible elements in a list of lists to integers."}
{"task_id": "Mbpp/118", "completion": "assert string_to_list(\"python\")==['python']"}
{"task_id": "Mbpp/119", "completion": "assert search([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]) == 10"}
{"task_id": "Mbpp/120", "completion": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (4, 3)])==36"}
{"task_id": "Mbpp/123", "completion": "assert amicable_numbers_sum(1000)==504"}
{"task_id": "Mbpp/124", "completion": "assert math.isclose(angle_complex(1,0), 0, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "completion": "assert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "completion": "assert sum(10,10) == 10"}
{"task_id": "Mbpp/127", "completion": "assert multiply_int(10,20)==200"}
{"task_id": "Mbpp/128", "completion": "assert long_words(4,\"python is a programming language\")==['python','programming','language']"}
{"task_id": "Mbpp/129", "completion": "assert magic_square_test([[23, 28, 21], [22, 24, 26], [27, 20, 25]])==False"}
{"task_id": "Mbpp/130", "completion": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,1,2,3,2,4,6,9,"}
{"task_id": "Mbpp/131", "completion": "assert reverse_vowels(\"aA\") == \"aA\""}
{"task_id": "Mbpp/132", "completion": "assert tup_string(('h', 'e', 'l', 'l', 'o'))==(\"hello\")"}
{"task_id": "Mbpp/133", "completion": "assert sum_negativenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==-55"}
{"task_id": "Mbpp/135", "completion": ""}
{"task_id": "Mbpp/137", "completion": "assert math.isclose(zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 1.0, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "completion": "assert is_Sum_Of_Powers_Of_Two(11) == False"}
{"task_id": "Mbpp/139", "completion": "assert math.isclose(circle_circumference(100), 628.30000000000007, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4), (1, 4)])) == set([3, 4, 5, 7])"}
{"task_id": "Mbpp/141", "completion": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/142", "completion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"task_id": "Mbpp/143", "completion": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])) == 3"}
{"task_id": "Mbpp/145", "completion": "assert max_Abs_Diff((1,2,3,4)) == 0"}
{"task_id": "Mbpp/160", "completion": "assert find_solution(2, 3, 10) == None\n"}
{"task_id": "Mbpp/161", "completion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9]) == [2, 4, 6, 8, 10]"}
{"task_id": "Mbpp/162", "completion": "assert sum_series(4) == 6"}
{"task_id": "Mbpp/164", "completion": "assert are_equivalent(36, 60) == True"}
{"task_id": "Mbpp/165", "completion": "assert count_char_position(\"abc\") == 0"}
{"task_id": "Mbpp/166", "completion": "assert find_even_pair([1, 2, 3, 4]) == 0"}
{"task_id": "Mbpp/167", "completion": "assert next_power_of_2(1) == 1"}
{"task_id": "Mbpp/168", "completion": "assert frequency([1,2,3], 1) == 1"}
{"task_id": "Mbpp/170", "completion": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 1, 10) == 55"}
{"task_id": "Mbpp/171", "completion": "assert perimeter_pentagon(10) == 60"}
{"task_id": "Mbpp/172", "completion": "assert count_occurance(\"stdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd"}
{"task_id": "Mbpp/222", "completion": "assert check_type((5, 6, 7, 3, 5, 6, 7, 8, 9) ) == False"}
{"task_id": "Mbpp/223", "completion": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) == False"}
{"task_id": "Mbpp/224", "completion": "assert count_Set_Bits(3) == 2"}
{"task_id": "Mbpp/226", "completion": "assert odd_values_string('abcdefg') == 'aceg'"}
{"task_id": "Mbpp/227", "completion": "assert min_of_three(10,20,10)==10"}
{"task_id": "Mbpp/229", "completion": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 5) == [-1, -3, -7, 4, 5, 2, 6, 8, 9]"}
{"task_id": "Mbpp/230", "completion": "assert replace_blank(\"hello people\",' ')==(\"hello people\")"}
{"task_id": "Mbpp/232", "completion": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"}
{"task_id": "Mbpp/233", "completion": "assert math.isclose(lateralsuface_cylinder(10,5), 314.15, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "completion": "assert volume_cube(12)==1728"}
{"task_id": "Mbpp/235", "completion": "assert even_bit_set_number(15) == 14"}
{"task_id": "Mbpp/237", "completion": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3), (3, 1)]) == {(1, 3): 3, (2, 5): 2, (3, 6): 2}"}
{"task_id": "Mbpp/238", "completion": "assert number_of_substrings(\"a\") == 1"}
{"task_id": "Mbpp/239", "completion": "assert get_total_number_of_sequences(10, 5) == 10"}
{"task_id": "Mbpp/240", "completion": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8, 10])==[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"}
{"task_id": "Mbpp/242", "completion": "assert count_charac(\"python\")==6"}
{"task_id": "Mbpp/244", "completion": "assert next_Perfect_Square(121) == 121"}
{"task_id": "Mbpp/245", "completion": "assert max_sum([3, 2, 6, -1, 4, 5, -1, 2]) == 10"}
{"task_id": "Mbpp/247", "completion": "assert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "completion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9, 10])==[1, 2, 8, 9, 10]"}
{"task_id": "Mbpp/250", "completion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 3"}
{"task_id": "Mbpp/251", "completion": "assert insert_element([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "Mbpp/252", "completion": "assert convert(1+1j) == (2.0, 0.25*pi)"}
{"task_id": "Mbpp/253", "completion": "assert count_integer([1,2,3,4,5]) == 5"}
{"task_id": "Mbpp/255", "completion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red','Red'), ('Red','Green'), ('Red','Blue'), ('Green','Red'), ('Green','Green'), ('Green','Blue'), ('Blue','Red'), ('Blue','Green'), ('Blue','Blue')]"}
{"task_id": "Mbpp/256", "completion": "assert count_Primes_nums(10) == 4"}
{"task_id": "Mbpp/257", "completion": "assert swap_numbers(10,10)==(10,10)"}
{"task_id": "Mbpp/259", "completion": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "completion": "assert newman_prime(10) == 109"}
{"task_id": "Mbpp/261", "completion": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "completion": "assert split_two_parts([1,1,2,3,4,4,5,1],4)==([1, 1, 2, 3], [4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "completion": "assert dog_age(1)==15"}
{"task_id": "Mbpp/265", "completion": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],4)==[['a', 'g', 'm'], ['b', 'h', 'n'], ['c', 'i'], ['d', 'j'], ['e', 'k'], ['f', 'l']]"}
{"task_id": "Mbpp/266", "completion": "assert lateralsurface_cube(10)==1000"}
{"task_id": "Mbpp/267", "completion": "assert square_Sum(3) == 22"}
{"task_id": "Mbpp/268", "completion": "assert find_star_num(10) == 101"}
{"task_id": "Mbpp/269", "completion": "assert ascii_value('a')==97"}
{"task_id": "Mbpp/270", "completion": "assert sum_even_and_even_index([1, 2, 3, 4, 5]) == 0"}
{"task_id": "Mbpp/271", "completion": "assert even_Power_Sum(3) == 10560"}
{"task_id": "Mbpp/272", "completion": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19), (4, 'Rash', 21)]) == [21, 20, 19, 21]"}
{"task_id": "Mbpp/273", "completion": "assert substract_elements((10, 4, 5), (2, 5, 18, 10)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "completion": "assert even_binomial_Coeff_Sum(5) == 10"}
{"task_id": "Mbpp/276", "completion": "assert math.isclose(volume_cylinder(10,10), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "completion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "completion": "assert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2, 3))) == 3"}
{"task_id": "Mbpp/279", "completion": "assert is_num_decagonal(10) == 171"}
{"task_id": "Mbpp/280", "completion": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],12) == (True, 8)"}
{"task_id": "Mbpp/281", "completion": "assert all_unique([1,2,1]) == False"}
{"task_id": "Mbpp/282", "completion": "assert sub_list([1,2,3],[1,2,3])==[0,0,0]"}
{"task_id": "Mbpp/283", "completion": "assert validate(12345) == False"}
{"task_id": "Mbpp/284", "completion": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'white')==True"}
{"task_id": "Mbpp/285", "completion": "assert text_match_two_three(\"ab\")==(True)"}
{"task_id": "Mbpp/286", "completion": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2) == 40"}
{"task_id": "Mbpp/287", "completion": "assert square_Sum(3) == 24"}
{"task_id": "Mbpp/290", "completion": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23]])==(4, [19, 21, 23])"}
{"task_id": "Mbpp/292", "completion": "assert find(11,3) == 3"}
{"task_id": "Mbpp/293", "completion": "assert otherside_rightangle(10,8)==10.63014581273465"}
{"task_id": "Mbpp/294", "completion": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==10"}
{"task_id": "Mbpp/295", "completion": "assert sum_div(12)==16"}
{"task_id": "Mbpp/296", "completion": "assert get_Inv_Count([2,4,1,3,5]) == 3"}
{"task_id": "Mbpp/297", "completion": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "completion": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84),('Peter Nichols',7)])==('Peter Nichols', 14)"}
{"task_id": "Mbpp/300", "completion": "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "completion": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==3"}
{"task_id": "Mbpp/305", "completion": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"c++\"])==('Python', 'PHP')"}
{"task_id": "Mbpp/306", "completion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 7) == 106"}
{"task_id": "Mbpp/308", "completion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],2)==[12, 10]"}
{"task_id": "Mbpp/309", "completion": "assert maximum(10,5) == 10"}
{"task_id": "Mbpp/310", "completion": "\nWrite a function to check whether a given string is a palindrome or not."}
{"task_id": "Mbpp/311", "completion": "assert set_left_most_unset_bit(11) == 12"}
{"task_id": "Mbpp/312", "completion": "assert math.isclose(volume_cone(10,12), 1256.6370614359172, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "assert highest_Power_of_2(11) == 8"}
{"task_id": "Mbpp/389", "completion": "assert find_lucas(10) == 17711"}
{"task_id": "Mbpp/390", "completion": "assert add_string([1,2,3,4],'temp{0}{0}')==['temp11', 'temp22', 'temp33', 'temp44']"}
{"task_id": "Mbpp/391", "completion": "\nWrite a function to convert more than one list to nested dictionary."}
{"task_id": "Mbpp/392", "completion": "assert get_max_sum(100) == 120"}
{"task_id": "Mbpp/394", "completion": "assert check_distinct((1, 4, 5, 6)) == True"}
{"task_id": "Mbpp/395", "completion": "assert first_non_repeating_character(\"abccba\") == \"c\""}
{"task_id": "Mbpp/396", "completion": "assert check_char(\"abba\") == \"Invalid\""}
{"task_id": "Mbpp/397", "completion": "assert median_numbers(25,55,65)==55.0"}
{"task_id": "Mbpp/398", "completion": "assert sum_of_digits([10,2,56,100])==14+1+1+2"}
{"task_id": "Mbpp/400", "completion": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6), (3, 4), (1, 2), (4, 3), (5, 6)]) == 3"}
{"task_id": "Mbpp/404", "completion": "assert minimum(2,1) == 1"}
{"task_id": "Mbpp/405", "completion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'x')==False"}
{"task_id": "Mbpp/406", "completion": "assert find_Parity(13) == True"}
{"task_id": "Mbpp/407", "completion": "assert rearrange_bigger(513)==531"}
{"task_id": "Mbpp/409", "completion": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (1, 1)])==1"}
{"task_id": "Mbpp/410", "completion": "assert min_val([3, 2, 4, 5, 'version', 'Python'])==2"}
{"task_id": "Mbpp/412", "completion": "assert remove_odd([1,2,3,4]) == [2,4]"}
{"task_id": "Mbpp/413", "completion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[98, 97, 91, 94]"}
{"task_id": "Mbpp/414", "completion": "assert overlapping([1,2,3,4,5],[1,2,3,4,5]) == True"}
{"task_id": "Mbpp/415", "completion": "assert max_Product([1,2,3,4,7,0,8,4,10]) == (10,8)"}
{"task_id": "Mbpp/418", "completion": "assert Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D']]) == ['A','B','C','D']"}
{"task_id": "Mbpp/419", "completion": "assert round_and_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])==55"}
{"task_id": "Mbpp/420", "completion": "assert cube_Sum(3) == 396"}
{"task_id": "Mbpp/421", "completion": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), \"-\") == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "completion": "assert find_Average_Of_Cube(3) == 9.0"}
{"task_id": "Mbpp/424", "completion": "\nWrite a function to extract only the last element of each string in the given tuple."}
{"task_id": "Mbpp/425", "completion": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],7)==2"}
{"task_id": "Mbpp/426", "completion": "\nWrite a function to filter even numbers."}
{"task_id": "Mbpp/427", "completion": "assert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "completion": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "completion": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "completion": "assert parabola_directrix(1,1,1)==-1"}
{"task_id": "Mbpp/431", "completion": "assert common_element([1,2,3,4,5], [6,7,8,9])==False"}
{"task_id": "Mbpp/432", "completion": "assert median_trapezium(15,25,35,45)==25"}
{"task_id": "Mbpp/433", "completion": "assert check_greater([1, 2, 3, 4, 5], 6) == True"}
{"task_id": "Mbpp/435", "completion": "assert last_Digit(123456789) == 9"}
{"task_id": "Mbpp/436", "completion": "assert neg_nos([1,2,3,4]) == []\n\nWrite a python function to return the even numbers in a list."}
{"task_id": "Mbpp/437", "completion": "assert remove_odd(\"python\")==(\"yhn\")"}
{"task_id": "Mbpp/438", "completion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1), (5, 6)]) == 4"}
{"task_id": "Mbpp/439", "completion": "assert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==12345678910"}
{"task_id": "Mbpp/440", "completion": "assert find_adverb_position(\"I am not sure if I can go to the party\")==(1, 13, 'not sure')"}
{"task_id": "Mbpp/441", "completion": "assert surfacearea_cube(10)==1200"}
{"task_id": "Mbpp/442", "completion": "assert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==1.0"}
{"task_id": "Mbpp/445", "completion": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "completion": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c'] ) == 2"}
{"task_id": "Mbpp/447", "completion": "\nWrite a function to find the sum of all elements in a list."}
{"task_id": "Mbpp/448", "completion": "assert cal_sum(10) == 67"}
{"task_id": "Mbpp/450", "completion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,2)==['Python', 'list']"}
{"task_id": "Mbpp/451", "completion": "assert remove_whitespaces('  ') == ''"}
{"task_id": "Mbpp/453", "completion": "assert sumofFactors(19) == 19"}
{"task_id": "Mbpp/454", "completion": "assert text_match_wordz(\"python.\")==False"}
{"task_id": "Mbpp/455", "completion": "assert check_monthnumb_number(2)==True"}
{"task_id": "Mbpp/456", "completion": "assert reverse_string_list(['Python', 'Java', 'C++', 'C'])==['nohtyP', 'avaJ', '++C', 'C']"}
{"task_id": "Mbpp/457", "completion": "assert Find_Min([[1,2],[1,2,3],[1,2,3,4]]) == [1,2]"}
{"task_id": "Mbpp/458", "completion": "assert rectangle_area(10,10)==100"}
{"task_id": "Mbpp/459", "completion": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "completion": "\nWrite a python function to get the last element of each sublist."}
{"task_id": "Mbpp/461", "completion": "assert upper_ctr('PyThOn') == 3"}
{"task_id": "Mbpp/462", "completion": "\nWrite a function to find all possible combinations of the elements of a given list."}
{"task_id": "Mbpp/463", "completion": "assert max_subarray_product([-1, -2, -3, -4, -5]) == 120"}
{"task_id": "Mbpp/465", "completion": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':''})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "completion": "assert max_product([1, 2, 3, 4, 5]) == 120"}
{"task_id": "Mbpp/470", "completion": "assert add_pairwise((1, 5, 7, 8, 10, 11)) == (6, 12, 15, 18, 12)"}
{"task_id": "Mbpp/471", "completion": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],13) ==1"}
{"task_id": "Mbpp/472", "completion": "assert check_Consecutive([1,2,3,4,5,6]) == False"}
{"task_id": "Mbpp/473", "completion": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "completion": "assert replace_char(\"polygon\",'x','l')==(\"polygon\")"}
{"task_id": "Mbpp/475", "completion": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "completion": "assert big_sum([1,2,3,4]) == 6"}
{"task_id": "Mbpp/477", "completion": "assert is_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "completion": "assert remove_lowercase(\"PYTHon123\")==('PYTH')"}
{"task_id": "Mbpp/479", "completion": "assert first_Digit(123456789) == 1"}
{"task_id": "Mbpp/554", "completion": "assert Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]"}
{"task_id": "Mbpp/555", "completion": "assert difference(10) == 2640"}
{"task_id": "Mbpp/556", "completion": "assert find_Odd_Pair([5,4,7,2,1],6) == 5"}
{"task_id": "Mbpp/557", "completion": "assert toggle_string(\"iNeuron\")==(\"iNeURON\")"}
{"task_id": "Mbpp/558", "completion": "assert digit_distance_nums(1,1) == 0"}
{"task_id": "Mbpp/559", "completion": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 10) == 12"}
{"task_id": "Mbpp/560", "completion": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "completion": "assert Find_Max_Length([[1],[1,4],[5,6,7,8],[1,4,5,6,7,8]]) == 6"}
{"task_id": "Mbpp/563", "completion": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "completion": "assert count_Pairs([1,2,3],3) == 3"}
{"task_id": "Mbpp/565", "completion": "\nWrite a python function to find the longest word in a string."}
{"task_id": "Mbpp/566", "completion": "assert sum_digits(1234567890)==45"}
{"task_id": "Mbpp/567", "completion": "assert issort_list([1,2,4,6,8,10,12,14,16,17,1])==False"}
{"task_id": "Mbpp/568", "completion": "\nWrite a function to create a list of N empty dictionaries."}
{"task_id": "Mbpp/569", "completion": "\nWrite a function to sort each sublist of strings in a given list of lists."}
{"task_id": "Mbpp/572", "completion": "assert two_unique_nums([1,2,3,2,3,4,5,5]) == [1, 4]"}
{"task_id": "Mbpp/573", "completion": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==  362880"}
{"task_id": "Mbpp/574", "completion": "assert surfacearea_cylinder(10,10)==1256.64"}
{"task_id": "Mbpp/576", "completion": "assert is_Sub_Array([1,4,3,5],[1,4,3]) == True"}
{"task_id": "Mbpp/577", "completion": "assert last_Digit_Factorial(5) == 5"}
{"task_id": "Mbpp/578", "completion": "\nWrite a function to interleave 3 lists of the same length into a single flat list."}
{"task_id": "Mbpp/579", "completion": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "completion": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9)) == (4, (6, (2, 4)), 6, 8, 9)"}
{"task_id": "Mbpp/581", "completion": "assert surface_Area(10,10) == 100"}
{"task_id": "Mbpp/582", "completion": "assert my_dict({})==True"}
{"task_id": "Mbpp/583", "completion": "assert catalan_number(11)==27414"}
{"task_id": "Mbpp/585", "completion": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]"}
{"task_id": "Mbpp/586", "completion": "assert split_Arr([12,10,5,6,52,36],4) == [6,52,36,12,10,5]"}
{"task_id": "Mbpp/587", "completion": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "completion": "assert big_diff([10,1,2,3,4]) == 9"}
{"task_id": "Mbpp/589", "completion": "assert perfect_squares(1,100)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/590", "completion": "assert polar_rect(0,1)==((1.0, 0.0), (0+1j))"}
{"task_id": "Mbpp/591", "completion": "assert swap_List([1]) == [1]"}
{"task_id": "Mbpp/592", "completion": "assert sum_Of_product(4) == 104"}
{"task_id": "Mbpp/593", "completion": "assert removezero_ip(\"172.16.17.32\")==('172.16.17.32')"}
{"task_id": "Mbpp/594", "completion": "assert diff_even_odd([1,3,5,7,8,1,6,8])==1"}
{"task_id": "Mbpp/595", "completion": "assert min_Swaps(\"1101\",\"1111\") == 0"}
{"task_id": "Mbpp/596", "completion": "assert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))"}
{"task_id": "Mbpp/597", "completion": "assert find_kth([1, 4, 8, 10], [2, 3, 6, 7, 9], 5) == 6"}
{"task_id": "Mbpp/598", "completion": "assert armstrong_number(12)==False"}
{"task_id": "Mbpp/599", "completion": "assert sum_average(100)==(5050, 50.5)"}
{"task_id": "Mbpp/600", "completion": "assert is_Even(2) == True"}
{"task_id": "Mbpp/602", "completion": "assert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "completion": "assert get_ludic(100) == [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"task_id": "Mbpp/604", "completion": "assert reverse_words(\"python\")==\"python\""}
{"task_id": "Mbpp/605", "completion": "assert prime_num(14)==False"}
{"task_id": "Mbpp/606", "completion": "assert radian_degree(180)==3.141592653589793"}
{"task_id": "Mbpp/607", "completion": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'dog') == ('dog', 42, 45)"}
{"task_id": "Mbpp/608", "completion": "assert bell_Number(3) == 5"}
{"task_id": "Mbpp/610", "completion": "assert remove_kth_element([1,1,2,3,4,4,5,1],7)==[1, 1, 2, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "completion": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 5"}
{"task_id": "Mbpp/612", "completion": "\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second."}
{"task_id": "Mbpp/614", "completion": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6), (1, 3)]) == 42"}
{"task_id": "Mbpp/615", "completion": "\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list."}
{"task_id": "Mbpp/616", "completion": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "completion": "assert div_list([10,20,30],[1, 2, 3])==[10.0,10.0,10.0]"}
{"task_id": "Mbpp/619", "completion": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "completion": "assert largest_subset([ 1, 3, 6, 13, 17, 18, 20 ]) == 5"}
{"task_id": "Mbpp/622", "completion": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 6) == 20.5"}
{"task_id": "Mbpp/623", "completion": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/624", "completion": "assert is_upper(\"Person\") ==\"PERSON\""}
{"task_id": "Mbpp/626", "completion": "assert triangle_area(0) == None"}
{"task_id": "Mbpp/628", "completion": "assert replace_spaces(\"My Name is Dawood \") == 'My%20Name%20is%20Dawood%20'"}
{"task_id": "Mbpp/629", "completion": "assert Split([1,3,5]) == []"}
{"task_id": "Mbpp/630", "completion": "assert get_coordinates((1, 1)) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]"}
{"task_id": "Mbpp/631", "completion": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji The Jungle'"}
{"task_id": "Mbpp/632", "completion": "assert move_zero([0,0,0,0,0,0]) == [0,0,0,0,0,0]"}
{"task_id": "Mbpp/633", "completion": "assert pair_xor_Sum([1,2,3,4],4) == 10"}
{"task_id": "Mbpp/635", "completion": "assert heap_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "completion": "assert noprofit_noloss(1500,1500)==True"}
{"task_id": "Mbpp/638", "completion": "assert wind_chill(120,35)==40"}
{"task_id": "Mbpp/639", "completion": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"task_id": "Mbpp/640", "completion": "assert remove_parenthesis([\"python (chrome) (firefox)\"])==(\"python (chrome)\")"}
{"task_id": "Mbpp/641", "completion": "assert is_nonagonal}
{"task_id": "Mbpp/643", "completion": "assert text_match_wordz_middle(\"abczabc.\")==False"}
{"task_id": "Mbpp/644", "completion": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],6) == [6, 5, 4, 3, 2, 1]"}
{"task_id": "Mbpp/720", "completion": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "completion": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3]]) == 5.2"}
{"task_id": "Mbpp/722", "completion": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.0,60)=={'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68)}"}
{"task_id": "Mbpp/723", "completion": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"task_id": "Mbpp/724", "completion": "assert power_base_sum(3,100)==489"}
{"task_id": "Mbpp/725", "completion": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "completion": "assert multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12, 20)"}
{"task_id": "Mbpp/728", "completion": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"task_id": "Mbpp/730", "completion": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "completion": "assert lateralsurface_cone(15,12)==1052.0784580437625"}
{"task_id": "Mbpp/732", "completion": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"task_id": "Mbpp/733", "completion": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 4"}
{"task_id": "Mbpp/734", "completion": "assert sum_Of_Subarray_Prod([1,2,3,4]) == 100"}
{"task_id": "Mbpp/735", "completion": "assert toggle_middle_bits(10) == 14"}
{"task_id": "Mbpp/736", "completion": "assert left_insertion([1,2,4,5],3)==2"}
{"task_id": "Mbpp/737", "completion": "assert not check_str(\"bannie\")"}
{"task_id": "Mbpp/739", "completion": "assert find_Index(3) == 12"}
{"task_id": "Mbpp/740", "completion": "assert tuple_to_dict((1, 5, 7, 10, 13, 5, 15)) == {1: 5, 7: 10, 13: 5, 15: 15}"}
{"task_id": "Mbpp/741", "completion": "assert all_Characters_Same(\"python\") == True\n\nWrite a python function to check whether all the characters are same or not."}
{"task_id": "Mbpp/742", "completion": "assert area_tetrahedron(4)==24.015703024454506"}
{"task_id": "Mbpp/743", "completion": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],10)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Mbpp/744", "completion": "assert check_none((10, 4, 5, 6, 0)) == False"}
{"task_id": "Mbpp/745", "completion": "assert divisible_by_digits(1,100)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 25, 33, 36, 44, 49, 55, 66, 77, 88, 99]"}
{"task_id": "Mbpp/746", "completion": "assert sector_area(4,90)==12.566370614359172"}
{"task_id": "Mbpp/748", "completion": "assert capital_words_spaces(\"Python is a programming language\") == 'Python is a programming language'"}
{"task_id": "Mbpp/749", "completion": "\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/"}
{"task_id": "Mbpp/750", "completion": "assert add_tuple([5, 6, 7], (9, 10, 11)) == [5, 6, 7, 9, 10, 11]"}
{"task_id": "Mbpp/751", "completion": "assert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == False"}
{"task_id": "Mbpp/752", "completion": "assert jacobsthal_num(10) == 21"}
{"task_id": "Mbpp/753", "completion": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10)]"}
{"task_id": "Mbpp/754", "completion": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]"}
{"task_id": "Mbpp/755", "completion": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2"}
{"task_id": "Mbpp/757", "completion": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"])== 3"}
{"task_id": "Mbpp/758", "completion": "\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list."}
{"task_id": "Mbpp/759", "completion": "assert is_decimal('123.111')==False"}
{"task_id": "Mbpp/760", "completion": "assert unique_Element([1,2,3]) == False"}
{"task_id": "Mbpp/762", "completion": "assert check_monthnumber_number(12)==True"}
{"task_id": "Mbpp/763", "completion": "assert find_min_diff((1,5,3,19,18,25),10) == 1"}
{"task_id": "Mbpp/764", "completion": "assert number_ctr('123456789') == 9"}
{"task_id": "Mbpp/765", "completion": "assert is_polite(11) == 13"}
{"task_id": "Mbpp/766", "completion": "assert pair_wise([1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5), (5, 5), (5, 6), (6, 6), (6, 7), (7, 7), (7, 8), (8, 8), (8, 9), (9, 9), (9, 10)]"}
{"task_id": "Mbpp/767", "completion": "assert get_pairs_count([1,2,3,4],5) == 0"}
{"task_id": "Mbpp/769", "completion": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35, 10])) == [20, 30, 15]"}
{"task_id": "Mbpp/770", "completion": "assert odd_num_sum(3) == 250"}
{"task_id": "Mbpp/771", "completion": "assert check_expression(\"{(})[{}]\") == False"}
{"task_id": "Mbpp/772", "completion": "assert remove_length('The person is most value tet', 4) == 'The is most value tet'"}
{"task_id": "Mbpp/773", "completion": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"task_id": "Mbpp/775", "completion": "assert odd_position([2,1,4,3,6,7,6,4]) == False"}
{"task_id": "Mbpp/777", "completion": "assert find_sum([1,2,3,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "completion": "assert pack_consecutive_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "completion": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "completion": "assert count_divisors(12)"}
{"task_id": "Mbpp/782", "completion": "assert odd_length_sum([1,2,4,5]) == 14"}
{"task_id": "Mbpp/783", "completion": "assert rgb_to_hsv(0, 0, 0)==(0, 0.0, 0.0)"}
{"task_id": "Mbpp/784", "completion": "assert mul_even_odd([1,3,5,7,4,1,6,8,9])==4"}
{"task_id": "Mbpp/785", "completion": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)"}
{"task_id": "Mbpp/786", "completion": "assert right_insertion([1,2,4,5],3)==2"}
{"task_id": "Mbpp/787", "completion": "assert text_match_three(\"abbbbb\")"}
{"task_id": "Mbpp/788", "completion": "assert new_tuple([\"WEB\", \"is\"], [\"best\"]) == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "completion": "assert even_position([2,4,6]) == True"}
{"task_id": "Mbpp/791", "completion": "assert remove_nested((1, 5, 7, (4, 6), 10, (1, 2, 3))) == (1, 5, 7, 10, (1, 2, 3))"}
{"task_id": "Mbpp/792", "completion": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21]]) == 5"}
{"task_id": "Mbpp/793", "completion": "assert last([1,2,3],2) == 1"}
{"task_id": "Mbpp/794", "completion": "assert not text_starta_endb(\"aab\")"}
{"task_id": "Mbpp/796", "completion": "assert return_sum({'a': 6, 'b': 15, 'c':26}) == 47"}
{"task_id": "Mbpp/797", "completion": "assert sum_in_range(3,5) == 9"}
{"task_id": "Mbpp/798", "completion": "assert _sum([1, 2, 3, 4]) == 10"}
{"task_id": "Mbpp/799", "completion": "assert left_rotate(16,3) == 16"}
{"task_id": "Mbpp/800", "completion": "assert remove_all_spaces('python program')==('pythonprogram')"}
{"task_id": "Mbpp/801", "completion": "assert test_three_equal(1,1,2) == 2"}
{"task_id": "Mbpp/803", "completion": "assert is_perfect_square(16)"}
{"task_id": "Mbpp/804", "completion": "assert is_product_even([4,6,7])"}
{"task_id": "Mbpp/805", "completion": "assert max_sum_list([[5,4,8,6], [1,2,3], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"task_id": "Mbpp/806", "completion": "assert max_run_uppercase('GEMKSFORGERKSISBEST') == 8"}
{"task_id": "Mbpp/807", "completion": "assert first_odd([2,4,6]) == None\n\nWrite a python function to find the last even number in a given list of numbers."}
{"task_id": "Mbpp/808", "completion": "assert check_K((10, 4, 5, 6, 8), 10) == False"}
{"task_id": "Mbpp/809", "completion": "assert check_smaller((1, 2, 3), (1, 2, 3)) == False"}
