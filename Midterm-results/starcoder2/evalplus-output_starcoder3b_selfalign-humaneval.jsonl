{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return set(list1) & set(list2)\n"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/4", "completion": "\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return (xor_result & (xor_result - 1)) == 0\n"}
{"task_id": "Mbpp/7", "completion": "\nimport re\n\ndef find_char_long(string):\n    return re.findall(r'\\w{4,}', string)\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(nums):\n    return [num**2 for num in nums]\n"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(string):\n    for i in range(1, len(string)):\n        if string[i:] + string[:i] == string:\n            return i\n    return 0\n"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(string, char):\n    index = string.find(char)\n    if index != -1:\n        string = string.replace(char, \"\", 1)\n        string = string.replace(char, \"\", -1)\n    return string\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(height, base_length, base_width):\n    area = 0.5 * base_length * base_width\n    volume = area * height\n    return volume\n"}
{"task_id": "Mbpp/16", "completion": "\nimport re\n\ndef text_lowercase_underscore(text):\n    return bool(re.match(r\"[a-z]+(_[a-z]+)*$\", text))\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(first_string, second_string):\n    for char in second_string:\n        if char in first_string:\n            first_string = first_string.replace(char, \"\", 1)\n    return first_string\n"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(arr):\n    return len(arr) != len(set(arr))\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_woodall(number):\n    square_root = number ** 0.5\n    if square_root.is_integer():\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/56", "completion": "\ndef check(num):\n    num_str = str(num)\n    reverse_str = num_str[::-1]\n    if int(reverse_str) == num - 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(\"\".join(map(str, digits)))\n"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n"}
{"task_id": "Mbpp/59", "completion": "\ndef is_octagonal(n):\n    return n * (2 * n - 1)\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(nums):\n    return min(nums)\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuple_list):\n    differences = []\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            difference = abs(tuple_list[i][1] - tuple_list[j][0])\n            differences.append(difference)\n    return max(differences)\n"}
{"task_id": "Mbpp/64", "completion": "\ndef sort_by_second(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) is list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or\n            all(arr[i] >= arr[i+1] for i in range(len(arr)-1)))\n"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(lst, sublst):\n    for i in range(len(lst)-len(sublst)+1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False\n"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    return all(len(tuples[0]) == len(t) for t in tuples)\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(lst):\n    n = len(lst)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        i = 0\n        while i + gap < n:\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n            i += 1\n        if not swapped:\n            gap = 1\n    return lst\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(num):\n    if num == 0 or num == 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % (i * i) == 0:\n            return True\n    return False\n"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(patterns, sequence):\n    if len(patterns) != len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]\n"}
{"task_id": "Mbpp/77", "completion": "\ndef is_Diff(num):\n    num_str = str(num)\n    total = 0\n    for i, digit in enumerate(num_str):\n        digit = int(digit)\n        if i % 2 == 0:\n            total += digit\n        else:\n            total -= digit\n    return total % 11 == 0\n"}
{"task_id": "Mbpp/79", "completion": "\ndef word_len(word):\n    return len(word) % 2 == 1\n"}
{"task_id": "Mbpp/80", "completion": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) * (n + 3) // 12\n"}
{"task_id": "Mbpp/82", "completion": "\nimport math\n\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius**3\n"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(string):\n    sum_ascii = 0\n    for char in string:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))\n"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return sequence(n - 1) + sequence(n - 2)\n"}
{"task_id": "Mbpp/85", "completion": "\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius**2\n"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"}
{"task_id": "Mbpp/88", "completion": "\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    stack = []\n    closest_smaller = -float('inf')\n\n    for num in range(n, -1, -1):\n        if num < closest_smaller:\n            closest_smaller = num\n        stack.append(num)\n\n    return closest_smaller\n"}
{"task_id": "Mbpp/90", "completion": "\ndef len_log(words):\n    return max(len(word) for word in words)\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(num):\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b\n"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(lst):\n    return lst[min(enumerate(lst), key=lambda x: x[1][1])[0]]\n"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(lst_of_lsts):\n    return min(len(sub_lst) for sub_lst in lst_of_lsts)\n"}
{"task_id": "Mbpp/96", "completion": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/97", "completion": "\nfrom collections import defaultdict\n\ndef frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency = defaultdict(int)\n    for item in flat_list:\n        frequency[item] += 1\n    return frequency\n"}
{"task_id": "Mbpp/98", "completion": "\nimport math\n\ndef multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)\n"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(decimal_num):\n    binary_str = ''\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num //= 2\n    return binary_str\n"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(num):\n    num_str = str(num)\n    reversed_str = num_str[::-1]\n    if num_str == reversed_str:\n        return num + 1\n    else:\n        return int(reversed_str)\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    return sorted(arr)[k-1]\n"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(snake_case_string):\n    words = snake_case_string.split('_')\n    camel_case_words = [word.title() for word in words]\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    if n == 1 or m == 1:\n        return n + m - 2\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n"}
{"task_id": "Mbpp/105", "completion": "\ndef count(lst):\n    return sum(1 for elem in lst if elem)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(lst, tup):\n    return tup + tuple(lst)\n"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = sorted(list1 + list2 + list3)\n    return merged_list\n"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(binary_string, rotations):\n    for _ in range(rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]\n    return sum(int(digit) for digit in binary_string)\n"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    flattened_list = [item for sublist in nested_lists for item in sublist]\n    unique_items = set(flattened_list)\n    common_elements = []\n    for item in unique_items:\n        if all(item in sublist for sublist in nested_lists):\n            common_elements.append(item)\n    return common_elements\n"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "completion": "\ndef empty_dit(lst):\n    for d in lst:\n        if d:\n            return False\n    return True\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [(float(x), float(y)) for x, y in lst]\n"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(string):\n    return string.split()\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == mid + 1:\n            return mid + 1\n\n        if arr[mid] < mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for t1, t2 in lst:\n        product = t1 * t2\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/123", "completion": "\ndef sum_amicable_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum1, sum2 = 0, 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum1 += j\n        for k in range(1, sum1):\n            if sum1 % k == 0:\n                sum2 += k\n        if sum1 != i and sum2 != i and sum1 == sum2:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/124", "completion": "\nimport cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(complex(real, imag))\n"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(binary_string):\n    max_length = 0\n    for i in range(len(binary_string)):\n        for j in range(i, len(binary_string)):\n            length = j - i + 1\n            count_0 = binary_string[i:j+1].count(\"0\")\n            count_1 = binary_string[i:j+1].count(\"1\")\n            max_length = max(max_length, length - abs(count_0 - count_1))\n    return max_length\n"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_common_divisors(num1, num2):\n    divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"}
{"task_id": "Mbpp/127", "completion": "\ndef multiply_int(a, b):\n    return a * b\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    size = rows\n    sum_of_rows = [0] * size\n    sum_of_cols = [0] * size\n    sum_of_diagonals = [0, 0]\n    for i in range(size):\n        for j in range(size):\n            sum_of_rows[i] += matrix[i][j]\n            sum_of_cols[j] += matrix[i][j]\n            if i == j:\n                sum_of_diagonals[0] += matrix[i][j]\n            if i + j == size - 1:\n                sum_of_diagonals[1] += matrix[i][j]\n    for i in range(size):\n        if sum_of_rows[i] != sum_of_diagonals[0] or sum_of_cols[i] != sum_of_diagonals[0]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    max_count = 0\n    max_item = None\n    for item in set(lst):\n        count = lst.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    chars = list(string)\n    i, j = 0, len(chars) - 1\n    while i < j:\n        while i < j and chars[i] not in vowels:\n            i += 1\n        while i < j and chars[j] not in vowels:\n            j -= 1\n        chars[i], chars[j] = chars[j], chars[i]\n        i += 1\n        j -= 1\n    return ''.join(chars)\n"}
{"task_id": "Mbpp/132", "completion": "\ndef tup_string(tup):\n    return ''.join(tup)\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(numbers):\n    sum_negative = 0\n    for num in numbers:\n        if num < 0:\n            sum_negative += num\n    return sum_negative\n"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n"}
{"task_id": "Mbpp/137", "completion": "\nimport math\n\ndef zero_count(arr):\n    zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(arr)\n"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(num):\n    while num > 1:\n        if num % 2 == 1:\n            return False\n        num //= 2\n    return num == 1\n"}
{"task_id": "Mbpp/139", "completion": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(lists):\n    result = set()\n    for sublist in lists:\n        for element in sublist:\n            result.add(element)\n    return result\n"}
{"task_id": "Mbpp/141", "completion": "\ndef pancake_sort(elements):\n    sorted_elements = []\n    for element in sorted(elements, reverse=True):\n        index = elements.index(element)\n        elements = elements[:index + 1] + list(reversed(elements[index + 1:]))\n        sorted_elements.append(element)\n    return sorted_elements\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(tup):\n    count = 0\n    for item in tup:\n        if type(item) is list:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    arr.sort()\n    return arr[-1] - arr[0]\n"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(lst, remove_lst):\n    return [element for element in lst if element not in remove_lst]\n"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    total = 0\n    for i in range(n):\n        total += n - 2 * i\n    return total\n"}
{"task_id": "Mbpp/164", "completion": "\ndef sum_of_divisors(n):\n    return sum(i for i in range(1, n + 1) if n % i == 0)\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(string):\n    count = 0\n    for char in string.lower():\n        if char.isalpha() and char.lower() == chr(ord(char) - ord('a') + 1):\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"}
{"task_id": "Mbpp/168", "completion": "\ndef frequency(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i:i+3] == 'std':\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/222", "completion": "\ndef check_type(tup):\n    return all(isinstance(x, type(tup[0])) for x in tup)\n"}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, element):\n    count = arr.count(element)\n    return count > n // 2\n"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(string):\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)\n"}
{"task_id": "Mbpp/227", "completion": "\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, n):\n                if arr[j] >= 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return arr\n"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(string, char):\n    return string.replace(\" \", char)\n"}
{"task_id": "Mbpp/232", "completion": "\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n"}
{"task_id": "Mbpp/233", "completion": "\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n"}
{"task_id": "Mbpp/234", "completion": "\ndef volume_cube(side_length):\n    return side_length ** 3\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(num):\n    even_bits = 0b00000000  # 8 even bits set to 0\n    return num | even_bits\n"}
{"task_id": "Mbpp/237", "completion": "\nfrom collections import defaultdict\n\ndef check_occurences(tuples):\n    counts = defaultdict(int)\n    for t in tuples:\n        counts[t] += 1\n    return dict(counts)\n"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substring = string[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    sequences = [1] * n\n    for i in range(1, n):\n        sequences[i] = 0\n        for j in range(1, m + 1):\n            if j >= 2 * sequences[i - 1]:\n                sequences[i] += 1\n    return sequences[n - 1]\n"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/244", "completion": "\ndef is_perfect_square(num):\n    return num ** 0.5 % 1 == 0\n\ndef next_perfect_square(num):\n    while True:\n        num += 1\n        if is_perfect_square(num):\n            return num\n"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum(arr):\n    increasing = [arr[0]]\n    decreasing = [arr[-1]]\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            increasing.append(arr[i])\n        else:\n            increasing.append(increasing[-1])\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            decreasing.append(arr[i])\n        else:\n            decreasing.append(decreasing[-1])\n    decreasing.reverse()\n    max_sum = 0\n    for i in range(len(arr)):\n        if increasing[i] and decreasing[i]:\n            max_sum = max(max_sum, increasing[i] + decreasing[i])\n\n    return max_sum\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n"}
{"task_id": "Mbpp/252", "completion": "\nimport cmath\n\ndef convert(z):\n    return cmath.polar(z)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n"}
{"task_id": "Mbpp/255", "completion": "\nfrom itertools import combinations\n\ndef combinations_colors(colors, n):\n    return list(combinations(colors, n))\n"}
{"task_id": "Mbpp/256", "completion": "\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/257", "completion": "\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(tuple1, tuple2):\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 7\n    if n == 4:\n        return 11\n    if n == 5:\n        return 13\n    if n == 6:\n        return 17\n    if n == 7:\n        return 19\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n   "}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x / y, tuple1, tuple2))\n"}
{"task_id": "Mbpp/262", "completion": "\ndef split_two_parts(lst, L):\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)\n"}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(human_age):\n    dog_years = 7 * human_age\n    return dog_years\n"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side):\n    return 6 * side ** 2\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i - 1) ** 2\n    return sum\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    return n * (n + 1) // 2\n"}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(lst):\n    sum_even = 0\n    for i, num in enumerate(lst):\n        if num % 2 == 0 and i % 2 == 0:\n            sum_even += num\n    return sum_even\n"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2 * n, 2):\n        sum += i ** 5\n    return sum\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(input_list):\n    return [tup[1] for tup in input_list]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n"}
{"task_id": "Mbpp/274", "completion": "\ndef even_binomial_Coeff(n, k):\n    return n * (n - 1) * (n - 2) * ... * (n - k + 2) * (n - k + 1) / k!\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(2, n + 1, 2):\n        sum += even_binomial_Coeff(n, k)\n    return sum\n"}
{"task_id": "Mbpp/276", "completion": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(dictionary, n):\n    return dict(filter(lambda item: item[1] >= n, dictionary.items()))\n"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/279", "completion": "\ndef is_num_decagonal(n):\n    return n * (3 * n - 1) // 2\n"}
{"task_id": "Mbpp/280", "completion": "\ndef sequential_search(arr, element):\n    for i, val in enumerate(arr):\n        if val == element:\n            return True, i\n    return False, -1\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(num):\n    digits = [int(digit) for digit in str(num)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True\n"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n"}
{"task_id": "Mbpp/285", "completion": "\nimport re\n\ndef text_match_two_three(text):\n    pattern = r\"a.*b{2,3}\"\n    return bool(re.match(pattern, text))\n"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(arr, k, n):\n    arr_repeated = [arr for _ in range(k)]\n    max_sum = float(\"-inf\")\n    for i in range(n):\n        for j in range(len(arr_repeated[i])):\n            max_sum = max(max_sum, arr_repeated[i][j])\n    return max_sum\n"}
{"task_id": "Mbpp/287", "completion": "\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(lst):\n    max_length = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_length, max_list\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(dividend, divisor):\n    return dividend // divisor\n"}
{"task_id": "Mbpp/293", "completion": "\nimport math\n\ndef otherside_rightangle(a,b):\n    c = math.sqrt(a**2 + b**2)\n    return c\n"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    return max(lst, key=lambda x: type(x).__name__)\n"}
{"task_id": "Mbpp/295", "completion": "\ndef sum_div(num):\n    sum = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/296", "completion": "\ndef merge_and_count_inversions(left, right):\n    result = []\n    i, j = 0, 0\n    inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    result += left[i:]\n    result += right[j:]\n    return result, inv_count\n\ndef merge_sort_and_count_inversions(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, inv_count_left = merge_sort_and_count_inversions(arr[:mid])\n    right, inv_count_right = merge_sort_and_count_inversions(arr[mid:])\n    merged_arr, inv_count_merged = merge_and_count_inversions(left, right)\n    return merged_arr, inv_count_left + inv_count_right + inv_count_merged\n\ndef get_Inv_Count(arr):\n    _, inv_count = merge_sort_and_count_inversions(arr)\n    return inv_count\n"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(lst):\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(tuples):\n    max_sum = 0\n    max_tuple = None\n    for name, score in tuples:\n        if score > max_sum:\n            max_sum = score\n            max_tuple = (name, score)\n    return max_tuple\n"}
{"task_id": "Mbpp/300", "completion": "\nimport math\n\ndef count_binary_seq(n):\n    return 2 ** (2 * n)\n"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(words):\n    return [word for word in words if word.startswith(\"p\")]\n"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[0] = arr[0]\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for l in range(j - 1, -1, -1):\n            if arr[l] < arr[j] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    max_sum = max(dp)\n    for j in range(n):\n        if dp[j] == max_sum and j > i and j < k:\n            return max_sum\n    return -1\n"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(list1, list2, k):\n    products = []\n    for i in range(k):\n        max1 = max(list1)\n        max2 = max(list2)\n        products.append(max1 * max2)\n        list1.remove(max1)\n        list2.remove(max2)\n    return products\n"}
{"task_id": "Mbpp/309", "completion": "\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(string):\n    return tuple(string)\n"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(num):\n    mask = 1\n    while num & mask:\n        mask <<= 1\n    num |= mask\n    return num\n"}
{"task_id": "Mbpp/312", "completion": "\nimport math\n\ndef volume_cone(radius, height):\n    return math.pi * radius**2 * height / 3\n"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    if n == 1 or n == 2:\n        return 2\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(lst, format_string):\n    return [format_string.format(item) for item in lst]\n"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        inner_dict = {list1[i]: {list2[i]: list3[i]}}\n        result.append(inner_dict)\n    return result\n"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max(max_sum, i + get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    return max_sum\n"}
{"task_id": "Mbpp/394", "completion": "\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(string):\n    char_counts = {}\n    for char in string:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    for char in string:\n        if char_counts[char] == 1:\n            return char\n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n    return total\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n"}
{"task_id": "Mbpp/404", "completion": "\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/405", "completion": "\ndef check_tuplex(tup, element):\n    return element in tup\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(num):\n    binary_string = bin(num)\n    parity = binary_string.count(\"1\") % 2\n    return parity == 1\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(num):\n    num_list = list(str(num))\n    num_list.sort(reverse=True)\n    return int(\"\".join(num_list))\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(tuples):\n    products = [x * y for x, y in tuples]\n    return min(products)\n"}
{"task_id": "Mbpp/410", "completion": "\ndef min_val(lst):\n    return min(lst, key=lambda x: type(x).__name__)\n"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(lst):\n    return [n for n in lst if n % 2 == 0]\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(lst, n):\n    return [item[n] for item in lst]\n"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    return any(x in seq2 for x in seq1)\n"}
{"task_id": "Mbpp/415", "completion": "\ndef max_Product(arr):\n    arr.sort(reverse=True)\n    return (arr[0], arr[1])\n"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return sum\n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(tup)\n"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n    average = sum_of_cubes / n\n    return average\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(input_tuple):\n    return [s[-1] for s in input_tuple]\n"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/426", "completion": "\ndef is_odd(num):\n    return num % 2 == 1\n\ndef filter_oddnumbers(nums):\n    return list(filter(is_odd, nums))\n"}
{"task_id": "Mbpp/427", "completion": "\ndef change_date_format(date_string):\n    year, month, day = date_string.split(\"-\")\n    return f\"{day}-{month}-{year}\"\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(tuple1, tuple2):\n    return tuple(x & y for x, y in zip(tuple1, tuple2))\n"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a,h,k):\n    return -2*k\n"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a, b, c):\n    sorted_sides = sorted([a, b, c])\n    return (sorted_sides[1] + sorted_sides[2]) / 2\n"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr, num):\n    for element in arr:\n        if element > num:\n            return True\n    return False\n"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(num):\n    return num % 10\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n"}
{"task_id": "Mbpp/437", "completion": "\ndef remove_odd(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(tuples):\n    counts = {}\n    for t in tuples:\n        if t in counts:\n            counts[t] += 1\n        else:\n            counts[t] = 1\n    return sum(count // 2 for count in counts.values())\n"}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(numbers):\n    return int(\"\".join(str(n) for n in numbers))\n"}
{"task_id": "Mbpp/440", "completion": "\nimport re\n\ndef find_adverb_position(sentence):\n    pattern = r\"\\w+ly\"\n    match = re.search(pattern, sentence)\n    if match:\n        return match.start(), match.end(), match.group()\n    else:\n        return None\n"}
{"task_id": "Mbpp/441", "completion": "\ndef surfacearea_cube(size):\n    return 6 * size ** 2\n"}
{"task_id": "Mbpp/442", "completion": "\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(x * y for x, y in zip(tuple1[i], tuple2[i])))\n    return tuple(result)\n"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(tup,lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n"}
{"task_id": "Mbpp/448", "completion": "\ndef perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return perrin(n-1) + perrin(n-2) - perrin(n-3)\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(input_list, size):\n    return [s for s in input_list if len(s) <= size]\n"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(string):\n    return ''.join(char for char in string if char != ' ')\n"}
{"task_id": "Mbpp/453", "completion": "\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/454", "completion": "\nimport re\n\ndef text_match_wordz(text):\n    pattern = r\"\\w*z\\w*\"\n    return bool(re.search(pattern, text))\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string(string):\n    return ''.join(reversed(string))\n\ndef reverse_string_list(string_list):\n    return [reverse_string(string) for string in string_list]\n"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "Mbpp/458", "completion": "\ndef rectangle_area(length, width):\n    return length * width\n"}
{"task_id": "Mbpp/459", "completion": "\nimport re\n\ndef remove_uppercase(text):\n    return re.sub(r'[A-Z]', '', text)\n"}
{"task_id": "Mbpp/460", "completion": "\ndef Extract(lst):\n    return [sub[0] for sub in lst]\n"}
{"task_id": "Mbpp/461", "completion": "\ndef upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/462", "completion": "\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    head = lst[0]\n    rest = lst[1:]\n    return [[head] + c for c in combinations_list(rest)] + combinations_list(rest)\n"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(nums):\n    max_product = nums[0]\n    current_product = nums[0]\n    for num in nums[1:]:\n        current_product = max(num, current_product * num, -current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"}
{"task_id": "Mbpp/468", "completion": "\ndef max_product(nums):\n    max_product = 1\n    for num in nums:\n        max_product *= num\n        if max_product > 10**12:\n            return -1\n    return max_product\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(tup):\n    return tuple(a + b for a, b in zip(tup, tup[1:]))\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True\n"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(list1, list2):\n    set1 = set(map(frozenset, list1))\n    set2 = set(map(frozenset, list2))\n    return set.intersection(set1, set2)\n"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(string, old, new):\n    return string.replace(old, new)\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])\n"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n"}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(string):\n    return string.lower()\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n"}
{"task_id": "Mbpp/479", "completion": "\ndef first_Digit(num):\n    return int(str(num)[0])\n"}
{"task_id": "Mbpp/554", "completion": "\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) / 6\n    sum_of_n = n * (n + 1) / 2\n    return sum_of_cubes - sum_of_n\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    return s.swapcase()\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    if len(num1_str) != len(num2_str):\n        raise ValueError(\"The two numbers must have the same number of digits.\")\n    total_distance = 0\n    for i in range(len(num1_str)):\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n        distance = abs(digit1 - digit2)\n        total_distance += distance\n\n    return total_distance\n"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(nums, target):\n    current_sum = 0\n    max_sum = 0\n    start = 0\n    end = 0\n\n    for i, num in enumerate(nums):\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end = i\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n\n    return max_sum\n"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    union_set = set1.union(set2)\n    return sorted(union_set)\n"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n"}
{"task_id": "Mbpp/563", "completion": "\nimport re\n\ndef extract_values(string):\n    pattern = r'\".*?\"|\\'.*?\\''\n    matches = re.findall(pattern, string)\n    return [match.strip('\"\\'') for match in matches]\n"}
{"task_id": "Mbpp/564", "completion": "\ndef count_pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/565", "completion": "\ndef split(string):\n    return [char for char in string]\n"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num //= 10\n    return total\n"}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(lst):\n    return sorted(lst)==lst\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(N):\n    return [{} for _ in range(N)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n"}
{"task_id": "Mbpp/572", "completion": "\ndef two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)\n"}
{"task_id": "Mbpp/573", "completion": "\nfrom collections import Counter\n\ndef unique_product(lst):\n    counter = Counter(lst)\n    unique_numbers = set(lst)\n    product = 1\n    for number in unique_numbers:\n        product *= number ** counter[number]\n    return product\n"}
{"task_id": "Mbpp/574", "completion": "\nimport math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius**2\n    side_area = 2 * math.pi * radius * height\n    surface_area = 2 * base_area + side_area\n    return surface_area\n"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(arr1, arr2):\n    n = len(arr1)\n    m = len(arr2)\n    for i in range(n-m+1):\n        if arr1[i] == arr2[0] and arr1[i+1:i+m+1] == arr2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1) % 10\n"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]\n"}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return set1.symmetric_difference(set2)\n"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)\n"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(base_edge, height):\n    return 2 * base_edge * height + 2 * base_edge**2\n"}
{"task_id": "Mbpp/582", "completion": "\ndef my_dict(my_dict):\n    return not bool(my_dict)\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    if n <= 1:\n        return 1\n    result = 0\n    for i in range(n):\n        result += catalan_number(i) * catalan_number(n - i - 1)\n    return result\n"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda item: item['price'], reverse=True)\n    return sorted_items[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n"}
{"task_id": "Mbpp/587", "completion": "\ndef list_tuple(lst):\n    return tuple(lst)\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(lst):\n    return max(lst) - min(lst)\n"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(start, end):\n    perfect_squares = []\n    for num in range(start, end + 1):\n        sqrt = num ** 0.5\n        if sqrt.is_integer():\n            perfect_squares.append(num)\n    return perfect_squares\n"}
{"task_id": "Mbpp/590", "completion": "\nimport cmath\n\ndef polar_rect(r, theta):\n    return r * cmath.rect(1, theta), r * cmath.rect(1, theta).conjugate()\n"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n"}
{"task_id": "Mbpp/592", "completion": "\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i * (n - i + 1))\n    return sum\n"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    return '.'.join([str(int(octet)) for octet in ip.split('.') if int(octet) != 0])\n"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(lst):\n    even_found = False\n    odd_found = False\n    for num in lst:\n        if num % 2 == 0:\n            if not even_found:\n                even_found = True\n                even = num\n        else:\n            if not odd_found:\n                odd_found = True\n                odd = num\n    return odd - even\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(num1, num2):\n    count = 0\n    for i in range(len(num1)):\n        if num1[i] != num2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/596", "completion": "\nimport sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(arr1, arr2, k):\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    for _ in range(k):\n        if i == n1:\n            return arr2[j]\n        if j == n2:\n            return arr1[i]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min(arr1[i], arr2[j])\n"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(num):\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = 0\n    for digit in num_str:\n        sum_of_digits += int(digit) ** num_digits\n    return sum_of_digits == num\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(num):\n    return num % 2 == 0\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(s):\n    char_counts = {}\n    for char in s:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    for char, count in char_counts.items():\n        if count > 1:\n            return char\n    return None\n"}
{"task_id": "Mbpp/603", "completion": "\ndef is_lucas_number(n):\n    if n <= 0:\n        return False\n    lucas = [2, 1]\n    while lucas[-1] < n:\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[-1] == n\n\ndef get_ludic(n):\n    return [i for i in range(1, n + 1) if is_lucas_number(i)]\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(string):\n    words = string.split()\n    words.reverse()\n    return \" \".join(words)\n"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(num):\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/606", "completion": "\nimport math\n\ndef radian_degree(degree):\n    radian = degree * math.pi / 180\n    return radian\n"}
{"task_id": "Mbpp/607", "completion": "\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return n + bell_Number(n-1)\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(lst, k):\n    return [element for i, element in enumerate(lst) if i != k]\n"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    return max(column[n] for column in matrix)\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lists):\n    return [\n        [sublist[0] for sublist in lists],\n        [sublist[1] for sublist in lists]\n    ]\n"}
{"task_id": "Mbpp/614", "completion": "\ndef cummulative_sum(tup_list):\n    return sum(sum(tup) for tup in tup_list)\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(tuple_of_tuples):\n    return [sum(t)/len(t) for t in tuple_of_tuples]\n"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(tuple1, tuple2):\n    return tuple(map(lambda x, y: x % y, tuple1, tuple2))\n"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]\n"}
{"task_id": "Mbpp/619", "completion": "\nimport re\n\ndef move_num(s):\n    return re.sub(r'\\d+', lambda m: m.group().rjust(100, '0'), s)\n"}
{"task_id": "Mbpp/620", "completion": "\ndef largest_subset(numbers):\n    numbers.sort()\n    dp = [1] * len(numbers)\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        return merged_list[size // 2]\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(nums, n):\n    return [num**n for num in nums]\n"}
{"task_id": "Mbpp/624", "completion": "\ndef is_upper(string):\n    return string.upper()\n"}
{"task_id": "Mbpp/626", "completion": "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    return (math.sqrt(3) / 4) * (radius ** 2)\n"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"}
{"task_id": "Mbpp/629", "completion": "\ndef Split(lst):\n    return [num for num in lst if num % 2 == 0]\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x + dx, y + dy] for dx in range(3) for dy in range(3)]\n"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(string):\n    return string.replace('_', ' ').replace(' ', '_')\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zero(lst):\n    n = len(lst)\n    next_nonzero = 0\n    for i in range(n):\n        if lst[i] != 0:\n            lst[i], lst[next_nonzero] = lst[next_nonzero], lst[i]\n            next_nonzero += 1\n    return lst\n"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(nums, k):\n    xor_sum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            xor_sum ^= nums[i] ^ nums[j]\n    return xor_sum\n"}
{"task_id": "Mbpp/635", "completion": "\ndef heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1  # Left child\n    r = 2 * i + 2  # Right child\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n        heapify(arr, n, largest)\n\ndef build_heap(arr, n):\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\ndef heap_sort(arr):\n    n = len(arr)\n    build_heap(arr, n)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n    return arr\n"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(current_price, initial_price):\n    return current_price == initial_price\n"}
{"task_id": "Mbpp/638", "completion": "\ndef wind_chill(velocity, temperature):\n    wind_chill = 13.12 + 0.6215 * temperature - 11.37 * velocity ** 0.16 + 0.3965 * temperature * velocity ** 0.16\n    return round(wind_chill)\n"}
{"task_id": "Mbpp/639", "completion": "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n"}
{"task_id": "Mbpp/640", "completion": "\nimport re\n\ndef remove_parenthesis(string):\n    return re.sub(r\"\\([^)]*\\)\", \"\", string)\n"}
{"task_id": "Mbpp/641", "completion": "\ndef is_nonagonal(n):\n    return (1 + (1 + 8 * n) ** 0.5) / 2\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(text):\n    return \"z\" in text[1:-1]\n"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    for i in range(k // 2):\n        arr[i], arr[k - 1 - i] = arr[k - 1 - i], arr[i]\n    return arr\n"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tuple_data, dict_data):\n    return tuple_data + (dict_data,)\n"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for j in range(1, n):\n        dp[j][0] = dp[j-1][0] + matrix[j][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    max_avg = float(\"-inf\")\n    for i in range(n):\n        for j in range(n):\n            for k in range(i, n):\n                for l in range(j, n):\n                    avg = (dp[k][l] - dp[i-1][l] - dp[k][j-1] + dp[i-1][j-1]) / ((k - i + 1) * (l - j + 1))\n                    max_avg = max(max_avg, avg)\n\n    return max_avg\n"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(data, min_height, min_weight):\n    return dict(filter(lambda x: x[1][0] > min_height and x[1][1] > min_weight, data.items()))\n"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    result = 1\n    for _ in range(power):\n        result *= base\n    return sum(int(digit) for digit in str(result))\n"}
{"task_id": "Mbpp/725", "completion": "\nimport re\n\ndef extract_quotation(string):\n    pattern = r'\\\"([^\\\"]+)\\\"'\n    matches = re.findall(pattern, string)\n    return matches\n"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(numbers):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i + 1])\n    return tuple(result)\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(a,b):\n    return [x+y for x,y in zip(a,b)]\n"}
{"task_id": "Mbpp/730", "completion": "\ndef consecutive_duplicates(lst):\n    stack = []\n    for item in lst:\n        if not stack or item != stack[-1]:\n            stack.append(item)\n    return stack\n"}
{"task_id": "Mbpp/731", "completion": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n"}
{"task_id": "Mbpp/733", "completion": "\ndef find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] < num:\n                return mid\n            else:\n                right = mid - 1\n        elif num < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_prod += prod\n    return sum_prod\n"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(num):\n    mask = 0b00000111  # 0b111 for even numbers, 0b110 for odd numbers\n    return (num ^ mask) & (mask << 1) & (mask >> 1)\n"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(lst, value):\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) // 2\n        if lst[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"}
{"task_id": "Mbpp/737", "completion": "\nimport re\n\ndef check_str(string):\n    pattern = r\"^[aeiou]\"\n    return bool(re.match(pattern, string))\n"}
{"task_id": "Mbpp/739", "completion": "\ndef find_Index(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        sum = 0\n        for i in range(1, num + 1):\n            sum += i\n        count = len(str(sum))\n    return num\n"}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(len(tup) - 1)}\n"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(string):\n    return all(c == string[0] for c in string)\n"}
{"task_id": "Mbpp/742", "completion": "\nimport math\n\ndef area_tetrahedron(a):\n    s = a / 2\n    A = math.sqrt(s * (s - a) * (s - a) * (s - a))\n    return 4 * A\n"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))\n"}
{"task_id": "Mbpp/746", "completion": "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (radius**2 * math.radians(angle)) / 2\n"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(s):\n    return s.title().replace(' ', '')\n"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(lst):\n    def convert(s):\n        try:\n            return int(s)\n        except ValueError:\n            return s\n    return sorted(lst, key=convert)\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2, -1, -1):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index, element in enumerate(l1):\n        if element == l2[index] == l3[index]:\n            common_elements.append(element)\n    return common_elements\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]\n"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/758", "completion": "\ndef unique_sublists(lst):\n    unique_tuples = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_tuples:\n            unique_tuples[sublist_tuple] += 1\n        else:\n            unique_tuples[sublist_tuple] = 1\n    return unique_tuples\n"}
{"task_id": "Mbpp/759", "completion": "\nimport re\n\ndef is_decimal(string):\n    pattern = r'^-?\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?$'\n    return bool(re.match(pattern, string))\n"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\"\n"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    if n == 1:\n        return 1\n    return is_polite(n - 1) + 1\n"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(items):\n    return list(zip(items, items[1:]))\n"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/769", "completion": "\ndef Diff(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1 - set2) + list(set2 - set1)\n"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        odd_num = (2 * i) - 1\n        sum += odd_num ** 4\n    return sum\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n\n    return not stack\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(string, substring):\n    index = string.find(substring)\n    if index >= 0:\n        return (substring, index, index + len(substring) - 1)\n    else:\n        return None\n"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if all(num % 2 == 1 for num in lst[i]):\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(lst):\n    sum = 0\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            sum += num\n            seen.add(num)\n    return sum\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for element in lst:\n        if current_sublist and element != current_sublist[-1] + 1:\n            result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(element)\n    if current_sublist:\n        result.append(current_sublist)\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "\ndef find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            sum_tuple = tuple(set(tuple_list[i]) | set(tuple_list[j]))\n            sum_value = sum(sum_tuple)\n            if sum_value not in [x[0] for x in combinations] + [x[1] for x in combinations]:\n                combinations.append(sum_tuple)\n    return combinations\n"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                total += sum(arr[i:j+1])\n    return total\n"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if diff == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / diff) % 6\n    elif cmax == g:\n        h = ((b - r) / diff) + 2\n    elif cmax == b:\n        h = ((r - g) / diff) + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    s = diff / cmax if cmax != 0 else 0\n    v = cmax\n    return h, s, v\n"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 0\n    return lst[even_count-1] * lst[odd_count-1]\n"}
{"task_id": "Mbpp/785", "completion": "\nimport ast\n\ndef tuple_str_int(tuple_str):\n    return ast.literal_eval(tuple_str)\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(arr, value):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"}
{"task_id": "Mbpp/787", "completion": "\nimport re\n\ndef text_match_three(text):\n    pattern = r\"abbb\"\n    return bool(re.search(pattern, text))\n"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(lst, str1):\n    return tuple(lst) + (str1,)\n"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(lst):\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lists):\n    count = 0\n    for lst in lists:\n        if isinstance(lst, list):\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/793", "completion": "\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"}
{"task_id": "Mbpp/794", "completion": "\nimport re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    return bool(re.match(pattern, text))\n"}
{"task_id": "Mbpp/796", "completion": "\ndef return_sum(my_dict):\n    total = 0\n    for key in my_dict:\n        total += my_dict[key]\n    return total\n"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/798", "completion": "\ndef _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(num, d):\n    return (num << d) | (num >> (32 - d))\n"}
{"task_id": "Mbpp/800", "completion": "\ndef remove_all_spaces(string):\n    return ''.join(char for char in string if char != ' ')\n"}
{"task_id": "Mbpp/801", "completion": "\ndef count_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(num):\n    return num ** 0.5 % 1 == 0\n"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(lst):\n    max_sum = 0\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run\n"}
{"task_id": "Mbpp/807", "completion": "\ndef first_odd(numbers):\n    for num in numbers:\n        if num % 2 == 1:\n            return num\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tuple, k):\n    return k in tuple\n"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(tuple1, tuple2):\n    for x, y in zip(tuple1, tuple2):\n        if x > y:\n            return False\n    return True\n"}
